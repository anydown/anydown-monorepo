// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/vue/dist/vue.runtime.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if ("development" !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ("development" !== 'production' && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ("development" !== 'production' && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if ("development" !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    "development" !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if ("development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if ("development" !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if ("development" !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ("development" !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if ("development" !== 'production' && // skip validation for weex recycle-list child component props
  !false) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ("development" !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if ("development" !== 'production') {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function () {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if ("development" !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if ("development" !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if ("development" !== 'production') {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if ("development" !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if ("development" !== 'production') {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ("development" !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ("development" !== 'production' && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if ("development" !== 'production') {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if ("development" !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ("development" !== 'production' && isDef(data) && isDef(data.nativeOn)) {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if ("development" !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ("development" !== 'production' && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
      "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject("development" !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if ("development" !== 'production') {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if ("development" !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if ("development" !== 'production') {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if ("development" !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if ("development" !== 'production') {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ("development" !== 'production' && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = "development" !== 'production' ? expOrFn.toString() : ''; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
      "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if ("development" !== 'production') {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if ("development" !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ("development" !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if ("development" !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if ("development" !== 'production') {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if ("development" !== 'production') {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if ("development" !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    } // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ("development" !== 'production' && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ("development" !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ("development" !== 'production' && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if ("development" !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.11';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
      "development" !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if ("development" !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if ("development" !== 'production') {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if ("development" !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if ("development" !== 'production') {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if ("development" !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if ("development" !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecesarry `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ("development" !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if ("development" !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ("development" !== 'production' && "development" !== 'test') {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ("development" !== 'production' && "development" !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var _default = Vue;
exports.default = _default;
},{}],"../node_modules/node-libs-browser/node_modules/punycode/punycode.js":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

},{}],"../node_modules/@anydown/anydown-core/dist/anydown-core.js":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('punycode')) : typeof define === 'function' && define.amd ? define(['punycode'], factory) : (global = global || self, global.anydown = factory(global.punycode));
})(this, function (punycode) {
  'use strict';

  punycode = punycode && Object.prototype.hasOwnProperty.call(punycode, 'default') ? punycode['default'] : punycode;
  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace(n) {
    return n && n['default'] || n;
  }

  var Aacute = "Á";
  var aacute = "á";
  var Abreve = "Ă";
  var abreve = "ă";
  var ac = "∾";
  var acd = "∿";
  var acE = "∾̳";
  var Acirc = "Â";
  var acirc = "â";
  var acute = "´";
  var Acy = "А";
  var acy = "а";
  var AElig = "Æ";
  var aelig = "æ";
  var af = "⁡";
  var Afr = "𝔄";
  var afr = "𝔞";
  var Agrave = "À";
  var agrave = "à";
  var alefsym = "ℵ";
  var aleph = "ℵ";
  var Alpha = "Α";
  var alpha = "α";
  var Amacr = "Ā";
  var amacr = "ā";
  var amalg = "⨿";
  var amp = "&";
  var AMP = "&";
  var andand = "⩕";
  var And = "⩓";
  var and = "∧";
  var andd = "⩜";
  var andslope = "⩘";
  var andv = "⩚";
  var ang = "∠";
  var ange = "⦤";
  var angle = "∠";
  var angmsdaa = "⦨";
  var angmsdab = "⦩";
  var angmsdac = "⦪";
  var angmsdad = "⦫";
  var angmsdae = "⦬";
  var angmsdaf = "⦭";
  var angmsdag = "⦮";
  var angmsdah = "⦯";
  var angmsd = "∡";
  var angrt = "∟";
  var angrtvb = "⊾";
  var angrtvbd = "⦝";
  var angsph = "∢";
  var angst = "Å";
  var angzarr = "⍼";
  var Aogon = "Ą";
  var aogon = "ą";
  var Aopf = "𝔸";
  var aopf = "𝕒";
  var apacir = "⩯";
  var ap = "≈";
  var apE = "⩰";
  var ape = "≊";
  var apid = "≋";
  var apos = "'";
  var ApplyFunction = "⁡";
  var approx = "≈";
  var approxeq = "≊";
  var Aring = "Å";
  var aring = "å";
  var Ascr = "𝒜";
  var ascr = "𝒶";
  var Assign = "≔";
  var ast = "*";
  var asymp = "≈";
  var asympeq = "≍";
  var Atilde = "Ã";
  var atilde = "ã";
  var Auml = "Ä";
  var auml = "ä";
  var awconint = "∳";
  var awint = "⨑";
  var backcong = "≌";
  var backepsilon = "϶";
  var backprime = "‵";
  var backsim = "∽";
  var backsimeq = "⋍";
  var Backslash = "∖";
  var Barv = "⫧";
  var barvee = "⊽";
  var barwed = "⌅";
  var Barwed = "⌆";
  var barwedge = "⌅";
  var bbrk = "⎵";
  var bbrktbrk = "⎶";
  var bcong = "≌";
  var Bcy = "Б";
  var bcy = "б";
  var bdquo = "„";
  var becaus = "∵";
  var because = "∵";
  var Because = "∵";
  var bemptyv = "⦰";
  var bepsi = "϶";
  var bernou = "ℬ";
  var Bernoullis = "ℬ";
  var Beta = "Β";
  var beta = "β";
  var beth = "ℶ";
  var between = "≬";
  var Bfr = "𝔅";
  var bfr = "𝔟";
  var bigcap = "⋂";
  var bigcirc = "◯";
  var bigcup = "⋃";
  var bigodot = "⨀";
  var bigoplus = "⨁";
  var bigotimes = "⨂";
  var bigsqcup = "⨆";
  var bigstar = "★";
  var bigtriangledown = "▽";
  var bigtriangleup = "△";
  var biguplus = "⨄";
  var bigvee = "⋁";
  var bigwedge = "⋀";
  var bkarow = "⤍";
  var blacklozenge = "⧫";
  var blacksquare = "▪";
  var blacktriangle = "▴";
  var blacktriangledown = "▾";
  var blacktriangleleft = "◂";
  var blacktriangleright = "▸";
  var blank = "␣";
  var blk12 = "▒";
  var blk14 = "░";
  var blk34 = "▓";
  var block = "█";
  var bne = "=⃥";
  var bnequiv = "≡⃥";
  var bNot = "⫭";
  var bnot = "⌐";
  var Bopf = "𝔹";
  var bopf = "𝕓";
  var bot = "⊥";
  var bottom = "⊥";
  var bowtie = "⋈";
  var boxbox = "⧉";
  var boxdl = "┐";
  var boxdL = "╕";
  var boxDl = "╖";
  var boxDL = "╗";
  var boxdr = "┌";
  var boxdR = "╒";
  var boxDr = "╓";
  var boxDR = "╔";
  var boxh = "─";
  var boxH = "═";
  var boxhd = "┬";
  var boxHd = "╤";
  var boxhD = "╥";
  var boxHD = "╦";
  var boxhu = "┴";
  var boxHu = "╧";
  var boxhU = "╨";
  var boxHU = "╩";
  var boxminus = "⊟";
  var boxplus = "⊞";
  var boxtimes = "⊠";
  var boxul = "┘";
  var boxuL = "╛";
  var boxUl = "╜";
  var boxUL = "╝";
  var boxur = "└";
  var boxuR = "╘";
  var boxUr = "╙";
  var boxUR = "╚";
  var boxv = "│";
  var boxV = "║";
  var boxvh = "┼";
  var boxvH = "╪";
  var boxVh = "╫";
  var boxVH = "╬";
  var boxvl = "┤";
  var boxvL = "╡";
  var boxVl = "╢";
  var boxVL = "╣";
  var boxvr = "├";
  var boxvR = "╞";
  var boxVr = "╟";
  var boxVR = "╠";
  var bprime = "‵";
  var breve = "˘";
  var Breve = "˘";
  var brvbar = "¦";
  var bscr = "𝒷";
  var Bscr = "ℬ";
  var bsemi = "⁏";
  var bsim = "∽";
  var bsime = "⋍";
  var bsolb = "⧅";
  var bsol = "\\";
  var bsolhsub = "⟈";
  var bull = "•";
  var bullet = "•";
  var bump = "≎";
  var bumpE = "⪮";
  var bumpe = "≏";
  var Bumpeq = "≎";
  var bumpeq = "≏";
  var Cacute = "Ć";
  var cacute = "ć";
  var capand = "⩄";
  var capbrcup = "⩉";
  var capcap = "⩋";
  var cap = "∩";
  var Cap = "⋒";
  var capcup = "⩇";
  var capdot = "⩀";
  var CapitalDifferentialD = "ⅅ";
  var caps = "∩︀";
  var caret = "⁁";
  var caron = "ˇ";
  var Cayleys = "ℭ";
  var ccaps = "⩍";
  var Ccaron = "Č";
  var ccaron = "č";
  var Ccedil = "Ç";
  var ccedil = "ç";
  var Ccirc = "Ĉ";
  var ccirc = "ĉ";
  var Cconint = "∰";
  var ccups = "⩌";
  var ccupssm = "⩐";
  var Cdot = "Ċ";
  var cdot = "ċ";
  var cedil = "¸";
  var Cedilla = "¸";
  var cemptyv = "⦲";
  var cent = "¢";
  var centerdot = "·";
  var CenterDot = "·";
  var cfr = "𝔠";
  var Cfr = "ℭ";
  var CHcy = "Ч";
  var chcy = "ч";
  var check = "✓";
  var checkmark = "✓";
  var Chi = "Χ";
  var chi = "χ";
  var circ = "ˆ";
  var circeq = "≗";
  var circlearrowleft = "↺";
  var circlearrowright = "↻";
  var circledast = "⊛";
  var circledcirc = "⊚";
  var circleddash = "⊝";
  var CircleDot = "⊙";
  var circledR = "®";
  var circledS = "Ⓢ";
  var CircleMinus = "⊖";
  var CirclePlus = "⊕";
  var CircleTimes = "⊗";
  var cir = "○";
  var cirE = "⧃";
  var cire = "≗";
  var cirfnint = "⨐";
  var cirmid = "⫯";
  var cirscir = "⧂";
  var ClockwiseContourIntegral = "∲";
  var CloseCurlyDoubleQuote = "”";
  var CloseCurlyQuote = "’";
  var clubs = "♣";
  var clubsuit = "♣";
  var colon = ":";
  var Colon = "∷";
  var Colone = "⩴";
  var colone = "≔";
  var coloneq = "≔";
  var comma = ",";
  var commat = "@";
  var comp = "∁";
  var compfn = "∘";
  var complement = "∁";
  var complexes = "ℂ";
  var cong = "≅";
  var congdot = "⩭";
  var Congruent = "≡";
  var conint = "∮";
  var Conint = "∯";
  var ContourIntegral = "∮";
  var copf = "𝕔";
  var Copf = "ℂ";
  var coprod = "∐";
  var Coproduct = "∐";
  var copy = "©";
  var COPY = "©";
  var copysr = "℗";
  var CounterClockwiseContourIntegral = "∳";
  var crarr = "↵";
  var cross = "✗";
  var Cross = "⨯";
  var Cscr = "𝒞";
  var cscr = "𝒸";
  var csub = "⫏";
  var csube = "⫑";
  var csup = "⫐";
  var csupe = "⫒";
  var ctdot = "⋯";
  var cudarrl = "⤸";
  var cudarrr = "⤵";
  var cuepr = "⋞";
  var cuesc = "⋟";
  var cularr = "↶";
  var cularrp = "⤽";
  var cupbrcap = "⩈";
  var cupcap = "⩆";
  var CupCap = "≍";
  var cup = "∪";
  var Cup = "⋓";
  var cupcup = "⩊";
  var cupdot = "⊍";
  var cupor = "⩅";
  var cups = "∪︀";
  var curarr = "↷";
  var curarrm = "⤼";
  var curlyeqprec = "⋞";
  var curlyeqsucc = "⋟";
  var curlyvee = "⋎";
  var curlywedge = "⋏";
  var curren = "¤";
  var curvearrowleft = "↶";
  var curvearrowright = "↷";
  var cuvee = "⋎";
  var cuwed = "⋏";
  var cwconint = "∲";
  var cwint = "∱";
  var cylcty = "⌭";
  var dagger = "†";
  var Dagger = "‡";
  var daleth = "ℸ";
  var darr = "↓";
  var Darr = "↡";
  var dArr = "⇓";
  var dash = "‐";
  var Dashv = "⫤";
  var dashv = "⊣";
  var dbkarow = "⤏";
  var dblac = "˝";
  var Dcaron = "Ď";
  var dcaron = "ď";
  var Dcy = "Д";
  var dcy = "д";
  var ddagger = "‡";
  var ddarr = "⇊";
  var DD = "ⅅ";
  var dd = "ⅆ";
  var DDotrahd = "⤑";
  var ddotseq = "⩷";
  var deg = "°";
  var Del = "∇";
  var Delta = "Δ";
  var delta = "δ";
  var demptyv = "⦱";
  var dfisht = "⥿";
  var Dfr = "𝔇";
  var dfr = "𝔡";
  var dHar = "⥥";
  var dharl = "⇃";
  var dharr = "⇂";
  var DiacriticalAcute = "´";
  var DiacriticalDot = "˙";
  var DiacriticalDoubleAcute = "˝";
  var DiacriticalGrave = "`";
  var DiacriticalTilde = "˜";
  var diam = "⋄";
  var diamond = "⋄";
  var Diamond = "⋄";
  var diamondsuit = "♦";
  var diams = "♦";
  var die = "¨";
  var DifferentialD = "ⅆ";
  var digamma = "ϝ";
  var disin = "⋲";
  var div = "÷";
  var divide = "÷";
  var divideontimes = "⋇";
  var divonx = "⋇";
  var DJcy = "Ђ";
  var djcy = "ђ";
  var dlcorn = "⌞";
  var dlcrop = "⌍";
  var dollar = "$";
  var Dopf = "𝔻";
  var dopf = "𝕕";
  var Dot = "¨";
  var dot = "˙";
  var DotDot = "⃜";
  var doteq = "≐";
  var doteqdot = "≑";
  var DotEqual = "≐";
  var dotminus = "∸";
  var dotplus = "∔";
  var dotsquare = "⊡";
  var doublebarwedge = "⌆";
  var DoubleContourIntegral = "∯";
  var DoubleDot = "¨";
  var DoubleDownArrow = "⇓";
  var DoubleLeftArrow = "⇐";
  var DoubleLeftRightArrow = "⇔";
  var DoubleLeftTee = "⫤";
  var DoubleLongLeftArrow = "⟸";
  var DoubleLongLeftRightArrow = "⟺";
  var DoubleLongRightArrow = "⟹";
  var DoubleRightArrow = "⇒";
  var DoubleRightTee = "⊨";
  var DoubleUpArrow = "⇑";
  var DoubleUpDownArrow = "⇕";
  var DoubleVerticalBar = "∥";
  var DownArrowBar = "⤓";
  var downarrow = "↓";
  var DownArrow = "↓";
  var Downarrow = "⇓";
  var DownArrowUpArrow = "⇵";
  var DownBreve = "̑";
  var downdownarrows = "⇊";
  var downharpoonleft = "⇃";
  var downharpoonright = "⇂";
  var DownLeftRightVector = "⥐";
  var DownLeftTeeVector = "⥞";
  var DownLeftVectorBar = "⥖";
  var DownLeftVector = "↽";
  var DownRightTeeVector = "⥟";
  var DownRightVectorBar = "⥗";
  var DownRightVector = "⇁";
  var DownTeeArrow = "↧";
  var DownTee = "⊤";
  var drbkarow = "⤐";
  var drcorn = "⌟";
  var drcrop = "⌌";
  var Dscr = "𝒟";
  var dscr = "𝒹";
  var DScy = "Ѕ";
  var dscy = "ѕ";
  var dsol = "⧶";
  var Dstrok = "Đ";
  var dstrok = "đ";
  var dtdot = "⋱";
  var dtri = "▿";
  var dtrif = "▾";
  var duarr = "⇵";
  var duhar = "⥯";
  var dwangle = "⦦";
  var DZcy = "Џ";
  var dzcy = "џ";
  var dzigrarr = "⟿";
  var Eacute = "É";
  var eacute = "é";
  var easter = "⩮";
  var Ecaron = "Ě";
  var ecaron = "ě";
  var Ecirc = "Ê";
  var ecirc = "ê";
  var ecir = "≖";
  var ecolon = "≕";
  var Ecy = "Э";
  var ecy = "э";
  var eDDot = "⩷";
  var Edot = "Ė";
  var edot = "ė";
  var eDot = "≑";
  var ee = "ⅇ";
  var efDot = "≒";
  var Efr = "𝔈";
  var efr = "𝔢";
  var eg = "⪚";
  var Egrave = "È";
  var egrave = "è";
  var egs = "⪖";
  var egsdot = "⪘";
  var el = "⪙";
  var Element = "∈";
  var elinters = "⏧";
  var ell = "ℓ";
  var els = "⪕";
  var elsdot = "⪗";
  var Emacr = "Ē";
  var emacr = "ē";
  var empty = "∅";
  var emptyset = "∅";
  var EmptySmallSquare = "◻";
  var emptyv = "∅";
  var EmptyVerySmallSquare = "▫";
  var emsp13 = " ";
  var emsp14 = " ";
  var emsp = " ";
  var ENG = "Ŋ";
  var eng = "ŋ";
  var ensp = " ";
  var Eogon = "Ę";
  var eogon = "ę";
  var Eopf = "𝔼";
  var eopf = "𝕖";
  var epar = "⋕";
  var eparsl = "⧣";
  var eplus = "⩱";
  var epsi = "ε";
  var Epsilon = "Ε";
  var epsilon = "ε";
  var epsiv = "ϵ";
  var eqcirc = "≖";
  var eqcolon = "≕";
  var eqsim = "≂";
  var eqslantgtr = "⪖";
  var eqslantless = "⪕";
  var Equal = "⩵";
  var equals = "=";
  var EqualTilde = "≂";
  var equest = "≟";
  var Equilibrium = "⇌";
  var equiv = "≡";
  var equivDD = "⩸";
  var eqvparsl = "⧥";
  var erarr = "⥱";
  var erDot = "≓";
  var escr = "ℯ";
  var Escr = "ℰ";
  var esdot = "≐";
  var Esim = "⩳";
  var esim = "≂";
  var Eta = "Η";
  var eta = "η";
  var ETH = "Ð";
  var eth = "ð";
  var Euml = "Ë";
  var euml = "ë";
  var euro = "€";
  var excl = "!";
  var exist = "∃";
  var Exists = "∃";
  var expectation = "ℰ";
  var exponentiale = "ⅇ";
  var ExponentialE = "ⅇ";
  var fallingdotseq = "≒";
  var Fcy = "Ф";
  var fcy = "ф";
  var female = "♀";
  var ffilig = "ﬃ";
  var fflig = "ﬀ";
  var ffllig = "ﬄ";
  var Ffr = "𝔉";
  var ffr = "𝔣";
  var filig = "ﬁ";
  var FilledSmallSquare = "◼";
  var FilledVerySmallSquare = "▪";
  var fjlig = "fj";
  var flat = "♭";
  var fllig = "ﬂ";
  var fltns = "▱";
  var fnof = "ƒ";
  var Fopf = "𝔽";
  var fopf = "𝕗";
  var forall = "∀";
  var ForAll = "∀";
  var fork = "⋔";
  var forkv = "⫙";
  var Fouriertrf = "ℱ";
  var fpartint = "⨍";
  var frac12 = "½";
  var frac13 = "⅓";
  var frac14 = "¼";
  var frac15 = "⅕";
  var frac16 = "⅙";
  var frac18 = "⅛";
  var frac23 = "⅔";
  var frac25 = "⅖";
  var frac34 = "¾";
  var frac35 = "⅗";
  var frac38 = "⅜";
  var frac45 = "⅘";
  var frac56 = "⅚";
  var frac58 = "⅝";
  var frac78 = "⅞";
  var frasl = "⁄";
  var frown = "⌢";
  var fscr = "𝒻";
  var Fscr = "ℱ";
  var gacute = "ǵ";
  var Gamma = "Γ";
  var gamma = "γ";
  var Gammad = "Ϝ";
  var gammad = "ϝ";
  var gap = "⪆";
  var Gbreve = "Ğ";
  var gbreve = "ğ";
  var Gcedil = "Ģ";
  var Gcirc = "Ĝ";
  var gcirc = "ĝ";
  var Gcy = "Г";
  var gcy = "г";
  var Gdot = "Ġ";
  var gdot = "ġ";
  var ge = "≥";
  var gE = "≧";
  var gEl = "⪌";
  var gel = "⋛";
  var geq = "≥";
  var geqq = "≧";
  var geqslant = "⩾";
  var gescc = "⪩";
  var ges = "⩾";
  var gesdot = "⪀";
  var gesdoto = "⪂";
  var gesdotol = "⪄";
  var gesl = "⋛︀";
  var gesles = "⪔";
  var Gfr = "𝔊";
  var gfr = "𝔤";
  var gg = "≫";
  var Gg = "⋙";
  var ggg = "⋙";
  var gimel = "ℷ";
  var GJcy = "Ѓ";
  var gjcy = "ѓ";
  var gla = "⪥";
  var gl = "≷";
  var glE = "⪒";
  var glj = "⪤";
  var gnap = "⪊";
  var gnapprox = "⪊";
  var gne = "⪈";
  var gnE = "≩";
  var gneq = "⪈";
  var gneqq = "≩";
  var gnsim = "⋧";
  var Gopf = "𝔾";
  var gopf = "𝕘";
  var grave = "`";
  var GreaterEqual = "≥";
  var GreaterEqualLess = "⋛";
  var GreaterFullEqual = "≧";
  var GreaterGreater = "⪢";
  var GreaterLess = "≷";
  var GreaterSlantEqual = "⩾";
  var GreaterTilde = "≳";
  var Gscr = "𝒢";
  var gscr = "ℊ";
  var gsim = "≳";
  var gsime = "⪎";
  var gsiml = "⪐";
  var gtcc = "⪧";
  var gtcir = "⩺";
  var gt = ">";
  var GT = ">";
  var Gt = "≫";
  var gtdot = "⋗";
  var gtlPar = "⦕";
  var gtquest = "⩼";
  var gtrapprox = "⪆";
  var gtrarr = "⥸";
  var gtrdot = "⋗";
  var gtreqless = "⋛";
  var gtreqqless = "⪌";
  var gtrless = "≷";
  var gtrsim = "≳";
  var gvertneqq = "≩︀";
  var gvnE = "≩︀";
  var Hacek = "ˇ";
  var hairsp = " ";
  var half = "½";
  var hamilt = "ℋ";
  var HARDcy = "Ъ";
  var hardcy = "ъ";
  var harrcir = "⥈";
  var harr = "↔";
  var hArr = "⇔";
  var harrw = "↭";
  var Hat = "^";
  var hbar = "ℏ";
  var Hcirc = "Ĥ";
  var hcirc = "ĥ";
  var hearts = "♥";
  var heartsuit = "♥";
  var hellip = "…";
  var hercon = "⊹";
  var hfr = "𝔥";
  var Hfr = "ℌ";
  var HilbertSpace = "ℋ";
  var hksearow = "⤥";
  var hkswarow = "⤦";
  var hoarr = "⇿";
  var homtht = "∻";
  var hookleftarrow = "↩";
  var hookrightarrow = "↪";
  var hopf = "𝕙";
  var Hopf = "ℍ";
  var horbar = "―";
  var HorizontalLine = "─";
  var hscr = "𝒽";
  var Hscr = "ℋ";
  var hslash = "ℏ";
  var Hstrok = "Ħ";
  var hstrok = "ħ";
  var HumpDownHump = "≎";
  var HumpEqual = "≏";
  var hybull = "⁃";
  var hyphen = "‐";
  var Iacute = "Í";
  var iacute = "í";
  var ic = "⁣";
  var Icirc = "Î";
  var icirc = "î";
  var Icy = "И";
  var icy = "и";
  var Idot = "İ";
  var IEcy = "Е";
  var iecy = "е";
  var iexcl = "¡";
  var iff = "⇔";
  var ifr = "𝔦";
  var Ifr = "ℑ";
  var Igrave = "Ì";
  var igrave = "ì";
  var ii = "ⅈ";
  var iiiint = "⨌";
  var iiint = "∭";
  var iinfin = "⧜";
  var iiota = "℩";
  var IJlig = "Ĳ";
  var ijlig = "ĳ";
  var Imacr = "Ī";
  var imacr = "ī";
  var image = "ℑ";
  var ImaginaryI = "ⅈ";
  var imagline = "ℐ";
  var imagpart = "ℑ";
  var imath = "ı";
  var Im = "ℑ";
  var imof = "⊷";
  var imped = "Ƶ";
  var Implies = "⇒";
  var incare = "℅";
  var infin = "∞";
  var infintie = "⧝";
  var inodot = "ı";
  var intcal = "⊺";
  var int = "∫";
  var Int = "∬";
  var integers = "ℤ";
  var Integral = "∫";
  var intercal = "⊺";
  var Intersection = "⋂";
  var intlarhk = "⨗";
  var intprod = "⨼";
  var InvisibleComma = "⁣";
  var InvisibleTimes = "⁢";
  var IOcy = "Ё";
  var iocy = "ё";
  var Iogon = "Į";
  var iogon = "į";
  var Iopf = "𝕀";
  var iopf = "𝕚";
  var Iota = "Ι";
  var iota = "ι";
  var iprod = "⨼";
  var iquest = "¿";
  var iscr = "𝒾";
  var Iscr = "ℐ";
  var isin = "∈";
  var isindot = "⋵";
  var isinE = "⋹";
  var isins = "⋴";
  var isinsv = "⋳";
  var isinv = "∈";
  var it = "⁢";
  var Itilde = "Ĩ";
  var itilde = "ĩ";
  var Iukcy = "І";
  var iukcy = "і";
  var Iuml = "Ï";
  var iuml = "ï";
  var Jcirc = "Ĵ";
  var jcirc = "ĵ";
  var Jcy = "Й";
  var jcy = "й";
  var Jfr = "𝔍";
  var jfr = "𝔧";
  var jmath = "ȷ";
  var Jopf = "𝕁";
  var jopf = "𝕛";
  var Jscr = "𝒥";
  var jscr = "𝒿";
  var Jsercy = "Ј";
  var jsercy = "ј";
  var Jukcy = "Є";
  var jukcy = "є";
  var Kappa = "Κ";
  var kappa = "κ";
  var kappav = "ϰ";
  var Kcedil = "Ķ";
  var kcedil = "ķ";
  var Kcy = "К";
  var kcy = "к";
  var Kfr = "𝔎";
  var kfr = "𝔨";
  var kgreen = "ĸ";
  var KHcy = "Х";
  var khcy = "х";
  var KJcy = "Ќ";
  var kjcy = "ќ";
  var Kopf = "𝕂";
  var kopf = "𝕜";
  var Kscr = "𝒦";
  var kscr = "𝓀";
  var lAarr = "⇚";
  var Lacute = "Ĺ";
  var lacute = "ĺ";
  var laemptyv = "⦴";
  var lagran = "ℒ";
  var Lambda = "Λ";
  var lambda = "λ";
  var lang = "⟨";
  var Lang = "⟪";
  var langd = "⦑";
  var langle = "⟨";
  var lap = "⪅";
  var Laplacetrf = "ℒ";
  var laquo = "«";
  var larrb = "⇤";
  var larrbfs = "⤟";
  var larr = "←";
  var Larr = "↞";
  var lArr = "⇐";
  var larrfs = "⤝";
  var larrhk = "↩";
  var larrlp = "↫";
  var larrpl = "⤹";
  var larrsim = "⥳";
  var larrtl = "↢";
  var latail = "⤙";
  var lAtail = "⤛";
  var lat = "⪫";
  var late = "⪭";
  var lates = "⪭︀";
  var lbarr = "⤌";
  var lBarr = "⤎";
  var lbbrk = "❲";
  var lbrace = "{";
  var lbrack = "[";
  var lbrke = "⦋";
  var lbrksld = "⦏";
  var lbrkslu = "⦍";
  var Lcaron = "Ľ";
  var lcaron = "ľ";
  var Lcedil = "Ļ";
  var lcedil = "ļ";
  var lceil = "⌈";
  var lcub = "{";
  var Lcy = "Л";
  var lcy = "л";
  var ldca = "⤶";
  var ldquo = "“";
  var ldquor = "„";
  var ldrdhar = "⥧";
  var ldrushar = "⥋";
  var ldsh = "↲";
  var le = "≤";
  var lE = "≦";
  var LeftAngleBracket = "⟨";
  var LeftArrowBar = "⇤";
  var leftarrow = "←";
  var LeftArrow = "←";
  var Leftarrow = "⇐";
  var LeftArrowRightArrow = "⇆";
  var leftarrowtail = "↢";
  var LeftCeiling = "⌈";
  var LeftDoubleBracket = "⟦";
  var LeftDownTeeVector = "⥡";
  var LeftDownVectorBar = "⥙";
  var LeftDownVector = "⇃";
  var LeftFloor = "⌊";
  var leftharpoondown = "↽";
  var leftharpoonup = "↼";
  var leftleftarrows = "⇇";
  var leftrightarrow = "↔";
  var LeftRightArrow = "↔";
  var Leftrightarrow = "⇔";
  var leftrightarrows = "⇆";
  var leftrightharpoons = "⇋";
  var leftrightsquigarrow = "↭";
  var LeftRightVector = "⥎";
  var LeftTeeArrow = "↤";
  var LeftTee = "⊣";
  var LeftTeeVector = "⥚";
  var leftthreetimes = "⋋";
  var LeftTriangleBar = "⧏";
  var LeftTriangle = "⊲";
  var LeftTriangleEqual = "⊴";
  var LeftUpDownVector = "⥑";
  var LeftUpTeeVector = "⥠";
  var LeftUpVectorBar = "⥘";
  var LeftUpVector = "↿";
  var LeftVectorBar = "⥒";
  var LeftVector = "↼";
  var lEg = "⪋";
  var leg = "⋚";
  var leq = "≤";
  var leqq = "≦";
  var leqslant = "⩽";
  var lescc = "⪨";
  var les = "⩽";
  var lesdot = "⩿";
  var lesdoto = "⪁";
  var lesdotor = "⪃";
  var lesg = "⋚︀";
  var lesges = "⪓";
  var lessapprox = "⪅";
  var lessdot = "⋖";
  var lesseqgtr = "⋚";
  var lesseqqgtr = "⪋";
  var LessEqualGreater = "⋚";
  var LessFullEqual = "≦";
  var LessGreater = "≶";
  var lessgtr = "≶";
  var LessLess = "⪡";
  var lesssim = "≲";
  var LessSlantEqual = "⩽";
  var LessTilde = "≲";
  var lfisht = "⥼";
  var lfloor = "⌊";
  var Lfr = "𝔏";
  var lfr = "𝔩";
  var lg = "≶";
  var lgE = "⪑";
  var lHar = "⥢";
  var lhard = "↽";
  var lharu = "↼";
  var lharul = "⥪";
  var lhblk = "▄";
  var LJcy = "Љ";
  var ljcy = "љ";
  var llarr = "⇇";
  var ll = "≪";
  var Ll = "⋘";
  var llcorner = "⌞";
  var Lleftarrow = "⇚";
  var llhard = "⥫";
  var lltri = "◺";
  var Lmidot = "Ŀ";
  var lmidot = "ŀ";
  var lmoustache = "⎰";
  var lmoust = "⎰";
  var lnap = "⪉";
  var lnapprox = "⪉";
  var lne = "⪇";
  var lnE = "≨";
  var lneq = "⪇";
  var lneqq = "≨";
  var lnsim = "⋦";
  var loang = "⟬";
  var loarr = "⇽";
  var lobrk = "⟦";
  var longleftarrow = "⟵";
  var LongLeftArrow = "⟵";
  var Longleftarrow = "⟸";
  var longleftrightarrow = "⟷";
  var LongLeftRightArrow = "⟷";
  var Longleftrightarrow = "⟺";
  var longmapsto = "⟼";
  var longrightarrow = "⟶";
  var LongRightArrow = "⟶";
  var Longrightarrow = "⟹";
  var looparrowleft = "↫";
  var looparrowright = "↬";
  var lopar = "⦅";
  var Lopf = "𝕃";
  var lopf = "𝕝";
  var loplus = "⨭";
  var lotimes = "⨴";
  var lowast = "∗";
  var lowbar = "_";
  var LowerLeftArrow = "↙";
  var LowerRightArrow = "↘";
  var loz = "◊";
  var lozenge = "◊";
  var lozf = "⧫";
  var lpar = "(";
  var lparlt = "⦓";
  var lrarr = "⇆";
  var lrcorner = "⌟";
  var lrhar = "⇋";
  var lrhard = "⥭";
  var lrm = "‎";
  var lrtri = "⊿";
  var lsaquo = "‹";
  var lscr = "𝓁";
  var Lscr = "ℒ";
  var lsh = "↰";
  var Lsh = "↰";
  var lsim = "≲";
  var lsime = "⪍";
  var lsimg = "⪏";
  var lsqb = "[";
  var lsquo = "‘";
  var lsquor = "‚";
  var Lstrok = "Ł";
  var lstrok = "ł";
  var ltcc = "⪦";
  var ltcir = "⩹";
  var lt = "<";
  var LT = "<";
  var Lt = "≪";
  var ltdot = "⋖";
  var lthree = "⋋";
  var ltimes = "⋉";
  var ltlarr = "⥶";
  var ltquest = "⩻";
  var ltri = "◃";
  var ltrie = "⊴";
  var ltrif = "◂";
  var ltrPar = "⦖";
  var lurdshar = "⥊";
  var luruhar = "⥦";
  var lvertneqq = "≨︀";
  var lvnE = "≨︀";
  var macr = "¯";
  var male = "♂";
  var malt = "✠";
  var maltese = "✠";
  var map = "↦";
  var mapsto = "↦";
  var mapstodown = "↧";
  var mapstoleft = "↤";
  var mapstoup = "↥";
  var marker = "▮";
  var mcomma = "⨩";
  var Mcy = "М";
  var mcy = "м";
  var mdash = "—";
  var mDDot = "∺";
  var measuredangle = "∡";
  var MediumSpace = " ";
  var Mellintrf = "ℳ";
  var Mfr = "𝔐";
  var mfr = "𝔪";
  var mho = "℧";
  var micro = "µ";
  var midast = "*";
  var midcir = "⫰";
  var mid = "∣";
  var middot = "·";
  var minusb = "⊟";
  var minus = "−";
  var minusd = "∸";
  var minusdu = "⨪";
  var MinusPlus = "∓";
  var mlcp = "⫛";
  var mldr = "…";
  var mnplus = "∓";
  var models = "⊧";
  var Mopf = "𝕄";
  var mopf = "𝕞";
  var mp = "∓";
  var mscr = "𝓂";
  var Mscr = "ℳ";
  var mstpos = "∾";
  var Mu = "Μ";
  var mu = "μ";
  var multimap = "⊸";
  var mumap = "⊸";
  var nabla = "∇";
  var Nacute = "Ń";
  var nacute = "ń";
  var nang = "∠⃒";
  var nap = "≉";
  var napE = "⩰̸";
  var napid = "≋̸";
  var napos = "ŉ";
  var napprox = "≉";
  var natural = "♮";
  var naturals = "ℕ";
  var natur = "♮";
  var nbsp = " ";
  var nbump = "≎̸";
  var nbumpe = "≏̸";
  var ncap = "⩃";
  var Ncaron = "Ň";
  var ncaron = "ň";
  var Ncedil = "Ņ";
  var ncedil = "ņ";
  var ncong = "≇";
  var ncongdot = "⩭̸";
  var ncup = "⩂";
  var Ncy = "Н";
  var ncy = "н";
  var ndash = "–";
  var nearhk = "⤤";
  var nearr = "↗";
  var neArr = "⇗";
  var nearrow = "↗";
  var ne = "≠";
  var nedot = "≐̸";
  var NegativeMediumSpace = "​";
  var NegativeThickSpace = "​";
  var NegativeThinSpace = "​";
  var NegativeVeryThinSpace = "​";
  var nequiv = "≢";
  var nesear = "⤨";
  var nesim = "≂̸";
  var NestedGreaterGreater = "≫";
  var NestedLessLess = "≪";
  var NewLine = "\n";
  var nexist = "∄";
  var nexists = "∄";
  var Nfr = "𝔑";
  var nfr = "𝔫";
  var ngE = "≧̸";
  var nge = "≱";
  var ngeq = "≱";
  var ngeqq = "≧̸";
  var ngeqslant = "⩾̸";
  var nges = "⩾̸";
  var nGg = "⋙̸";
  var ngsim = "≵";
  var nGt = "≫⃒";
  var ngt = "≯";
  var ngtr = "≯";
  var nGtv = "≫̸";
  var nharr = "↮";
  var nhArr = "⇎";
  var nhpar = "⫲";
  var ni = "∋";
  var nis = "⋼";
  var nisd = "⋺";
  var niv = "∋";
  var NJcy = "Њ";
  var njcy = "њ";
  var nlarr = "↚";
  var nlArr = "⇍";
  var nldr = "‥";
  var nlE = "≦̸";
  var nle = "≰";
  var nleftarrow = "↚";
  var nLeftarrow = "⇍";
  var nleftrightarrow = "↮";
  var nLeftrightarrow = "⇎";
  var nleq = "≰";
  var nleqq = "≦̸";
  var nleqslant = "⩽̸";
  var nles = "⩽̸";
  var nless = "≮";
  var nLl = "⋘̸";
  var nlsim = "≴";
  var nLt = "≪⃒";
  var nlt = "≮";
  var nltri = "⋪";
  var nltrie = "⋬";
  var nLtv = "≪̸";
  var nmid = "∤";
  var NoBreak = "⁠";
  var NonBreakingSpace = " ";
  var nopf = "𝕟";
  var Nopf = "ℕ";
  var Not = "⫬";
  var not = "¬";
  var NotCongruent = "≢";
  var NotCupCap = "≭";
  var NotDoubleVerticalBar = "∦";
  var NotElement = "∉";
  var NotEqual = "≠";
  var NotEqualTilde = "≂̸";
  var NotExists = "∄";
  var NotGreater = "≯";
  var NotGreaterEqual = "≱";
  var NotGreaterFullEqual = "≧̸";
  var NotGreaterGreater = "≫̸";
  var NotGreaterLess = "≹";
  var NotGreaterSlantEqual = "⩾̸";
  var NotGreaterTilde = "≵";
  var NotHumpDownHump = "≎̸";
  var NotHumpEqual = "≏̸";
  var notin = "∉";
  var notindot = "⋵̸";
  var notinE = "⋹̸";
  var notinva = "∉";
  var notinvb = "⋷";
  var notinvc = "⋶";
  var NotLeftTriangleBar = "⧏̸";
  var NotLeftTriangle = "⋪";
  var NotLeftTriangleEqual = "⋬";
  var NotLess = "≮";
  var NotLessEqual = "≰";
  var NotLessGreater = "≸";
  var NotLessLess = "≪̸";
  var NotLessSlantEqual = "⩽̸";
  var NotLessTilde = "≴";
  var NotNestedGreaterGreater = "⪢̸";
  var NotNestedLessLess = "⪡̸";
  var notni = "∌";
  var notniva = "∌";
  var notnivb = "⋾";
  var notnivc = "⋽";
  var NotPrecedes = "⊀";
  var NotPrecedesEqual = "⪯̸";
  var NotPrecedesSlantEqual = "⋠";
  var NotReverseElement = "∌";
  var NotRightTriangleBar = "⧐̸";
  var NotRightTriangle = "⋫";
  var NotRightTriangleEqual = "⋭";
  var NotSquareSubset = "⊏̸";
  var NotSquareSubsetEqual = "⋢";
  var NotSquareSuperset = "⊐̸";
  var NotSquareSupersetEqual = "⋣";
  var NotSubset = "⊂⃒";
  var NotSubsetEqual = "⊈";
  var NotSucceeds = "⊁";
  var NotSucceedsEqual = "⪰̸";
  var NotSucceedsSlantEqual = "⋡";
  var NotSucceedsTilde = "≿̸";
  var NotSuperset = "⊃⃒";
  var NotSupersetEqual = "⊉";
  var NotTilde = "≁";
  var NotTildeEqual = "≄";
  var NotTildeFullEqual = "≇";
  var NotTildeTilde = "≉";
  var NotVerticalBar = "∤";
  var nparallel = "∦";
  var npar = "∦";
  var nparsl = "⫽⃥";
  var npart = "∂̸";
  var npolint = "⨔";
  var npr = "⊀";
  var nprcue = "⋠";
  var nprec = "⊀";
  var npreceq = "⪯̸";
  var npre = "⪯̸";
  var nrarrc = "⤳̸";
  var nrarr = "↛";
  var nrArr = "⇏";
  var nrarrw = "↝̸";
  var nrightarrow = "↛";
  var nRightarrow = "⇏";
  var nrtri = "⋫";
  var nrtrie = "⋭";
  var nsc = "⊁";
  var nsccue = "⋡";
  var nsce = "⪰̸";
  var Nscr = "𝒩";
  var nscr = "𝓃";
  var nshortmid = "∤";
  var nshortparallel = "∦";
  var nsim = "≁";
  var nsime = "≄";
  var nsimeq = "≄";
  var nsmid = "∤";
  var nspar = "∦";
  var nsqsube = "⋢";
  var nsqsupe = "⋣";
  var nsub = "⊄";
  var nsubE = "⫅̸";
  var nsube = "⊈";
  var nsubset = "⊂⃒";
  var nsubseteq = "⊈";
  var nsubseteqq = "⫅̸";
  var nsucc = "⊁";
  var nsucceq = "⪰̸";
  var nsup = "⊅";
  var nsupE = "⫆̸";
  var nsupe = "⊉";
  var nsupset = "⊃⃒";
  var nsupseteq = "⊉";
  var nsupseteqq = "⫆̸";
  var ntgl = "≹";
  var Ntilde = "Ñ";
  var ntilde = "ñ";
  var ntlg = "≸";
  var ntriangleleft = "⋪";
  var ntrianglelefteq = "⋬";
  var ntriangleright = "⋫";
  var ntrianglerighteq = "⋭";
  var Nu = "Ν";
  var nu = "ν";
  var num = "#";
  var numero = "№";
  var numsp = " ";
  var nvap = "≍⃒";
  var nvdash = "⊬";
  var nvDash = "⊭";
  var nVdash = "⊮";
  var nVDash = "⊯";
  var nvge = "≥⃒";
  var nvgt = ">⃒";
  var nvHarr = "⤄";
  var nvinfin = "⧞";
  var nvlArr = "⤂";
  var nvle = "≤⃒";
  var nvlt = "<⃒";
  var nvltrie = "⊴⃒";
  var nvrArr = "⤃";
  var nvrtrie = "⊵⃒";
  var nvsim = "∼⃒";
  var nwarhk = "⤣";
  var nwarr = "↖";
  var nwArr = "⇖";
  var nwarrow = "↖";
  var nwnear = "⤧";
  var Oacute = "Ó";
  var oacute = "ó";
  var oast = "⊛";
  var Ocirc = "Ô";
  var ocirc = "ô";
  var ocir = "⊚";
  var Ocy = "О";
  var ocy = "о";
  var odash = "⊝";
  var Odblac = "Ő";
  var odblac = "ő";
  var odiv = "⨸";
  var odot = "⊙";
  var odsold = "⦼";
  var OElig = "Œ";
  var oelig = "œ";
  var ofcir = "⦿";
  var Ofr = "𝔒";
  var ofr = "𝔬";
  var ogon = "˛";
  var Ograve = "Ò";
  var ograve = "ò";
  var ogt = "⧁";
  var ohbar = "⦵";
  var ohm = "Ω";
  var oint = "∮";
  var olarr = "↺";
  var olcir = "⦾";
  var olcross = "⦻";
  var oline = "‾";
  var olt = "⧀";
  var Omacr = "Ō";
  var omacr = "ō";
  var Omega = "Ω";
  var omega = "ω";
  var Omicron = "Ο";
  var omicron = "ο";
  var omid = "⦶";
  var ominus = "⊖";
  var Oopf = "𝕆";
  var oopf = "𝕠";
  var opar = "⦷";
  var OpenCurlyDoubleQuote = "“";
  var OpenCurlyQuote = "‘";
  var operp = "⦹";
  var oplus = "⊕";
  var orarr = "↻";
  var Or = "⩔";
  var or = "∨";
  var ord = "⩝";
  var order = "ℴ";
  var orderof = "ℴ";
  var ordf = "ª";
  var ordm = "º";
  var origof = "⊶";
  var oror = "⩖";
  var orslope = "⩗";
  var orv = "⩛";
  var oS = "Ⓢ";
  var Oscr = "𝒪";
  var oscr = "ℴ";
  var Oslash = "Ø";
  var oslash = "ø";
  var osol = "⊘";
  var Otilde = "Õ";
  var otilde = "õ";
  var otimesas = "⨶";
  var Otimes = "⨷";
  var otimes = "⊗";
  var Ouml = "Ö";
  var ouml = "ö";
  var ovbar = "⌽";
  var OverBar = "‾";
  var OverBrace = "⏞";
  var OverBracket = "⎴";
  var OverParenthesis = "⏜";
  var para = "¶";
  var parallel = "∥";
  var par = "∥";
  var parsim = "⫳";
  var parsl = "⫽";
  var part = "∂";
  var PartialD = "∂";
  var Pcy = "П";
  var pcy = "п";
  var percnt = "%";
  var period = ".";
  var permil = "‰";
  var perp = "⊥";
  var pertenk = "‱";
  var Pfr = "𝔓";
  var pfr = "𝔭";
  var Phi = "Φ";
  var phi = "φ";
  var phiv = "ϕ";
  var phmmat = "ℳ";
  var phone = "☎";
  var Pi = "Π";
  var pi = "π";
  var pitchfork = "⋔";
  var piv = "ϖ";
  var planck = "ℏ";
  var planckh = "ℎ";
  var plankv = "ℏ";
  var plusacir = "⨣";
  var plusb = "⊞";
  var pluscir = "⨢";
  var plus = "+";
  var plusdo = "∔";
  var plusdu = "⨥";
  var pluse = "⩲";
  var PlusMinus = "±";
  var plusmn = "±";
  var plussim = "⨦";
  var plustwo = "⨧";
  var pm = "±";
  var Poincareplane = "ℌ";
  var pointint = "⨕";
  var popf = "𝕡";
  var Popf = "ℙ";
  var pound = "£";
  var prap = "⪷";
  var Pr = "⪻";
  var pr = "≺";
  var prcue = "≼";
  var precapprox = "⪷";
  var prec = "≺";
  var preccurlyeq = "≼";
  var Precedes = "≺";
  var PrecedesEqual = "⪯";
  var PrecedesSlantEqual = "≼";
  var PrecedesTilde = "≾";
  var preceq = "⪯";
  var precnapprox = "⪹";
  var precneqq = "⪵";
  var precnsim = "⋨";
  var pre = "⪯";
  var prE = "⪳";
  var precsim = "≾";
  var prime = "′";
  var Prime = "″";
  var primes = "ℙ";
  var prnap = "⪹";
  var prnE = "⪵";
  var prnsim = "⋨";
  var prod = "∏";
  var Product = "∏";
  var profalar = "⌮";
  var profline = "⌒";
  var profsurf = "⌓";
  var prop = "∝";
  var Proportional = "∝";
  var Proportion = "∷";
  var propto = "∝";
  var prsim = "≾";
  var prurel = "⊰";
  var Pscr = "𝒫";
  var pscr = "𝓅";
  var Psi = "Ψ";
  var psi = "ψ";
  var puncsp = " ";
  var Qfr = "𝔔";
  var qfr = "𝔮";
  var qint = "⨌";
  var qopf = "𝕢";
  var Qopf = "ℚ";
  var qprime = "⁗";
  var Qscr = "𝒬";
  var qscr = "𝓆";
  var quaternions = "ℍ";
  var quatint = "⨖";
  var quest = "?";
  var questeq = "≟";
  var quot = "\"";
  var QUOT = "\"";
  var rAarr = "⇛";
  var race = "∽̱";
  var Racute = "Ŕ";
  var racute = "ŕ";
  var radic = "√";
  var raemptyv = "⦳";
  var rang = "⟩";
  var Rang = "⟫";
  var rangd = "⦒";
  var range = "⦥";
  var rangle = "⟩";
  var raquo = "»";
  var rarrap = "⥵";
  var rarrb = "⇥";
  var rarrbfs = "⤠";
  var rarrc = "⤳";
  var rarr = "→";
  var Rarr = "↠";
  var rArr = "⇒";
  var rarrfs = "⤞";
  var rarrhk = "↪";
  var rarrlp = "↬";
  var rarrpl = "⥅";
  var rarrsim = "⥴";
  var Rarrtl = "⤖";
  var rarrtl = "↣";
  var rarrw = "↝";
  var ratail = "⤚";
  var rAtail = "⤜";
  var ratio = "∶";
  var rationals = "ℚ";
  var rbarr = "⤍";
  var rBarr = "⤏";
  var RBarr = "⤐";
  var rbbrk = "❳";
  var rbrace = "}";
  var rbrack = "]";
  var rbrke = "⦌";
  var rbrksld = "⦎";
  var rbrkslu = "⦐";
  var Rcaron = "Ř";
  var rcaron = "ř";
  var Rcedil = "Ŗ";
  var rcedil = "ŗ";
  var rceil = "⌉";
  var rcub = "}";
  var Rcy = "Р";
  var rcy = "р";
  var rdca = "⤷";
  var rdldhar = "⥩";
  var rdquo = "”";
  var rdquor = "”";
  var rdsh = "↳";
  var real = "ℜ";
  var realine = "ℛ";
  var realpart = "ℜ";
  var reals = "ℝ";
  var Re = "ℜ";
  var rect = "▭";
  var reg = "®";
  var REG = "®";
  var ReverseElement = "∋";
  var ReverseEquilibrium = "⇋";
  var ReverseUpEquilibrium = "⥯";
  var rfisht = "⥽";
  var rfloor = "⌋";
  var rfr = "𝔯";
  var Rfr = "ℜ";
  var rHar = "⥤";
  var rhard = "⇁";
  var rharu = "⇀";
  var rharul = "⥬";
  var Rho = "Ρ";
  var rho = "ρ";
  var rhov = "ϱ";
  var RightAngleBracket = "⟩";
  var RightArrowBar = "⇥";
  var rightarrow = "→";
  var RightArrow = "→";
  var Rightarrow = "⇒";
  var RightArrowLeftArrow = "⇄";
  var rightarrowtail = "↣";
  var RightCeiling = "⌉";
  var RightDoubleBracket = "⟧";
  var RightDownTeeVector = "⥝";
  var RightDownVectorBar = "⥕";
  var RightDownVector = "⇂";
  var RightFloor = "⌋";
  var rightharpoondown = "⇁";
  var rightharpoonup = "⇀";
  var rightleftarrows = "⇄";
  var rightleftharpoons = "⇌";
  var rightrightarrows = "⇉";
  var rightsquigarrow = "↝";
  var RightTeeArrow = "↦";
  var RightTee = "⊢";
  var RightTeeVector = "⥛";
  var rightthreetimes = "⋌";
  var RightTriangleBar = "⧐";
  var RightTriangle = "⊳";
  var RightTriangleEqual = "⊵";
  var RightUpDownVector = "⥏";
  var RightUpTeeVector = "⥜";
  var RightUpVectorBar = "⥔";
  var RightUpVector = "↾";
  var RightVectorBar = "⥓";
  var RightVector = "⇀";
  var ring = "˚";
  var risingdotseq = "≓";
  var rlarr = "⇄";
  var rlhar = "⇌";
  var rlm = "‏";
  var rmoustache = "⎱";
  var rmoust = "⎱";
  var rnmid = "⫮";
  var roang = "⟭";
  var roarr = "⇾";
  var robrk = "⟧";
  var ropar = "⦆";
  var ropf = "𝕣";
  var Ropf = "ℝ";
  var roplus = "⨮";
  var rotimes = "⨵";
  var RoundImplies = "⥰";
  var rpar = ")";
  var rpargt = "⦔";
  var rppolint = "⨒";
  var rrarr = "⇉";
  var Rrightarrow = "⇛";
  var rsaquo = "›";
  var rscr = "𝓇";
  var Rscr = "ℛ";
  var rsh = "↱";
  var Rsh = "↱";
  var rsqb = "]";
  var rsquo = "’";
  var rsquor = "’";
  var rthree = "⋌";
  var rtimes = "⋊";
  var rtri = "▹";
  var rtrie = "⊵";
  var rtrif = "▸";
  var rtriltri = "⧎";
  var RuleDelayed = "⧴";
  var ruluhar = "⥨";
  var rx = "℞";
  var Sacute = "Ś";
  var sacute = "ś";
  var sbquo = "‚";
  var scap = "⪸";
  var Scaron = "Š";
  var scaron = "š";
  var Sc = "⪼";
  var sc = "≻";
  var sccue = "≽";
  var sce = "⪰";
  var scE = "⪴";
  var Scedil = "Ş";
  var scedil = "ş";
  var Scirc = "Ŝ";
  var scirc = "ŝ";
  var scnap = "⪺";
  var scnE = "⪶";
  var scnsim = "⋩";
  var scpolint = "⨓";
  var scsim = "≿";
  var Scy = "С";
  var scy = "с";
  var sdotb = "⊡";
  var sdot = "⋅";
  var sdote = "⩦";
  var searhk = "⤥";
  var searr = "↘";
  var seArr = "⇘";
  var searrow = "↘";
  var sect = "§";
  var semi = ";";
  var seswar = "⤩";
  var setminus = "∖";
  var setmn = "∖";
  var sext = "✶";
  var Sfr = "𝔖";
  var sfr = "𝔰";
  var sfrown = "⌢";
  var sharp = "♯";
  var SHCHcy = "Щ";
  var shchcy = "щ";
  var SHcy = "Ш";
  var shcy = "ш";
  var ShortDownArrow = "↓";
  var ShortLeftArrow = "←";
  var shortmid = "∣";
  var shortparallel = "∥";
  var ShortRightArrow = "→";
  var ShortUpArrow = "↑";
  var shy = "­";
  var Sigma = "Σ";
  var sigma = "σ";
  var sigmaf = "ς";
  var sigmav = "ς";
  var sim = "∼";
  var simdot = "⩪";
  var sime = "≃";
  var simeq = "≃";
  var simg = "⪞";
  var simgE = "⪠";
  var siml = "⪝";
  var simlE = "⪟";
  var simne = "≆";
  var simplus = "⨤";
  var simrarr = "⥲";
  var slarr = "←";
  var SmallCircle = "∘";
  var smallsetminus = "∖";
  var smashp = "⨳";
  var smeparsl = "⧤";
  var smid = "∣";
  var smile = "⌣";
  var smt = "⪪";
  var smte = "⪬";
  var smtes = "⪬︀";
  var SOFTcy = "Ь";
  var softcy = "ь";
  var solbar = "⌿";
  var solb = "⧄";
  var sol = "/";
  var Sopf = "𝕊";
  var sopf = "𝕤";
  var spades = "♠";
  var spadesuit = "♠";
  var spar = "∥";
  var sqcap = "⊓";
  var sqcaps = "⊓︀";
  var sqcup = "⊔";
  var sqcups = "⊔︀";
  var Sqrt = "√";
  var sqsub = "⊏";
  var sqsube = "⊑";
  var sqsubset = "⊏";
  var sqsubseteq = "⊑";
  var sqsup = "⊐";
  var sqsupe = "⊒";
  var sqsupset = "⊐";
  var sqsupseteq = "⊒";
  var square = "□";
  var Square = "□";
  var SquareIntersection = "⊓";
  var SquareSubset = "⊏";
  var SquareSubsetEqual = "⊑";
  var SquareSuperset = "⊐";
  var SquareSupersetEqual = "⊒";
  var SquareUnion = "⊔";
  var squarf = "▪";
  var squ = "□";
  var squf = "▪";
  var srarr = "→";
  var Sscr = "𝒮";
  var sscr = "𝓈";
  var ssetmn = "∖";
  var ssmile = "⌣";
  var sstarf = "⋆";
  var Star = "⋆";
  var star = "☆";
  var starf = "★";
  var straightepsilon = "ϵ";
  var straightphi = "ϕ";
  var strns = "¯";
  var sub = "⊂";
  var Sub = "⋐";
  var subdot = "⪽";
  var subE = "⫅";
  var sube = "⊆";
  var subedot = "⫃";
  var submult = "⫁";
  var subnE = "⫋";
  var subne = "⊊";
  var subplus = "⪿";
  var subrarr = "⥹";
  var subset = "⊂";
  var Subset = "⋐";
  var subseteq = "⊆";
  var subseteqq = "⫅";
  var SubsetEqual = "⊆";
  var subsetneq = "⊊";
  var subsetneqq = "⫋";
  var subsim = "⫇";
  var subsub = "⫕";
  var subsup = "⫓";
  var succapprox = "⪸";
  var succ = "≻";
  var succcurlyeq = "≽";
  var Succeeds = "≻";
  var SucceedsEqual = "⪰";
  var SucceedsSlantEqual = "≽";
  var SucceedsTilde = "≿";
  var succeq = "⪰";
  var succnapprox = "⪺";
  var succneqq = "⪶";
  var succnsim = "⋩";
  var succsim = "≿";
  var SuchThat = "∋";
  var sum = "∑";
  var Sum = "∑";
  var sung = "♪";
  var sup1 = "¹";
  var sup2 = "²";
  var sup3 = "³";
  var sup = "⊃";
  var Sup = "⋑";
  var supdot = "⪾";
  var supdsub = "⫘";
  var supE = "⫆";
  var supe = "⊇";
  var supedot = "⫄";
  var Superset = "⊃";
  var SupersetEqual = "⊇";
  var suphsol = "⟉";
  var suphsub = "⫗";
  var suplarr = "⥻";
  var supmult = "⫂";
  var supnE = "⫌";
  var supne = "⊋";
  var supplus = "⫀";
  var supset = "⊃";
  var Supset = "⋑";
  var supseteq = "⊇";
  var supseteqq = "⫆";
  var supsetneq = "⊋";
  var supsetneqq = "⫌";
  var supsim = "⫈";
  var supsub = "⫔";
  var supsup = "⫖";
  var swarhk = "⤦";
  var swarr = "↙";
  var swArr = "⇙";
  var swarrow = "↙";
  var swnwar = "⤪";
  var szlig = "ß";
  var Tab = "\t";
  var target = "⌖";
  var Tau = "Τ";
  var tau = "τ";
  var tbrk = "⎴";
  var Tcaron = "Ť";
  var tcaron = "ť";
  var Tcedil = "Ţ";
  var tcedil = "ţ";
  var Tcy = "Т";
  var tcy = "т";
  var tdot = "⃛";
  var telrec = "⌕";
  var Tfr = "𝔗";
  var tfr = "𝔱";
  var there4 = "∴";
  var therefore = "∴";
  var Therefore = "∴";
  var Theta = "Θ";
  var theta = "θ";
  var thetasym = "ϑ";
  var thetav = "ϑ";
  var thickapprox = "≈";
  var thicksim = "∼";
  var ThickSpace = "  ";
  var ThinSpace = " ";
  var thinsp = " ";
  var thkap = "≈";
  var thksim = "∼";
  var THORN = "Þ";
  var thorn = "þ";
  var tilde = "˜";
  var Tilde = "∼";
  var TildeEqual = "≃";
  var TildeFullEqual = "≅";
  var TildeTilde = "≈";
  var timesbar = "⨱";
  var timesb = "⊠";
  var times = "×";
  var timesd = "⨰";
  var tint = "∭";
  var toea = "⤨";
  var topbot = "⌶";
  var topcir = "⫱";
  var top = "⊤";
  var Topf = "𝕋";
  var topf = "𝕥";
  var topfork = "⫚";
  var tosa = "⤩";
  var tprime = "‴";
  var trade = "™";
  var TRADE = "™";
  var triangle = "▵";
  var triangledown = "▿";
  var triangleleft = "◃";
  var trianglelefteq = "⊴";
  var triangleq = "≜";
  var triangleright = "▹";
  var trianglerighteq = "⊵";
  var tridot = "◬";
  var trie = "≜";
  var triminus = "⨺";
  var TripleDot = "⃛";
  var triplus = "⨹";
  var trisb = "⧍";
  var tritime = "⨻";
  var trpezium = "⏢";
  var Tscr = "𝒯";
  var tscr = "𝓉";
  var TScy = "Ц";
  var tscy = "ц";
  var TSHcy = "Ћ";
  var tshcy = "ћ";
  var Tstrok = "Ŧ";
  var tstrok = "ŧ";
  var twixt = "≬";
  var twoheadleftarrow = "↞";
  var twoheadrightarrow = "↠";
  var Uacute = "Ú";
  var uacute = "ú";
  var uarr = "↑";
  var Uarr = "↟";
  var uArr = "⇑";
  var Uarrocir = "⥉";
  var Ubrcy = "Ў";
  var ubrcy = "ў";
  var Ubreve = "Ŭ";
  var ubreve = "ŭ";
  var Ucirc = "Û";
  var ucirc = "û";
  var Ucy = "У";
  var ucy = "у";
  var udarr = "⇅";
  var Udblac = "Ű";
  var udblac = "ű";
  var udhar = "⥮";
  var ufisht = "⥾";
  var Ufr = "𝔘";
  var ufr = "𝔲";
  var Ugrave = "Ù";
  var ugrave = "ù";
  var uHar = "⥣";
  var uharl = "↿";
  var uharr = "↾";
  var uhblk = "▀";
  var ulcorn = "⌜";
  var ulcorner = "⌜";
  var ulcrop = "⌏";
  var ultri = "◸";
  var Umacr = "Ū";
  var umacr = "ū";
  var uml = "¨";
  var UnderBar = "_";
  var UnderBrace = "⏟";
  var UnderBracket = "⎵";
  var UnderParenthesis = "⏝";
  var Union = "⋃";
  var UnionPlus = "⊎";
  var Uogon = "Ų";
  var uogon = "ų";
  var Uopf = "𝕌";
  var uopf = "𝕦";
  var UpArrowBar = "⤒";
  var uparrow = "↑";
  var UpArrow = "↑";
  var Uparrow = "⇑";
  var UpArrowDownArrow = "⇅";
  var updownarrow = "↕";
  var UpDownArrow = "↕";
  var Updownarrow = "⇕";
  var UpEquilibrium = "⥮";
  var upharpoonleft = "↿";
  var upharpoonright = "↾";
  var uplus = "⊎";
  var UpperLeftArrow = "↖";
  var UpperRightArrow = "↗";
  var upsi = "υ";
  var Upsi = "ϒ";
  var upsih = "ϒ";
  var Upsilon = "Υ";
  var upsilon = "υ";
  var UpTeeArrow = "↥";
  var UpTee = "⊥";
  var upuparrows = "⇈";
  var urcorn = "⌝";
  var urcorner = "⌝";
  var urcrop = "⌎";
  var Uring = "Ů";
  var uring = "ů";
  var urtri = "◹";
  var Uscr = "𝒰";
  var uscr = "𝓊";
  var utdot = "⋰";
  var Utilde = "Ũ";
  var utilde = "ũ";
  var utri = "▵";
  var utrif = "▴";
  var uuarr = "⇈";
  var Uuml = "Ü";
  var uuml = "ü";
  var uwangle = "⦧";
  var vangrt = "⦜";
  var varepsilon = "ϵ";
  var varkappa = "ϰ";
  var varnothing = "∅";
  var varphi = "ϕ";
  var varpi = "ϖ";
  var varpropto = "∝";
  var varr = "↕";
  var vArr = "⇕";
  var varrho = "ϱ";
  var varsigma = "ς";
  var varsubsetneq = "⊊︀";
  var varsubsetneqq = "⫋︀";
  var varsupsetneq = "⊋︀";
  var varsupsetneqq = "⫌︀";
  var vartheta = "ϑ";
  var vartriangleleft = "⊲";
  var vartriangleright = "⊳";
  var vBar = "⫨";
  var Vbar = "⫫";
  var vBarv = "⫩";
  var Vcy = "В";
  var vcy = "в";
  var vdash = "⊢";
  var vDash = "⊨";
  var Vdash = "⊩";
  var VDash = "⊫";
  var Vdashl = "⫦";
  var veebar = "⊻";
  var vee = "∨";
  var Vee = "⋁";
  var veeeq = "≚";
  var vellip = "⋮";
  var verbar = "|";
  var Verbar = "‖";
  var vert = "|";
  var Vert = "‖";
  var VerticalBar = "∣";
  var VerticalLine = "|";
  var VerticalSeparator = "❘";
  var VerticalTilde = "≀";
  var VeryThinSpace = " ";
  var Vfr = "𝔙";
  var vfr = "𝔳";
  var vltri = "⊲";
  var vnsub = "⊂⃒";
  var vnsup = "⊃⃒";
  var Vopf = "𝕍";
  var vopf = "𝕧";
  var vprop = "∝";
  var vrtri = "⊳";
  var Vscr = "𝒱";
  var vscr = "𝓋";
  var vsubnE = "⫋︀";
  var vsubne = "⊊︀";
  var vsupnE = "⫌︀";
  var vsupne = "⊋︀";
  var Vvdash = "⊪";
  var vzigzag = "⦚";
  var Wcirc = "Ŵ";
  var wcirc = "ŵ";
  var wedbar = "⩟";
  var wedge = "∧";
  var Wedge = "⋀";
  var wedgeq = "≙";
  var weierp = "℘";
  var Wfr = "𝔚";
  var wfr = "𝔴";
  var Wopf = "𝕎";
  var wopf = "𝕨";
  var wp = "℘";
  var wr = "≀";
  var wreath = "≀";
  var Wscr = "𝒲";
  var wscr = "𝓌";
  var xcap = "⋂";
  var xcirc = "◯";
  var xcup = "⋃";
  var xdtri = "▽";
  var Xfr = "𝔛";
  var xfr = "𝔵";
  var xharr = "⟷";
  var xhArr = "⟺";
  var Xi = "Ξ";
  var xi = "ξ";
  var xlarr = "⟵";
  var xlArr = "⟸";
  var xmap = "⟼";
  var xnis = "⋻";
  var xodot = "⨀";
  var Xopf = "𝕏";
  var xopf = "𝕩";
  var xoplus = "⨁";
  var xotime = "⨂";
  var xrarr = "⟶";
  var xrArr = "⟹";
  var Xscr = "𝒳";
  var xscr = "𝓍";
  var xsqcup = "⨆";
  var xuplus = "⨄";
  var xutri = "△";
  var xvee = "⋁";
  var xwedge = "⋀";
  var Yacute = "Ý";
  var yacute = "ý";
  var YAcy = "Я";
  var yacy = "я";
  var Ycirc = "Ŷ";
  var ycirc = "ŷ";
  var Ycy = "Ы";
  var ycy = "ы";
  var yen = "¥";
  var Yfr = "𝔜";
  var yfr = "𝔶";
  var YIcy = "Ї";
  var yicy = "ї";
  var Yopf = "𝕐";
  var yopf = "𝕪";
  var Yscr = "𝒴";
  var yscr = "𝓎";
  var YUcy = "Ю";
  var yucy = "ю";
  var yuml = "ÿ";
  var Yuml = "Ÿ";
  var Zacute = "Ź";
  var zacute = "ź";
  var Zcaron = "Ž";
  var zcaron = "ž";
  var Zcy = "З";
  var zcy = "з";
  var Zdot = "Ż";
  var zdot = "ż";
  var zeetrf = "ℨ";
  var ZeroWidthSpace = "​";
  var Zeta = "Ζ";
  var zeta = "ζ";
  var zfr = "𝔷";
  var Zfr = "ℨ";
  var ZHcy = "Ж";
  var zhcy = "ж";
  var zigrarr = "⇝";
  var zopf = "𝕫";
  var Zopf = "ℤ";
  var Zscr = "𝒵";
  var zscr = "𝓏";
  var zwj = "‍";
  var zwnj = "‌";
  var entities = {
    Aacute: Aacute,
    aacute: aacute,
    Abreve: Abreve,
    abreve: abreve,
    ac: ac,
    acd: acd,
    acE: acE,
    Acirc: Acirc,
    acirc: acirc,
    acute: acute,
    Acy: Acy,
    acy: acy,
    AElig: AElig,
    aelig: aelig,
    af: af,
    Afr: Afr,
    afr: afr,
    Agrave: Agrave,
    agrave: agrave,
    alefsym: alefsym,
    aleph: aleph,
    Alpha: Alpha,
    alpha: alpha,
    Amacr: Amacr,
    amacr: amacr,
    amalg: amalg,
    amp: amp,
    AMP: AMP,
    andand: andand,
    And: And,
    and: and,
    andd: andd,
    andslope: andslope,
    andv: andv,
    ang: ang,
    ange: ange,
    angle: angle,
    angmsdaa: angmsdaa,
    angmsdab: angmsdab,
    angmsdac: angmsdac,
    angmsdad: angmsdad,
    angmsdae: angmsdae,
    angmsdaf: angmsdaf,
    angmsdag: angmsdag,
    angmsdah: angmsdah,
    angmsd: angmsd,
    angrt: angrt,
    angrtvb: angrtvb,
    angrtvbd: angrtvbd,
    angsph: angsph,
    angst: angst,
    angzarr: angzarr,
    Aogon: Aogon,
    aogon: aogon,
    Aopf: Aopf,
    aopf: aopf,
    apacir: apacir,
    ap: ap,
    apE: apE,
    ape: ape,
    apid: apid,
    apos: apos,
    ApplyFunction: ApplyFunction,
    approx: approx,
    approxeq: approxeq,
    Aring: Aring,
    aring: aring,
    Ascr: Ascr,
    ascr: ascr,
    Assign: Assign,
    ast: ast,
    asymp: asymp,
    asympeq: asympeq,
    Atilde: Atilde,
    atilde: atilde,
    Auml: Auml,
    auml: auml,
    awconint: awconint,
    awint: awint,
    backcong: backcong,
    backepsilon: backepsilon,
    backprime: backprime,
    backsim: backsim,
    backsimeq: backsimeq,
    Backslash: Backslash,
    Barv: Barv,
    barvee: barvee,
    barwed: barwed,
    Barwed: Barwed,
    barwedge: barwedge,
    bbrk: bbrk,
    bbrktbrk: bbrktbrk,
    bcong: bcong,
    Bcy: Bcy,
    bcy: bcy,
    bdquo: bdquo,
    becaus: becaus,
    because: because,
    Because: Because,
    bemptyv: bemptyv,
    bepsi: bepsi,
    bernou: bernou,
    Bernoullis: Bernoullis,
    Beta: Beta,
    beta: beta,
    beth: beth,
    between: between,
    Bfr: Bfr,
    bfr: bfr,
    bigcap: bigcap,
    bigcirc: bigcirc,
    bigcup: bigcup,
    bigodot: bigodot,
    bigoplus: bigoplus,
    bigotimes: bigotimes,
    bigsqcup: bigsqcup,
    bigstar: bigstar,
    bigtriangledown: bigtriangledown,
    bigtriangleup: bigtriangleup,
    biguplus: biguplus,
    bigvee: bigvee,
    bigwedge: bigwedge,
    bkarow: bkarow,
    blacklozenge: blacklozenge,
    blacksquare: blacksquare,
    blacktriangle: blacktriangle,
    blacktriangledown: blacktriangledown,
    blacktriangleleft: blacktriangleleft,
    blacktriangleright: blacktriangleright,
    blank: blank,
    blk12: blk12,
    blk14: blk14,
    blk34: blk34,
    block: block,
    bne: bne,
    bnequiv: bnequiv,
    bNot: bNot,
    bnot: bnot,
    Bopf: Bopf,
    bopf: bopf,
    bot: bot,
    bottom: bottom,
    bowtie: bowtie,
    boxbox: boxbox,
    boxdl: boxdl,
    boxdL: boxdL,
    boxDl: boxDl,
    boxDL: boxDL,
    boxdr: boxdr,
    boxdR: boxdR,
    boxDr: boxDr,
    boxDR: boxDR,
    boxh: boxh,
    boxH: boxH,
    boxhd: boxhd,
    boxHd: boxHd,
    boxhD: boxhD,
    boxHD: boxHD,
    boxhu: boxhu,
    boxHu: boxHu,
    boxhU: boxhU,
    boxHU: boxHU,
    boxminus: boxminus,
    boxplus: boxplus,
    boxtimes: boxtimes,
    boxul: boxul,
    boxuL: boxuL,
    boxUl: boxUl,
    boxUL: boxUL,
    boxur: boxur,
    boxuR: boxuR,
    boxUr: boxUr,
    boxUR: boxUR,
    boxv: boxv,
    boxV: boxV,
    boxvh: boxvh,
    boxvH: boxvH,
    boxVh: boxVh,
    boxVH: boxVH,
    boxvl: boxvl,
    boxvL: boxvL,
    boxVl: boxVl,
    boxVL: boxVL,
    boxvr: boxvr,
    boxvR: boxvR,
    boxVr: boxVr,
    boxVR: boxVR,
    bprime: bprime,
    breve: breve,
    Breve: Breve,
    brvbar: brvbar,
    bscr: bscr,
    Bscr: Bscr,
    bsemi: bsemi,
    bsim: bsim,
    bsime: bsime,
    bsolb: bsolb,
    bsol: bsol,
    bsolhsub: bsolhsub,
    bull: bull,
    bullet: bullet,
    bump: bump,
    bumpE: bumpE,
    bumpe: bumpe,
    Bumpeq: Bumpeq,
    bumpeq: bumpeq,
    Cacute: Cacute,
    cacute: cacute,
    capand: capand,
    capbrcup: capbrcup,
    capcap: capcap,
    cap: cap,
    Cap: Cap,
    capcup: capcup,
    capdot: capdot,
    CapitalDifferentialD: CapitalDifferentialD,
    caps: caps,
    caret: caret,
    caron: caron,
    Cayleys: Cayleys,
    ccaps: ccaps,
    Ccaron: Ccaron,
    ccaron: ccaron,
    Ccedil: Ccedil,
    ccedil: ccedil,
    Ccirc: Ccirc,
    ccirc: ccirc,
    Cconint: Cconint,
    ccups: ccups,
    ccupssm: ccupssm,
    Cdot: Cdot,
    cdot: cdot,
    cedil: cedil,
    Cedilla: Cedilla,
    cemptyv: cemptyv,
    cent: cent,
    centerdot: centerdot,
    CenterDot: CenterDot,
    cfr: cfr,
    Cfr: Cfr,
    CHcy: CHcy,
    chcy: chcy,
    check: check,
    checkmark: checkmark,
    Chi: Chi,
    chi: chi,
    circ: circ,
    circeq: circeq,
    circlearrowleft: circlearrowleft,
    circlearrowright: circlearrowright,
    circledast: circledast,
    circledcirc: circledcirc,
    circleddash: circleddash,
    CircleDot: CircleDot,
    circledR: circledR,
    circledS: circledS,
    CircleMinus: CircleMinus,
    CirclePlus: CirclePlus,
    CircleTimes: CircleTimes,
    cir: cir,
    cirE: cirE,
    cire: cire,
    cirfnint: cirfnint,
    cirmid: cirmid,
    cirscir: cirscir,
    ClockwiseContourIntegral: ClockwiseContourIntegral,
    CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
    CloseCurlyQuote: CloseCurlyQuote,
    clubs: clubs,
    clubsuit: clubsuit,
    colon: colon,
    Colon: Colon,
    Colone: Colone,
    colone: colone,
    coloneq: coloneq,
    comma: comma,
    commat: commat,
    comp: comp,
    compfn: compfn,
    complement: complement,
    complexes: complexes,
    cong: cong,
    congdot: congdot,
    Congruent: Congruent,
    conint: conint,
    Conint: Conint,
    ContourIntegral: ContourIntegral,
    copf: copf,
    Copf: Copf,
    coprod: coprod,
    Coproduct: Coproduct,
    copy: copy,
    COPY: COPY,
    copysr: copysr,
    CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
    crarr: crarr,
    cross: cross,
    Cross: Cross,
    Cscr: Cscr,
    cscr: cscr,
    csub: csub,
    csube: csube,
    csup: csup,
    csupe: csupe,
    ctdot: ctdot,
    cudarrl: cudarrl,
    cudarrr: cudarrr,
    cuepr: cuepr,
    cuesc: cuesc,
    cularr: cularr,
    cularrp: cularrp,
    cupbrcap: cupbrcap,
    cupcap: cupcap,
    CupCap: CupCap,
    cup: cup,
    Cup: Cup,
    cupcup: cupcup,
    cupdot: cupdot,
    cupor: cupor,
    cups: cups,
    curarr: curarr,
    curarrm: curarrm,
    curlyeqprec: curlyeqprec,
    curlyeqsucc: curlyeqsucc,
    curlyvee: curlyvee,
    curlywedge: curlywedge,
    curren: curren,
    curvearrowleft: curvearrowleft,
    curvearrowright: curvearrowright,
    cuvee: cuvee,
    cuwed: cuwed,
    cwconint: cwconint,
    cwint: cwint,
    cylcty: cylcty,
    dagger: dagger,
    Dagger: Dagger,
    daleth: daleth,
    darr: darr,
    Darr: Darr,
    dArr: dArr,
    dash: dash,
    Dashv: Dashv,
    dashv: dashv,
    dbkarow: dbkarow,
    dblac: dblac,
    Dcaron: Dcaron,
    dcaron: dcaron,
    Dcy: Dcy,
    dcy: dcy,
    ddagger: ddagger,
    ddarr: ddarr,
    DD: DD,
    dd: dd,
    DDotrahd: DDotrahd,
    ddotseq: ddotseq,
    deg: deg,
    Del: Del,
    Delta: Delta,
    delta: delta,
    demptyv: demptyv,
    dfisht: dfisht,
    Dfr: Dfr,
    dfr: dfr,
    dHar: dHar,
    dharl: dharl,
    dharr: dharr,
    DiacriticalAcute: DiacriticalAcute,
    DiacriticalDot: DiacriticalDot,
    DiacriticalDoubleAcute: DiacriticalDoubleAcute,
    DiacriticalGrave: DiacriticalGrave,
    DiacriticalTilde: DiacriticalTilde,
    diam: diam,
    diamond: diamond,
    Diamond: Diamond,
    diamondsuit: diamondsuit,
    diams: diams,
    die: die,
    DifferentialD: DifferentialD,
    digamma: digamma,
    disin: disin,
    div: div,
    divide: divide,
    divideontimes: divideontimes,
    divonx: divonx,
    DJcy: DJcy,
    djcy: djcy,
    dlcorn: dlcorn,
    dlcrop: dlcrop,
    dollar: dollar,
    Dopf: Dopf,
    dopf: dopf,
    Dot: Dot,
    dot: dot,
    DotDot: DotDot,
    doteq: doteq,
    doteqdot: doteqdot,
    DotEqual: DotEqual,
    dotminus: dotminus,
    dotplus: dotplus,
    dotsquare: dotsquare,
    doublebarwedge: doublebarwedge,
    DoubleContourIntegral: DoubleContourIntegral,
    DoubleDot: DoubleDot,
    DoubleDownArrow: DoubleDownArrow,
    DoubleLeftArrow: DoubleLeftArrow,
    DoubleLeftRightArrow: DoubleLeftRightArrow,
    DoubleLeftTee: DoubleLeftTee,
    DoubleLongLeftArrow: DoubleLongLeftArrow,
    DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
    DoubleLongRightArrow: DoubleLongRightArrow,
    DoubleRightArrow: DoubleRightArrow,
    DoubleRightTee: DoubleRightTee,
    DoubleUpArrow: DoubleUpArrow,
    DoubleUpDownArrow: DoubleUpDownArrow,
    DoubleVerticalBar: DoubleVerticalBar,
    DownArrowBar: DownArrowBar,
    downarrow: downarrow,
    DownArrow: DownArrow,
    Downarrow: Downarrow,
    DownArrowUpArrow: DownArrowUpArrow,
    DownBreve: DownBreve,
    downdownarrows: downdownarrows,
    downharpoonleft: downharpoonleft,
    downharpoonright: downharpoonright,
    DownLeftRightVector: DownLeftRightVector,
    DownLeftTeeVector: DownLeftTeeVector,
    DownLeftVectorBar: DownLeftVectorBar,
    DownLeftVector: DownLeftVector,
    DownRightTeeVector: DownRightTeeVector,
    DownRightVectorBar: DownRightVectorBar,
    DownRightVector: DownRightVector,
    DownTeeArrow: DownTeeArrow,
    DownTee: DownTee,
    drbkarow: drbkarow,
    drcorn: drcorn,
    drcrop: drcrop,
    Dscr: Dscr,
    dscr: dscr,
    DScy: DScy,
    dscy: dscy,
    dsol: dsol,
    Dstrok: Dstrok,
    dstrok: dstrok,
    dtdot: dtdot,
    dtri: dtri,
    dtrif: dtrif,
    duarr: duarr,
    duhar: duhar,
    dwangle: dwangle,
    DZcy: DZcy,
    dzcy: dzcy,
    dzigrarr: dzigrarr,
    Eacute: Eacute,
    eacute: eacute,
    easter: easter,
    Ecaron: Ecaron,
    ecaron: ecaron,
    Ecirc: Ecirc,
    ecirc: ecirc,
    ecir: ecir,
    ecolon: ecolon,
    Ecy: Ecy,
    ecy: ecy,
    eDDot: eDDot,
    Edot: Edot,
    edot: edot,
    eDot: eDot,
    ee: ee,
    efDot: efDot,
    Efr: Efr,
    efr: efr,
    eg: eg,
    Egrave: Egrave,
    egrave: egrave,
    egs: egs,
    egsdot: egsdot,
    el: el,
    Element: Element,
    elinters: elinters,
    ell: ell,
    els: els,
    elsdot: elsdot,
    Emacr: Emacr,
    emacr: emacr,
    empty: empty,
    emptyset: emptyset,
    EmptySmallSquare: EmptySmallSquare,
    emptyv: emptyv,
    EmptyVerySmallSquare: EmptyVerySmallSquare,
    emsp13: emsp13,
    emsp14: emsp14,
    emsp: emsp,
    ENG: ENG,
    eng: eng,
    ensp: ensp,
    Eogon: Eogon,
    eogon: eogon,
    Eopf: Eopf,
    eopf: eopf,
    epar: epar,
    eparsl: eparsl,
    eplus: eplus,
    epsi: epsi,
    Epsilon: Epsilon,
    epsilon: epsilon,
    epsiv: epsiv,
    eqcirc: eqcirc,
    eqcolon: eqcolon,
    eqsim: eqsim,
    eqslantgtr: eqslantgtr,
    eqslantless: eqslantless,
    Equal: Equal,
    equals: equals,
    EqualTilde: EqualTilde,
    equest: equest,
    Equilibrium: Equilibrium,
    equiv: equiv,
    equivDD: equivDD,
    eqvparsl: eqvparsl,
    erarr: erarr,
    erDot: erDot,
    escr: escr,
    Escr: Escr,
    esdot: esdot,
    Esim: Esim,
    esim: esim,
    Eta: Eta,
    eta: eta,
    ETH: ETH,
    eth: eth,
    Euml: Euml,
    euml: euml,
    euro: euro,
    excl: excl,
    exist: exist,
    Exists: Exists,
    expectation: expectation,
    exponentiale: exponentiale,
    ExponentialE: ExponentialE,
    fallingdotseq: fallingdotseq,
    Fcy: Fcy,
    fcy: fcy,
    female: female,
    ffilig: ffilig,
    fflig: fflig,
    ffllig: ffllig,
    Ffr: Ffr,
    ffr: ffr,
    filig: filig,
    FilledSmallSquare: FilledSmallSquare,
    FilledVerySmallSquare: FilledVerySmallSquare,
    fjlig: fjlig,
    flat: flat,
    fllig: fllig,
    fltns: fltns,
    fnof: fnof,
    Fopf: Fopf,
    fopf: fopf,
    forall: forall,
    ForAll: ForAll,
    fork: fork,
    forkv: forkv,
    Fouriertrf: Fouriertrf,
    fpartint: fpartint,
    frac12: frac12,
    frac13: frac13,
    frac14: frac14,
    frac15: frac15,
    frac16: frac16,
    frac18: frac18,
    frac23: frac23,
    frac25: frac25,
    frac34: frac34,
    frac35: frac35,
    frac38: frac38,
    frac45: frac45,
    frac56: frac56,
    frac58: frac58,
    frac78: frac78,
    frasl: frasl,
    frown: frown,
    fscr: fscr,
    Fscr: Fscr,
    gacute: gacute,
    Gamma: Gamma,
    gamma: gamma,
    Gammad: Gammad,
    gammad: gammad,
    gap: gap,
    Gbreve: Gbreve,
    gbreve: gbreve,
    Gcedil: Gcedil,
    Gcirc: Gcirc,
    gcirc: gcirc,
    Gcy: Gcy,
    gcy: gcy,
    Gdot: Gdot,
    gdot: gdot,
    ge: ge,
    gE: gE,
    gEl: gEl,
    gel: gel,
    geq: geq,
    geqq: geqq,
    geqslant: geqslant,
    gescc: gescc,
    ges: ges,
    gesdot: gesdot,
    gesdoto: gesdoto,
    gesdotol: gesdotol,
    gesl: gesl,
    gesles: gesles,
    Gfr: Gfr,
    gfr: gfr,
    gg: gg,
    Gg: Gg,
    ggg: ggg,
    gimel: gimel,
    GJcy: GJcy,
    gjcy: gjcy,
    gla: gla,
    gl: gl,
    glE: glE,
    glj: glj,
    gnap: gnap,
    gnapprox: gnapprox,
    gne: gne,
    gnE: gnE,
    gneq: gneq,
    gneqq: gneqq,
    gnsim: gnsim,
    Gopf: Gopf,
    gopf: gopf,
    grave: grave,
    GreaterEqual: GreaterEqual,
    GreaterEqualLess: GreaterEqualLess,
    GreaterFullEqual: GreaterFullEqual,
    GreaterGreater: GreaterGreater,
    GreaterLess: GreaterLess,
    GreaterSlantEqual: GreaterSlantEqual,
    GreaterTilde: GreaterTilde,
    Gscr: Gscr,
    gscr: gscr,
    gsim: gsim,
    gsime: gsime,
    gsiml: gsiml,
    gtcc: gtcc,
    gtcir: gtcir,
    gt: gt,
    GT: GT,
    Gt: Gt,
    gtdot: gtdot,
    gtlPar: gtlPar,
    gtquest: gtquest,
    gtrapprox: gtrapprox,
    gtrarr: gtrarr,
    gtrdot: gtrdot,
    gtreqless: gtreqless,
    gtreqqless: gtreqqless,
    gtrless: gtrless,
    gtrsim: gtrsim,
    gvertneqq: gvertneqq,
    gvnE: gvnE,
    Hacek: Hacek,
    hairsp: hairsp,
    half: half,
    hamilt: hamilt,
    HARDcy: HARDcy,
    hardcy: hardcy,
    harrcir: harrcir,
    harr: harr,
    hArr: hArr,
    harrw: harrw,
    Hat: Hat,
    hbar: hbar,
    Hcirc: Hcirc,
    hcirc: hcirc,
    hearts: hearts,
    heartsuit: heartsuit,
    hellip: hellip,
    hercon: hercon,
    hfr: hfr,
    Hfr: Hfr,
    HilbertSpace: HilbertSpace,
    hksearow: hksearow,
    hkswarow: hkswarow,
    hoarr: hoarr,
    homtht: homtht,
    hookleftarrow: hookleftarrow,
    hookrightarrow: hookrightarrow,
    hopf: hopf,
    Hopf: Hopf,
    horbar: horbar,
    HorizontalLine: HorizontalLine,
    hscr: hscr,
    Hscr: Hscr,
    hslash: hslash,
    Hstrok: Hstrok,
    hstrok: hstrok,
    HumpDownHump: HumpDownHump,
    HumpEqual: HumpEqual,
    hybull: hybull,
    hyphen: hyphen,
    Iacute: Iacute,
    iacute: iacute,
    ic: ic,
    Icirc: Icirc,
    icirc: icirc,
    Icy: Icy,
    icy: icy,
    Idot: Idot,
    IEcy: IEcy,
    iecy: iecy,
    iexcl: iexcl,
    iff: iff,
    ifr: ifr,
    Ifr: Ifr,
    Igrave: Igrave,
    igrave: igrave,
    ii: ii,
    iiiint: iiiint,
    iiint: iiint,
    iinfin: iinfin,
    iiota: iiota,
    IJlig: IJlig,
    ijlig: ijlig,
    Imacr: Imacr,
    imacr: imacr,
    image: image,
    ImaginaryI: ImaginaryI,
    imagline: imagline,
    imagpart: imagpart,
    imath: imath,
    Im: Im,
    imof: imof,
    imped: imped,
    Implies: Implies,
    incare: incare,
    "in": "∈",
    infin: infin,
    infintie: infintie,
    inodot: inodot,
    intcal: intcal,
    int: int,
    Int: Int,
    integers: integers,
    Integral: Integral,
    intercal: intercal,
    Intersection: Intersection,
    intlarhk: intlarhk,
    intprod: intprod,
    InvisibleComma: InvisibleComma,
    InvisibleTimes: InvisibleTimes,
    IOcy: IOcy,
    iocy: iocy,
    Iogon: Iogon,
    iogon: iogon,
    Iopf: Iopf,
    iopf: iopf,
    Iota: Iota,
    iota: iota,
    iprod: iprod,
    iquest: iquest,
    iscr: iscr,
    Iscr: Iscr,
    isin: isin,
    isindot: isindot,
    isinE: isinE,
    isins: isins,
    isinsv: isinsv,
    isinv: isinv,
    it: it,
    Itilde: Itilde,
    itilde: itilde,
    Iukcy: Iukcy,
    iukcy: iukcy,
    Iuml: Iuml,
    iuml: iuml,
    Jcirc: Jcirc,
    jcirc: jcirc,
    Jcy: Jcy,
    jcy: jcy,
    Jfr: Jfr,
    jfr: jfr,
    jmath: jmath,
    Jopf: Jopf,
    jopf: jopf,
    Jscr: Jscr,
    jscr: jscr,
    Jsercy: Jsercy,
    jsercy: jsercy,
    Jukcy: Jukcy,
    jukcy: jukcy,
    Kappa: Kappa,
    kappa: kappa,
    kappav: kappav,
    Kcedil: Kcedil,
    kcedil: kcedil,
    Kcy: Kcy,
    kcy: kcy,
    Kfr: Kfr,
    kfr: kfr,
    kgreen: kgreen,
    KHcy: KHcy,
    khcy: khcy,
    KJcy: KJcy,
    kjcy: kjcy,
    Kopf: Kopf,
    kopf: kopf,
    Kscr: Kscr,
    kscr: kscr,
    lAarr: lAarr,
    Lacute: Lacute,
    lacute: lacute,
    laemptyv: laemptyv,
    lagran: lagran,
    Lambda: Lambda,
    lambda: lambda,
    lang: lang,
    Lang: Lang,
    langd: langd,
    langle: langle,
    lap: lap,
    Laplacetrf: Laplacetrf,
    laquo: laquo,
    larrb: larrb,
    larrbfs: larrbfs,
    larr: larr,
    Larr: Larr,
    lArr: lArr,
    larrfs: larrfs,
    larrhk: larrhk,
    larrlp: larrlp,
    larrpl: larrpl,
    larrsim: larrsim,
    larrtl: larrtl,
    latail: latail,
    lAtail: lAtail,
    lat: lat,
    late: late,
    lates: lates,
    lbarr: lbarr,
    lBarr: lBarr,
    lbbrk: lbbrk,
    lbrace: lbrace,
    lbrack: lbrack,
    lbrke: lbrke,
    lbrksld: lbrksld,
    lbrkslu: lbrkslu,
    Lcaron: Lcaron,
    lcaron: lcaron,
    Lcedil: Lcedil,
    lcedil: lcedil,
    lceil: lceil,
    lcub: lcub,
    Lcy: Lcy,
    lcy: lcy,
    ldca: ldca,
    ldquo: ldquo,
    ldquor: ldquor,
    ldrdhar: ldrdhar,
    ldrushar: ldrushar,
    ldsh: ldsh,
    le: le,
    lE: lE,
    LeftAngleBracket: LeftAngleBracket,
    LeftArrowBar: LeftArrowBar,
    leftarrow: leftarrow,
    LeftArrow: LeftArrow,
    Leftarrow: Leftarrow,
    LeftArrowRightArrow: LeftArrowRightArrow,
    leftarrowtail: leftarrowtail,
    LeftCeiling: LeftCeiling,
    LeftDoubleBracket: LeftDoubleBracket,
    LeftDownTeeVector: LeftDownTeeVector,
    LeftDownVectorBar: LeftDownVectorBar,
    LeftDownVector: LeftDownVector,
    LeftFloor: LeftFloor,
    leftharpoondown: leftharpoondown,
    leftharpoonup: leftharpoonup,
    leftleftarrows: leftleftarrows,
    leftrightarrow: leftrightarrow,
    LeftRightArrow: LeftRightArrow,
    Leftrightarrow: Leftrightarrow,
    leftrightarrows: leftrightarrows,
    leftrightharpoons: leftrightharpoons,
    leftrightsquigarrow: leftrightsquigarrow,
    LeftRightVector: LeftRightVector,
    LeftTeeArrow: LeftTeeArrow,
    LeftTee: LeftTee,
    LeftTeeVector: LeftTeeVector,
    leftthreetimes: leftthreetimes,
    LeftTriangleBar: LeftTriangleBar,
    LeftTriangle: LeftTriangle,
    LeftTriangleEqual: LeftTriangleEqual,
    LeftUpDownVector: LeftUpDownVector,
    LeftUpTeeVector: LeftUpTeeVector,
    LeftUpVectorBar: LeftUpVectorBar,
    LeftUpVector: LeftUpVector,
    LeftVectorBar: LeftVectorBar,
    LeftVector: LeftVector,
    lEg: lEg,
    leg: leg,
    leq: leq,
    leqq: leqq,
    leqslant: leqslant,
    lescc: lescc,
    les: les,
    lesdot: lesdot,
    lesdoto: lesdoto,
    lesdotor: lesdotor,
    lesg: lesg,
    lesges: lesges,
    lessapprox: lessapprox,
    lessdot: lessdot,
    lesseqgtr: lesseqgtr,
    lesseqqgtr: lesseqqgtr,
    LessEqualGreater: LessEqualGreater,
    LessFullEqual: LessFullEqual,
    LessGreater: LessGreater,
    lessgtr: lessgtr,
    LessLess: LessLess,
    lesssim: lesssim,
    LessSlantEqual: LessSlantEqual,
    LessTilde: LessTilde,
    lfisht: lfisht,
    lfloor: lfloor,
    Lfr: Lfr,
    lfr: lfr,
    lg: lg,
    lgE: lgE,
    lHar: lHar,
    lhard: lhard,
    lharu: lharu,
    lharul: lharul,
    lhblk: lhblk,
    LJcy: LJcy,
    ljcy: ljcy,
    llarr: llarr,
    ll: ll,
    Ll: Ll,
    llcorner: llcorner,
    Lleftarrow: Lleftarrow,
    llhard: llhard,
    lltri: lltri,
    Lmidot: Lmidot,
    lmidot: lmidot,
    lmoustache: lmoustache,
    lmoust: lmoust,
    lnap: lnap,
    lnapprox: lnapprox,
    lne: lne,
    lnE: lnE,
    lneq: lneq,
    lneqq: lneqq,
    lnsim: lnsim,
    loang: loang,
    loarr: loarr,
    lobrk: lobrk,
    longleftarrow: longleftarrow,
    LongLeftArrow: LongLeftArrow,
    Longleftarrow: Longleftarrow,
    longleftrightarrow: longleftrightarrow,
    LongLeftRightArrow: LongLeftRightArrow,
    Longleftrightarrow: Longleftrightarrow,
    longmapsto: longmapsto,
    longrightarrow: longrightarrow,
    LongRightArrow: LongRightArrow,
    Longrightarrow: Longrightarrow,
    looparrowleft: looparrowleft,
    looparrowright: looparrowright,
    lopar: lopar,
    Lopf: Lopf,
    lopf: lopf,
    loplus: loplus,
    lotimes: lotimes,
    lowast: lowast,
    lowbar: lowbar,
    LowerLeftArrow: LowerLeftArrow,
    LowerRightArrow: LowerRightArrow,
    loz: loz,
    lozenge: lozenge,
    lozf: lozf,
    lpar: lpar,
    lparlt: lparlt,
    lrarr: lrarr,
    lrcorner: lrcorner,
    lrhar: lrhar,
    lrhard: lrhard,
    lrm: lrm,
    lrtri: lrtri,
    lsaquo: lsaquo,
    lscr: lscr,
    Lscr: Lscr,
    lsh: lsh,
    Lsh: Lsh,
    lsim: lsim,
    lsime: lsime,
    lsimg: lsimg,
    lsqb: lsqb,
    lsquo: lsquo,
    lsquor: lsquor,
    Lstrok: Lstrok,
    lstrok: lstrok,
    ltcc: ltcc,
    ltcir: ltcir,
    lt: lt,
    LT: LT,
    Lt: Lt,
    ltdot: ltdot,
    lthree: lthree,
    ltimes: ltimes,
    ltlarr: ltlarr,
    ltquest: ltquest,
    ltri: ltri,
    ltrie: ltrie,
    ltrif: ltrif,
    ltrPar: ltrPar,
    lurdshar: lurdshar,
    luruhar: luruhar,
    lvertneqq: lvertneqq,
    lvnE: lvnE,
    macr: macr,
    male: male,
    malt: malt,
    maltese: maltese,
    "Map": "⤅",
    map: map,
    mapsto: mapsto,
    mapstodown: mapstodown,
    mapstoleft: mapstoleft,
    mapstoup: mapstoup,
    marker: marker,
    mcomma: mcomma,
    Mcy: Mcy,
    mcy: mcy,
    mdash: mdash,
    mDDot: mDDot,
    measuredangle: measuredangle,
    MediumSpace: MediumSpace,
    Mellintrf: Mellintrf,
    Mfr: Mfr,
    mfr: mfr,
    mho: mho,
    micro: micro,
    midast: midast,
    midcir: midcir,
    mid: mid,
    middot: middot,
    minusb: minusb,
    minus: minus,
    minusd: minusd,
    minusdu: minusdu,
    MinusPlus: MinusPlus,
    mlcp: mlcp,
    mldr: mldr,
    mnplus: mnplus,
    models: models,
    Mopf: Mopf,
    mopf: mopf,
    mp: mp,
    mscr: mscr,
    Mscr: Mscr,
    mstpos: mstpos,
    Mu: Mu,
    mu: mu,
    multimap: multimap,
    mumap: mumap,
    nabla: nabla,
    Nacute: Nacute,
    nacute: nacute,
    nang: nang,
    nap: nap,
    napE: napE,
    napid: napid,
    napos: napos,
    napprox: napprox,
    natural: natural,
    naturals: naturals,
    natur: natur,
    nbsp: nbsp,
    nbump: nbump,
    nbumpe: nbumpe,
    ncap: ncap,
    Ncaron: Ncaron,
    ncaron: ncaron,
    Ncedil: Ncedil,
    ncedil: ncedil,
    ncong: ncong,
    ncongdot: ncongdot,
    ncup: ncup,
    Ncy: Ncy,
    ncy: ncy,
    ndash: ndash,
    nearhk: nearhk,
    nearr: nearr,
    neArr: neArr,
    nearrow: nearrow,
    ne: ne,
    nedot: nedot,
    NegativeMediumSpace: NegativeMediumSpace,
    NegativeThickSpace: NegativeThickSpace,
    NegativeThinSpace: NegativeThinSpace,
    NegativeVeryThinSpace: NegativeVeryThinSpace,
    nequiv: nequiv,
    nesear: nesear,
    nesim: nesim,
    NestedGreaterGreater: NestedGreaterGreater,
    NestedLessLess: NestedLessLess,
    NewLine: NewLine,
    nexist: nexist,
    nexists: nexists,
    Nfr: Nfr,
    nfr: nfr,
    ngE: ngE,
    nge: nge,
    ngeq: ngeq,
    ngeqq: ngeqq,
    ngeqslant: ngeqslant,
    nges: nges,
    nGg: nGg,
    ngsim: ngsim,
    nGt: nGt,
    ngt: ngt,
    ngtr: ngtr,
    nGtv: nGtv,
    nharr: nharr,
    nhArr: nhArr,
    nhpar: nhpar,
    ni: ni,
    nis: nis,
    nisd: nisd,
    niv: niv,
    NJcy: NJcy,
    njcy: njcy,
    nlarr: nlarr,
    nlArr: nlArr,
    nldr: nldr,
    nlE: nlE,
    nle: nle,
    nleftarrow: nleftarrow,
    nLeftarrow: nLeftarrow,
    nleftrightarrow: nleftrightarrow,
    nLeftrightarrow: nLeftrightarrow,
    nleq: nleq,
    nleqq: nleqq,
    nleqslant: nleqslant,
    nles: nles,
    nless: nless,
    nLl: nLl,
    nlsim: nlsim,
    nLt: nLt,
    nlt: nlt,
    nltri: nltri,
    nltrie: nltrie,
    nLtv: nLtv,
    nmid: nmid,
    NoBreak: NoBreak,
    NonBreakingSpace: NonBreakingSpace,
    nopf: nopf,
    Nopf: Nopf,
    Not: Not,
    not: not,
    NotCongruent: NotCongruent,
    NotCupCap: NotCupCap,
    NotDoubleVerticalBar: NotDoubleVerticalBar,
    NotElement: NotElement,
    NotEqual: NotEqual,
    NotEqualTilde: NotEqualTilde,
    NotExists: NotExists,
    NotGreater: NotGreater,
    NotGreaterEqual: NotGreaterEqual,
    NotGreaterFullEqual: NotGreaterFullEqual,
    NotGreaterGreater: NotGreaterGreater,
    NotGreaterLess: NotGreaterLess,
    NotGreaterSlantEqual: NotGreaterSlantEqual,
    NotGreaterTilde: NotGreaterTilde,
    NotHumpDownHump: NotHumpDownHump,
    NotHumpEqual: NotHumpEqual,
    notin: notin,
    notindot: notindot,
    notinE: notinE,
    notinva: notinva,
    notinvb: notinvb,
    notinvc: notinvc,
    NotLeftTriangleBar: NotLeftTriangleBar,
    NotLeftTriangle: NotLeftTriangle,
    NotLeftTriangleEqual: NotLeftTriangleEqual,
    NotLess: NotLess,
    NotLessEqual: NotLessEqual,
    NotLessGreater: NotLessGreater,
    NotLessLess: NotLessLess,
    NotLessSlantEqual: NotLessSlantEqual,
    NotLessTilde: NotLessTilde,
    NotNestedGreaterGreater: NotNestedGreaterGreater,
    NotNestedLessLess: NotNestedLessLess,
    notni: notni,
    notniva: notniva,
    notnivb: notnivb,
    notnivc: notnivc,
    NotPrecedes: NotPrecedes,
    NotPrecedesEqual: NotPrecedesEqual,
    NotPrecedesSlantEqual: NotPrecedesSlantEqual,
    NotReverseElement: NotReverseElement,
    NotRightTriangleBar: NotRightTriangleBar,
    NotRightTriangle: NotRightTriangle,
    NotRightTriangleEqual: NotRightTriangleEqual,
    NotSquareSubset: NotSquareSubset,
    NotSquareSubsetEqual: NotSquareSubsetEqual,
    NotSquareSuperset: NotSquareSuperset,
    NotSquareSupersetEqual: NotSquareSupersetEqual,
    NotSubset: NotSubset,
    NotSubsetEqual: NotSubsetEqual,
    NotSucceeds: NotSucceeds,
    NotSucceedsEqual: NotSucceedsEqual,
    NotSucceedsSlantEqual: NotSucceedsSlantEqual,
    NotSucceedsTilde: NotSucceedsTilde,
    NotSuperset: NotSuperset,
    NotSupersetEqual: NotSupersetEqual,
    NotTilde: NotTilde,
    NotTildeEqual: NotTildeEqual,
    NotTildeFullEqual: NotTildeFullEqual,
    NotTildeTilde: NotTildeTilde,
    NotVerticalBar: NotVerticalBar,
    nparallel: nparallel,
    npar: npar,
    nparsl: nparsl,
    npart: npart,
    npolint: npolint,
    npr: npr,
    nprcue: nprcue,
    nprec: nprec,
    npreceq: npreceq,
    npre: npre,
    nrarrc: nrarrc,
    nrarr: nrarr,
    nrArr: nrArr,
    nrarrw: nrarrw,
    nrightarrow: nrightarrow,
    nRightarrow: nRightarrow,
    nrtri: nrtri,
    nrtrie: nrtrie,
    nsc: nsc,
    nsccue: nsccue,
    nsce: nsce,
    Nscr: Nscr,
    nscr: nscr,
    nshortmid: nshortmid,
    nshortparallel: nshortparallel,
    nsim: nsim,
    nsime: nsime,
    nsimeq: nsimeq,
    nsmid: nsmid,
    nspar: nspar,
    nsqsube: nsqsube,
    nsqsupe: nsqsupe,
    nsub: nsub,
    nsubE: nsubE,
    nsube: nsube,
    nsubset: nsubset,
    nsubseteq: nsubseteq,
    nsubseteqq: nsubseteqq,
    nsucc: nsucc,
    nsucceq: nsucceq,
    nsup: nsup,
    nsupE: nsupE,
    nsupe: nsupe,
    nsupset: nsupset,
    nsupseteq: nsupseteq,
    nsupseteqq: nsupseteqq,
    ntgl: ntgl,
    Ntilde: Ntilde,
    ntilde: ntilde,
    ntlg: ntlg,
    ntriangleleft: ntriangleleft,
    ntrianglelefteq: ntrianglelefteq,
    ntriangleright: ntriangleright,
    ntrianglerighteq: ntrianglerighteq,
    Nu: Nu,
    nu: nu,
    num: num,
    numero: numero,
    numsp: numsp,
    nvap: nvap,
    nvdash: nvdash,
    nvDash: nvDash,
    nVdash: nVdash,
    nVDash: nVDash,
    nvge: nvge,
    nvgt: nvgt,
    nvHarr: nvHarr,
    nvinfin: nvinfin,
    nvlArr: nvlArr,
    nvle: nvle,
    nvlt: nvlt,
    nvltrie: nvltrie,
    nvrArr: nvrArr,
    nvrtrie: nvrtrie,
    nvsim: nvsim,
    nwarhk: nwarhk,
    nwarr: nwarr,
    nwArr: nwArr,
    nwarrow: nwarrow,
    nwnear: nwnear,
    Oacute: Oacute,
    oacute: oacute,
    oast: oast,
    Ocirc: Ocirc,
    ocirc: ocirc,
    ocir: ocir,
    Ocy: Ocy,
    ocy: ocy,
    odash: odash,
    Odblac: Odblac,
    odblac: odblac,
    odiv: odiv,
    odot: odot,
    odsold: odsold,
    OElig: OElig,
    oelig: oelig,
    ofcir: ofcir,
    Ofr: Ofr,
    ofr: ofr,
    ogon: ogon,
    Ograve: Ograve,
    ograve: ograve,
    ogt: ogt,
    ohbar: ohbar,
    ohm: ohm,
    oint: oint,
    olarr: olarr,
    olcir: olcir,
    olcross: olcross,
    oline: oline,
    olt: olt,
    Omacr: Omacr,
    omacr: omacr,
    Omega: Omega,
    omega: omega,
    Omicron: Omicron,
    omicron: omicron,
    omid: omid,
    ominus: ominus,
    Oopf: Oopf,
    oopf: oopf,
    opar: opar,
    OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
    OpenCurlyQuote: OpenCurlyQuote,
    operp: operp,
    oplus: oplus,
    orarr: orarr,
    Or: Or,
    or: or,
    ord: ord,
    order: order,
    orderof: orderof,
    ordf: ordf,
    ordm: ordm,
    origof: origof,
    oror: oror,
    orslope: orslope,
    orv: orv,
    oS: oS,
    Oscr: Oscr,
    oscr: oscr,
    Oslash: Oslash,
    oslash: oslash,
    osol: osol,
    Otilde: Otilde,
    otilde: otilde,
    otimesas: otimesas,
    Otimes: Otimes,
    otimes: otimes,
    Ouml: Ouml,
    ouml: ouml,
    ovbar: ovbar,
    OverBar: OverBar,
    OverBrace: OverBrace,
    OverBracket: OverBracket,
    OverParenthesis: OverParenthesis,
    para: para,
    parallel: parallel,
    par: par,
    parsim: parsim,
    parsl: parsl,
    part: part,
    PartialD: PartialD,
    Pcy: Pcy,
    pcy: pcy,
    percnt: percnt,
    period: period,
    permil: permil,
    perp: perp,
    pertenk: pertenk,
    Pfr: Pfr,
    pfr: pfr,
    Phi: Phi,
    phi: phi,
    phiv: phiv,
    phmmat: phmmat,
    phone: phone,
    Pi: Pi,
    pi: pi,
    pitchfork: pitchfork,
    piv: piv,
    planck: planck,
    planckh: planckh,
    plankv: plankv,
    plusacir: plusacir,
    plusb: plusb,
    pluscir: pluscir,
    plus: plus,
    plusdo: plusdo,
    plusdu: plusdu,
    pluse: pluse,
    PlusMinus: PlusMinus,
    plusmn: plusmn,
    plussim: plussim,
    plustwo: plustwo,
    pm: pm,
    Poincareplane: Poincareplane,
    pointint: pointint,
    popf: popf,
    Popf: Popf,
    pound: pound,
    prap: prap,
    Pr: Pr,
    pr: pr,
    prcue: prcue,
    precapprox: precapprox,
    prec: prec,
    preccurlyeq: preccurlyeq,
    Precedes: Precedes,
    PrecedesEqual: PrecedesEqual,
    PrecedesSlantEqual: PrecedesSlantEqual,
    PrecedesTilde: PrecedesTilde,
    preceq: preceq,
    precnapprox: precnapprox,
    precneqq: precneqq,
    precnsim: precnsim,
    pre: pre,
    prE: prE,
    precsim: precsim,
    prime: prime,
    Prime: Prime,
    primes: primes,
    prnap: prnap,
    prnE: prnE,
    prnsim: prnsim,
    prod: prod,
    Product: Product,
    profalar: profalar,
    profline: profline,
    profsurf: profsurf,
    prop: prop,
    Proportional: Proportional,
    Proportion: Proportion,
    propto: propto,
    prsim: prsim,
    prurel: prurel,
    Pscr: Pscr,
    pscr: pscr,
    Psi: Psi,
    psi: psi,
    puncsp: puncsp,
    Qfr: Qfr,
    qfr: qfr,
    qint: qint,
    qopf: qopf,
    Qopf: Qopf,
    qprime: qprime,
    Qscr: Qscr,
    qscr: qscr,
    quaternions: quaternions,
    quatint: quatint,
    quest: quest,
    questeq: questeq,
    quot: quot,
    QUOT: QUOT,
    rAarr: rAarr,
    race: race,
    Racute: Racute,
    racute: racute,
    radic: radic,
    raemptyv: raemptyv,
    rang: rang,
    Rang: Rang,
    rangd: rangd,
    range: range,
    rangle: rangle,
    raquo: raquo,
    rarrap: rarrap,
    rarrb: rarrb,
    rarrbfs: rarrbfs,
    rarrc: rarrc,
    rarr: rarr,
    Rarr: Rarr,
    rArr: rArr,
    rarrfs: rarrfs,
    rarrhk: rarrhk,
    rarrlp: rarrlp,
    rarrpl: rarrpl,
    rarrsim: rarrsim,
    Rarrtl: Rarrtl,
    rarrtl: rarrtl,
    rarrw: rarrw,
    ratail: ratail,
    rAtail: rAtail,
    ratio: ratio,
    rationals: rationals,
    rbarr: rbarr,
    rBarr: rBarr,
    RBarr: RBarr,
    rbbrk: rbbrk,
    rbrace: rbrace,
    rbrack: rbrack,
    rbrke: rbrke,
    rbrksld: rbrksld,
    rbrkslu: rbrkslu,
    Rcaron: Rcaron,
    rcaron: rcaron,
    Rcedil: Rcedil,
    rcedil: rcedil,
    rceil: rceil,
    rcub: rcub,
    Rcy: Rcy,
    rcy: rcy,
    rdca: rdca,
    rdldhar: rdldhar,
    rdquo: rdquo,
    rdquor: rdquor,
    rdsh: rdsh,
    real: real,
    realine: realine,
    realpart: realpart,
    reals: reals,
    Re: Re,
    rect: rect,
    reg: reg,
    REG: REG,
    ReverseElement: ReverseElement,
    ReverseEquilibrium: ReverseEquilibrium,
    ReverseUpEquilibrium: ReverseUpEquilibrium,
    rfisht: rfisht,
    rfloor: rfloor,
    rfr: rfr,
    Rfr: Rfr,
    rHar: rHar,
    rhard: rhard,
    rharu: rharu,
    rharul: rharul,
    Rho: Rho,
    rho: rho,
    rhov: rhov,
    RightAngleBracket: RightAngleBracket,
    RightArrowBar: RightArrowBar,
    rightarrow: rightarrow,
    RightArrow: RightArrow,
    Rightarrow: Rightarrow,
    RightArrowLeftArrow: RightArrowLeftArrow,
    rightarrowtail: rightarrowtail,
    RightCeiling: RightCeiling,
    RightDoubleBracket: RightDoubleBracket,
    RightDownTeeVector: RightDownTeeVector,
    RightDownVectorBar: RightDownVectorBar,
    RightDownVector: RightDownVector,
    RightFloor: RightFloor,
    rightharpoondown: rightharpoondown,
    rightharpoonup: rightharpoonup,
    rightleftarrows: rightleftarrows,
    rightleftharpoons: rightleftharpoons,
    rightrightarrows: rightrightarrows,
    rightsquigarrow: rightsquigarrow,
    RightTeeArrow: RightTeeArrow,
    RightTee: RightTee,
    RightTeeVector: RightTeeVector,
    rightthreetimes: rightthreetimes,
    RightTriangleBar: RightTriangleBar,
    RightTriangle: RightTriangle,
    RightTriangleEqual: RightTriangleEqual,
    RightUpDownVector: RightUpDownVector,
    RightUpTeeVector: RightUpTeeVector,
    RightUpVectorBar: RightUpVectorBar,
    RightUpVector: RightUpVector,
    RightVectorBar: RightVectorBar,
    RightVector: RightVector,
    ring: ring,
    risingdotseq: risingdotseq,
    rlarr: rlarr,
    rlhar: rlhar,
    rlm: rlm,
    rmoustache: rmoustache,
    rmoust: rmoust,
    rnmid: rnmid,
    roang: roang,
    roarr: roarr,
    robrk: robrk,
    ropar: ropar,
    ropf: ropf,
    Ropf: Ropf,
    roplus: roplus,
    rotimes: rotimes,
    RoundImplies: RoundImplies,
    rpar: rpar,
    rpargt: rpargt,
    rppolint: rppolint,
    rrarr: rrarr,
    Rrightarrow: Rrightarrow,
    rsaquo: rsaquo,
    rscr: rscr,
    Rscr: Rscr,
    rsh: rsh,
    Rsh: Rsh,
    rsqb: rsqb,
    rsquo: rsquo,
    rsquor: rsquor,
    rthree: rthree,
    rtimes: rtimes,
    rtri: rtri,
    rtrie: rtrie,
    rtrif: rtrif,
    rtriltri: rtriltri,
    RuleDelayed: RuleDelayed,
    ruluhar: ruluhar,
    rx: rx,
    Sacute: Sacute,
    sacute: sacute,
    sbquo: sbquo,
    scap: scap,
    Scaron: Scaron,
    scaron: scaron,
    Sc: Sc,
    sc: sc,
    sccue: sccue,
    sce: sce,
    scE: scE,
    Scedil: Scedil,
    scedil: scedil,
    Scirc: Scirc,
    scirc: scirc,
    scnap: scnap,
    scnE: scnE,
    scnsim: scnsim,
    scpolint: scpolint,
    scsim: scsim,
    Scy: Scy,
    scy: scy,
    sdotb: sdotb,
    sdot: sdot,
    sdote: sdote,
    searhk: searhk,
    searr: searr,
    seArr: seArr,
    searrow: searrow,
    sect: sect,
    semi: semi,
    seswar: seswar,
    setminus: setminus,
    setmn: setmn,
    sext: sext,
    Sfr: Sfr,
    sfr: sfr,
    sfrown: sfrown,
    sharp: sharp,
    SHCHcy: SHCHcy,
    shchcy: shchcy,
    SHcy: SHcy,
    shcy: shcy,
    ShortDownArrow: ShortDownArrow,
    ShortLeftArrow: ShortLeftArrow,
    shortmid: shortmid,
    shortparallel: shortparallel,
    ShortRightArrow: ShortRightArrow,
    ShortUpArrow: ShortUpArrow,
    shy: shy,
    Sigma: Sigma,
    sigma: sigma,
    sigmaf: sigmaf,
    sigmav: sigmav,
    sim: sim,
    simdot: simdot,
    sime: sime,
    simeq: simeq,
    simg: simg,
    simgE: simgE,
    siml: siml,
    simlE: simlE,
    simne: simne,
    simplus: simplus,
    simrarr: simrarr,
    slarr: slarr,
    SmallCircle: SmallCircle,
    smallsetminus: smallsetminus,
    smashp: smashp,
    smeparsl: smeparsl,
    smid: smid,
    smile: smile,
    smt: smt,
    smte: smte,
    smtes: smtes,
    SOFTcy: SOFTcy,
    softcy: softcy,
    solbar: solbar,
    solb: solb,
    sol: sol,
    Sopf: Sopf,
    sopf: sopf,
    spades: spades,
    spadesuit: spadesuit,
    spar: spar,
    sqcap: sqcap,
    sqcaps: sqcaps,
    sqcup: sqcup,
    sqcups: sqcups,
    Sqrt: Sqrt,
    sqsub: sqsub,
    sqsube: sqsube,
    sqsubset: sqsubset,
    sqsubseteq: sqsubseteq,
    sqsup: sqsup,
    sqsupe: sqsupe,
    sqsupset: sqsupset,
    sqsupseteq: sqsupseteq,
    square: square,
    Square: Square,
    SquareIntersection: SquareIntersection,
    SquareSubset: SquareSubset,
    SquareSubsetEqual: SquareSubsetEqual,
    SquareSuperset: SquareSuperset,
    SquareSupersetEqual: SquareSupersetEqual,
    SquareUnion: SquareUnion,
    squarf: squarf,
    squ: squ,
    squf: squf,
    srarr: srarr,
    Sscr: Sscr,
    sscr: sscr,
    ssetmn: ssetmn,
    ssmile: ssmile,
    sstarf: sstarf,
    Star: Star,
    star: star,
    starf: starf,
    straightepsilon: straightepsilon,
    straightphi: straightphi,
    strns: strns,
    sub: sub,
    Sub: Sub,
    subdot: subdot,
    subE: subE,
    sube: sube,
    subedot: subedot,
    submult: submult,
    subnE: subnE,
    subne: subne,
    subplus: subplus,
    subrarr: subrarr,
    subset: subset,
    Subset: Subset,
    subseteq: subseteq,
    subseteqq: subseteqq,
    SubsetEqual: SubsetEqual,
    subsetneq: subsetneq,
    subsetneqq: subsetneqq,
    subsim: subsim,
    subsub: subsub,
    subsup: subsup,
    succapprox: succapprox,
    succ: succ,
    succcurlyeq: succcurlyeq,
    Succeeds: Succeeds,
    SucceedsEqual: SucceedsEqual,
    SucceedsSlantEqual: SucceedsSlantEqual,
    SucceedsTilde: SucceedsTilde,
    succeq: succeq,
    succnapprox: succnapprox,
    succneqq: succneqq,
    succnsim: succnsim,
    succsim: succsim,
    SuchThat: SuchThat,
    sum: sum,
    Sum: Sum,
    sung: sung,
    sup1: sup1,
    sup2: sup2,
    sup3: sup3,
    sup: sup,
    Sup: Sup,
    supdot: supdot,
    supdsub: supdsub,
    supE: supE,
    supe: supe,
    supedot: supedot,
    Superset: Superset,
    SupersetEqual: SupersetEqual,
    suphsol: suphsol,
    suphsub: suphsub,
    suplarr: suplarr,
    supmult: supmult,
    supnE: supnE,
    supne: supne,
    supplus: supplus,
    supset: supset,
    Supset: Supset,
    supseteq: supseteq,
    supseteqq: supseteqq,
    supsetneq: supsetneq,
    supsetneqq: supsetneqq,
    supsim: supsim,
    supsub: supsub,
    supsup: supsup,
    swarhk: swarhk,
    swarr: swarr,
    swArr: swArr,
    swarrow: swarrow,
    swnwar: swnwar,
    szlig: szlig,
    Tab: Tab,
    target: target,
    Tau: Tau,
    tau: tau,
    tbrk: tbrk,
    Tcaron: Tcaron,
    tcaron: tcaron,
    Tcedil: Tcedil,
    tcedil: tcedil,
    Tcy: Tcy,
    tcy: tcy,
    tdot: tdot,
    telrec: telrec,
    Tfr: Tfr,
    tfr: tfr,
    there4: there4,
    therefore: therefore,
    Therefore: Therefore,
    Theta: Theta,
    theta: theta,
    thetasym: thetasym,
    thetav: thetav,
    thickapprox: thickapprox,
    thicksim: thicksim,
    ThickSpace: ThickSpace,
    ThinSpace: ThinSpace,
    thinsp: thinsp,
    thkap: thkap,
    thksim: thksim,
    THORN: THORN,
    thorn: thorn,
    tilde: tilde,
    Tilde: Tilde,
    TildeEqual: TildeEqual,
    TildeFullEqual: TildeFullEqual,
    TildeTilde: TildeTilde,
    timesbar: timesbar,
    timesb: timesb,
    times: times,
    timesd: timesd,
    tint: tint,
    toea: toea,
    topbot: topbot,
    topcir: topcir,
    top: top,
    Topf: Topf,
    topf: topf,
    topfork: topfork,
    tosa: tosa,
    tprime: tprime,
    trade: trade,
    TRADE: TRADE,
    triangle: triangle,
    triangledown: triangledown,
    triangleleft: triangleleft,
    trianglelefteq: trianglelefteq,
    triangleq: triangleq,
    triangleright: triangleright,
    trianglerighteq: trianglerighteq,
    tridot: tridot,
    trie: trie,
    triminus: triminus,
    TripleDot: TripleDot,
    triplus: triplus,
    trisb: trisb,
    tritime: tritime,
    trpezium: trpezium,
    Tscr: Tscr,
    tscr: tscr,
    TScy: TScy,
    tscy: tscy,
    TSHcy: TSHcy,
    tshcy: tshcy,
    Tstrok: Tstrok,
    tstrok: tstrok,
    twixt: twixt,
    twoheadleftarrow: twoheadleftarrow,
    twoheadrightarrow: twoheadrightarrow,
    Uacute: Uacute,
    uacute: uacute,
    uarr: uarr,
    Uarr: Uarr,
    uArr: uArr,
    Uarrocir: Uarrocir,
    Ubrcy: Ubrcy,
    ubrcy: ubrcy,
    Ubreve: Ubreve,
    ubreve: ubreve,
    Ucirc: Ucirc,
    ucirc: ucirc,
    Ucy: Ucy,
    ucy: ucy,
    udarr: udarr,
    Udblac: Udblac,
    udblac: udblac,
    udhar: udhar,
    ufisht: ufisht,
    Ufr: Ufr,
    ufr: ufr,
    Ugrave: Ugrave,
    ugrave: ugrave,
    uHar: uHar,
    uharl: uharl,
    uharr: uharr,
    uhblk: uhblk,
    ulcorn: ulcorn,
    ulcorner: ulcorner,
    ulcrop: ulcrop,
    ultri: ultri,
    Umacr: Umacr,
    umacr: umacr,
    uml: uml,
    UnderBar: UnderBar,
    UnderBrace: UnderBrace,
    UnderBracket: UnderBracket,
    UnderParenthesis: UnderParenthesis,
    Union: Union,
    UnionPlus: UnionPlus,
    Uogon: Uogon,
    uogon: uogon,
    Uopf: Uopf,
    uopf: uopf,
    UpArrowBar: UpArrowBar,
    uparrow: uparrow,
    UpArrow: UpArrow,
    Uparrow: Uparrow,
    UpArrowDownArrow: UpArrowDownArrow,
    updownarrow: updownarrow,
    UpDownArrow: UpDownArrow,
    Updownarrow: Updownarrow,
    UpEquilibrium: UpEquilibrium,
    upharpoonleft: upharpoonleft,
    upharpoonright: upharpoonright,
    uplus: uplus,
    UpperLeftArrow: UpperLeftArrow,
    UpperRightArrow: UpperRightArrow,
    upsi: upsi,
    Upsi: Upsi,
    upsih: upsih,
    Upsilon: Upsilon,
    upsilon: upsilon,
    UpTeeArrow: UpTeeArrow,
    UpTee: UpTee,
    upuparrows: upuparrows,
    urcorn: urcorn,
    urcorner: urcorner,
    urcrop: urcrop,
    Uring: Uring,
    uring: uring,
    urtri: urtri,
    Uscr: Uscr,
    uscr: uscr,
    utdot: utdot,
    Utilde: Utilde,
    utilde: utilde,
    utri: utri,
    utrif: utrif,
    uuarr: uuarr,
    Uuml: Uuml,
    uuml: uuml,
    uwangle: uwangle,
    vangrt: vangrt,
    varepsilon: varepsilon,
    varkappa: varkappa,
    varnothing: varnothing,
    varphi: varphi,
    varpi: varpi,
    varpropto: varpropto,
    varr: varr,
    vArr: vArr,
    varrho: varrho,
    varsigma: varsigma,
    varsubsetneq: varsubsetneq,
    varsubsetneqq: varsubsetneqq,
    varsupsetneq: varsupsetneq,
    varsupsetneqq: varsupsetneqq,
    vartheta: vartheta,
    vartriangleleft: vartriangleleft,
    vartriangleright: vartriangleright,
    vBar: vBar,
    Vbar: Vbar,
    vBarv: vBarv,
    Vcy: Vcy,
    vcy: vcy,
    vdash: vdash,
    vDash: vDash,
    Vdash: Vdash,
    VDash: VDash,
    Vdashl: Vdashl,
    veebar: veebar,
    vee: vee,
    Vee: Vee,
    veeeq: veeeq,
    vellip: vellip,
    verbar: verbar,
    Verbar: Verbar,
    vert: vert,
    Vert: Vert,
    VerticalBar: VerticalBar,
    VerticalLine: VerticalLine,
    VerticalSeparator: VerticalSeparator,
    VerticalTilde: VerticalTilde,
    VeryThinSpace: VeryThinSpace,
    Vfr: Vfr,
    vfr: vfr,
    vltri: vltri,
    vnsub: vnsub,
    vnsup: vnsup,
    Vopf: Vopf,
    vopf: vopf,
    vprop: vprop,
    vrtri: vrtri,
    Vscr: Vscr,
    vscr: vscr,
    vsubnE: vsubnE,
    vsubne: vsubne,
    vsupnE: vsupnE,
    vsupne: vsupne,
    Vvdash: Vvdash,
    vzigzag: vzigzag,
    Wcirc: Wcirc,
    wcirc: wcirc,
    wedbar: wedbar,
    wedge: wedge,
    Wedge: Wedge,
    wedgeq: wedgeq,
    weierp: weierp,
    Wfr: Wfr,
    wfr: wfr,
    Wopf: Wopf,
    wopf: wopf,
    wp: wp,
    wr: wr,
    wreath: wreath,
    Wscr: Wscr,
    wscr: wscr,
    xcap: xcap,
    xcirc: xcirc,
    xcup: xcup,
    xdtri: xdtri,
    Xfr: Xfr,
    xfr: xfr,
    xharr: xharr,
    xhArr: xhArr,
    Xi: Xi,
    xi: xi,
    xlarr: xlarr,
    xlArr: xlArr,
    xmap: xmap,
    xnis: xnis,
    xodot: xodot,
    Xopf: Xopf,
    xopf: xopf,
    xoplus: xoplus,
    xotime: xotime,
    xrarr: xrarr,
    xrArr: xrArr,
    Xscr: Xscr,
    xscr: xscr,
    xsqcup: xsqcup,
    xuplus: xuplus,
    xutri: xutri,
    xvee: xvee,
    xwedge: xwedge,
    Yacute: Yacute,
    yacute: yacute,
    YAcy: YAcy,
    yacy: yacy,
    Ycirc: Ycirc,
    ycirc: ycirc,
    Ycy: Ycy,
    ycy: ycy,
    yen: yen,
    Yfr: Yfr,
    yfr: yfr,
    YIcy: YIcy,
    yicy: yicy,
    Yopf: Yopf,
    yopf: yopf,
    Yscr: Yscr,
    yscr: yscr,
    YUcy: YUcy,
    yucy: yucy,
    yuml: yuml,
    Yuml: Yuml,
    Zacute: Zacute,
    zacute: zacute,
    Zcaron: Zcaron,
    zcaron: zcaron,
    Zcy: Zcy,
    zcy: zcy,
    Zdot: Zdot,
    zdot: zdot,
    zeetrf: zeetrf,
    ZeroWidthSpace: ZeroWidthSpace,
    Zeta: Zeta,
    zeta: zeta,
    zfr: zfr,
    Zfr: Zfr,
    ZHcy: ZHcy,
    zhcy: zhcy,
    zigrarr: zigrarr,
    zopf: zopf,
    Zopf: Zopf,
    Zscr: Zscr,
    zscr: zscr,
    zwj: zwj,
    zwnj: zwnj
  };
  var entities$1 =
  /*#__PURE__*/
  Object.freeze({
    __proto__: null,
    Aacute: Aacute,
    aacute: aacute,
    Abreve: Abreve,
    abreve: abreve,
    ac: ac,
    acd: acd,
    acE: acE,
    Acirc: Acirc,
    acirc: acirc,
    acute: acute,
    Acy: Acy,
    acy: acy,
    AElig: AElig,
    aelig: aelig,
    af: af,
    Afr: Afr,
    afr: afr,
    Agrave: Agrave,
    agrave: agrave,
    alefsym: alefsym,
    aleph: aleph,
    Alpha: Alpha,
    alpha: alpha,
    Amacr: Amacr,
    amacr: amacr,
    amalg: amalg,
    amp: amp,
    AMP: AMP,
    andand: andand,
    And: And,
    and: and,
    andd: andd,
    andslope: andslope,
    andv: andv,
    ang: ang,
    ange: ange,
    angle: angle,
    angmsdaa: angmsdaa,
    angmsdab: angmsdab,
    angmsdac: angmsdac,
    angmsdad: angmsdad,
    angmsdae: angmsdae,
    angmsdaf: angmsdaf,
    angmsdag: angmsdag,
    angmsdah: angmsdah,
    angmsd: angmsd,
    angrt: angrt,
    angrtvb: angrtvb,
    angrtvbd: angrtvbd,
    angsph: angsph,
    angst: angst,
    angzarr: angzarr,
    Aogon: Aogon,
    aogon: aogon,
    Aopf: Aopf,
    aopf: aopf,
    apacir: apacir,
    ap: ap,
    apE: apE,
    ape: ape,
    apid: apid,
    apos: apos,
    ApplyFunction: ApplyFunction,
    approx: approx,
    approxeq: approxeq,
    Aring: Aring,
    aring: aring,
    Ascr: Ascr,
    ascr: ascr,
    Assign: Assign,
    ast: ast,
    asymp: asymp,
    asympeq: asympeq,
    Atilde: Atilde,
    atilde: atilde,
    Auml: Auml,
    auml: auml,
    awconint: awconint,
    awint: awint,
    backcong: backcong,
    backepsilon: backepsilon,
    backprime: backprime,
    backsim: backsim,
    backsimeq: backsimeq,
    Backslash: Backslash,
    Barv: Barv,
    barvee: barvee,
    barwed: barwed,
    Barwed: Barwed,
    barwedge: barwedge,
    bbrk: bbrk,
    bbrktbrk: bbrktbrk,
    bcong: bcong,
    Bcy: Bcy,
    bcy: bcy,
    bdquo: bdquo,
    becaus: becaus,
    because: because,
    Because: Because,
    bemptyv: bemptyv,
    bepsi: bepsi,
    bernou: bernou,
    Bernoullis: Bernoullis,
    Beta: Beta,
    beta: beta,
    beth: beth,
    between: between,
    Bfr: Bfr,
    bfr: bfr,
    bigcap: bigcap,
    bigcirc: bigcirc,
    bigcup: bigcup,
    bigodot: bigodot,
    bigoplus: bigoplus,
    bigotimes: bigotimes,
    bigsqcup: bigsqcup,
    bigstar: bigstar,
    bigtriangledown: bigtriangledown,
    bigtriangleup: bigtriangleup,
    biguplus: biguplus,
    bigvee: bigvee,
    bigwedge: bigwedge,
    bkarow: bkarow,
    blacklozenge: blacklozenge,
    blacksquare: blacksquare,
    blacktriangle: blacktriangle,
    blacktriangledown: blacktriangledown,
    blacktriangleleft: blacktriangleleft,
    blacktriangleright: blacktriangleright,
    blank: blank,
    blk12: blk12,
    blk14: blk14,
    blk34: blk34,
    block: block,
    bne: bne,
    bnequiv: bnequiv,
    bNot: bNot,
    bnot: bnot,
    Bopf: Bopf,
    bopf: bopf,
    bot: bot,
    bottom: bottom,
    bowtie: bowtie,
    boxbox: boxbox,
    boxdl: boxdl,
    boxdL: boxdL,
    boxDl: boxDl,
    boxDL: boxDL,
    boxdr: boxdr,
    boxdR: boxdR,
    boxDr: boxDr,
    boxDR: boxDR,
    boxh: boxh,
    boxH: boxH,
    boxhd: boxhd,
    boxHd: boxHd,
    boxhD: boxhD,
    boxHD: boxHD,
    boxhu: boxhu,
    boxHu: boxHu,
    boxhU: boxhU,
    boxHU: boxHU,
    boxminus: boxminus,
    boxplus: boxplus,
    boxtimes: boxtimes,
    boxul: boxul,
    boxuL: boxuL,
    boxUl: boxUl,
    boxUL: boxUL,
    boxur: boxur,
    boxuR: boxuR,
    boxUr: boxUr,
    boxUR: boxUR,
    boxv: boxv,
    boxV: boxV,
    boxvh: boxvh,
    boxvH: boxvH,
    boxVh: boxVh,
    boxVH: boxVH,
    boxvl: boxvl,
    boxvL: boxvL,
    boxVl: boxVl,
    boxVL: boxVL,
    boxvr: boxvr,
    boxvR: boxvR,
    boxVr: boxVr,
    boxVR: boxVR,
    bprime: bprime,
    breve: breve,
    Breve: Breve,
    brvbar: brvbar,
    bscr: bscr,
    Bscr: Bscr,
    bsemi: bsemi,
    bsim: bsim,
    bsime: bsime,
    bsolb: bsolb,
    bsol: bsol,
    bsolhsub: bsolhsub,
    bull: bull,
    bullet: bullet,
    bump: bump,
    bumpE: bumpE,
    bumpe: bumpe,
    Bumpeq: Bumpeq,
    bumpeq: bumpeq,
    Cacute: Cacute,
    cacute: cacute,
    capand: capand,
    capbrcup: capbrcup,
    capcap: capcap,
    cap: cap,
    Cap: Cap,
    capcup: capcup,
    capdot: capdot,
    CapitalDifferentialD: CapitalDifferentialD,
    caps: caps,
    caret: caret,
    caron: caron,
    Cayleys: Cayleys,
    ccaps: ccaps,
    Ccaron: Ccaron,
    ccaron: ccaron,
    Ccedil: Ccedil,
    ccedil: ccedil,
    Ccirc: Ccirc,
    ccirc: ccirc,
    Cconint: Cconint,
    ccups: ccups,
    ccupssm: ccupssm,
    Cdot: Cdot,
    cdot: cdot,
    cedil: cedil,
    Cedilla: Cedilla,
    cemptyv: cemptyv,
    cent: cent,
    centerdot: centerdot,
    CenterDot: CenterDot,
    cfr: cfr,
    Cfr: Cfr,
    CHcy: CHcy,
    chcy: chcy,
    check: check,
    checkmark: checkmark,
    Chi: Chi,
    chi: chi,
    circ: circ,
    circeq: circeq,
    circlearrowleft: circlearrowleft,
    circlearrowright: circlearrowright,
    circledast: circledast,
    circledcirc: circledcirc,
    circleddash: circleddash,
    CircleDot: CircleDot,
    circledR: circledR,
    circledS: circledS,
    CircleMinus: CircleMinus,
    CirclePlus: CirclePlus,
    CircleTimes: CircleTimes,
    cir: cir,
    cirE: cirE,
    cire: cire,
    cirfnint: cirfnint,
    cirmid: cirmid,
    cirscir: cirscir,
    ClockwiseContourIntegral: ClockwiseContourIntegral,
    CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
    CloseCurlyQuote: CloseCurlyQuote,
    clubs: clubs,
    clubsuit: clubsuit,
    colon: colon,
    Colon: Colon,
    Colone: Colone,
    colone: colone,
    coloneq: coloneq,
    comma: comma,
    commat: commat,
    comp: comp,
    compfn: compfn,
    complement: complement,
    complexes: complexes,
    cong: cong,
    congdot: congdot,
    Congruent: Congruent,
    conint: conint,
    Conint: Conint,
    ContourIntegral: ContourIntegral,
    copf: copf,
    Copf: Copf,
    coprod: coprod,
    Coproduct: Coproduct,
    copy: copy,
    COPY: COPY,
    copysr: copysr,
    CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
    crarr: crarr,
    cross: cross,
    Cross: Cross,
    Cscr: Cscr,
    cscr: cscr,
    csub: csub,
    csube: csube,
    csup: csup,
    csupe: csupe,
    ctdot: ctdot,
    cudarrl: cudarrl,
    cudarrr: cudarrr,
    cuepr: cuepr,
    cuesc: cuesc,
    cularr: cularr,
    cularrp: cularrp,
    cupbrcap: cupbrcap,
    cupcap: cupcap,
    CupCap: CupCap,
    cup: cup,
    Cup: Cup,
    cupcup: cupcup,
    cupdot: cupdot,
    cupor: cupor,
    cups: cups,
    curarr: curarr,
    curarrm: curarrm,
    curlyeqprec: curlyeqprec,
    curlyeqsucc: curlyeqsucc,
    curlyvee: curlyvee,
    curlywedge: curlywedge,
    curren: curren,
    curvearrowleft: curvearrowleft,
    curvearrowright: curvearrowright,
    cuvee: cuvee,
    cuwed: cuwed,
    cwconint: cwconint,
    cwint: cwint,
    cylcty: cylcty,
    dagger: dagger,
    Dagger: Dagger,
    daleth: daleth,
    darr: darr,
    Darr: Darr,
    dArr: dArr,
    dash: dash,
    Dashv: Dashv,
    dashv: dashv,
    dbkarow: dbkarow,
    dblac: dblac,
    Dcaron: Dcaron,
    dcaron: dcaron,
    Dcy: Dcy,
    dcy: dcy,
    ddagger: ddagger,
    ddarr: ddarr,
    DD: DD,
    dd: dd,
    DDotrahd: DDotrahd,
    ddotseq: ddotseq,
    deg: deg,
    Del: Del,
    Delta: Delta,
    delta: delta,
    demptyv: demptyv,
    dfisht: dfisht,
    Dfr: Dfr,
    dfr: dfr,
    dHar: dHar,
    dharl: dharl,
    dharr: dharr,
    DiacriticalAcute: DiacriticalAcute,
    DiacriticalDot: DiacriticalDot,
    DiacriticalDoubleAcute: DiacriticalDoubleAcute,
    DiacriticalGrave: DiacriticalGrave,
    DiacriticalTilde: DiacriticalTilde,
    diam: diam,
    diamond: diamond,
    Diamond: Diamond,
    diamondsuit: diamondsuit,
    diams: diams,
    die: die,
    DifferentialD: DifferentialD,
    digamma: digamma,
    disin: disin,
    div: div,
    divide: divide,
    divideontimes: divideontimes,
    divonx: divonx,
    DJcy: DJcy,
    djcy: djcy,
    dlcorn: dlcorn,
    dlcrop: dlcrop,
    dollar: dollar,
    Dopf: Dopf,
    dopf: dopf,
    Dot: Dot,
    dot: dot,
    DotDot: DotDot,
    doteq: doteq,
    doteqdot: doteqdot,
    DotEqual: DotEqual,
    dotminus: dotminus,
    dotplus: dotplus,
    dotsquare: dotsquare,
    doublebarwedge: doublebarwedge,
    DoubleContourIntegral: DoubleContourIntegral,
    DoubleDot: DoubleDot,
    DoubleDownArrow: DoubleDownArrow,
    DoubleLeftArrow: DoubleLeftArrow,
    DoubleLeftRightArrow: DoubleLeftRightArrow,
    DoubleLeftTee: DoubleLeftTee,
    DoubleLongLeftArrow: DoubleLongLeftArrow,
    DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
    DoubleLongRightArrow: DoubleLongRightArrow,
    DoubleRightArrow: DoubleRightArrow,
    DoubleRightTee: DoubleRightTee,
    DoubleUpArrow: DoubleUpArrow,
    DoubleUpDownArrow: DoubleUpDownArrow,
    DoubleVerticalBar: DoubleVerticalBar,
    DownArrowBar: DownArrowBar,
    downarrow: downarrow,
    DownArrow: DownArrow,
    Downarrow: Downarrow,
    DownArrowUpArrow: DownArrowUpArrow,
    DownBreve: DownBreve,
    downdownarrows: downdownarrows,
    downharpoonleft: downharpoonleft,
    downharpoonright: downharpoonright,
    DownLeftRightVector: DownLeftRightVector,
    DownLeftTeeVector: DownLeftTeeVector,
    DownLeftVectorBar: DownLeftVectorBar,
    DownLeftVector: DownLeftVector,
    DownRightTeeVector: DownRightTeeVector,
    DownRightVectorBar: DownRightVectorBar,
    DownRightVector: DownRightVector,
    DownTeeArrow: DownTeeArrow,
    DownTee: DownTee,
    drbkarow: drbkarow,
    drcorn: drcorn,
    drcrop: drcrop,
    Dscr: Dscr,
    dscr: dscr,
    DScy: DScy,
    dscy: dscy,
    dsol: dsol,
    Dstrok: Dstrok,
    dstrok: dstrok,
    dtdot: dtdot,
    dtri: dtri,
    dtrif: dtrif,
    duarr: duarr,
    duhar: duhar,
    dwangle: dwangle,
    DZcy: DZcy,
    dzcy: dzcy,
    dzigrarr: dzigrarr,
    Eacute: Eacute,
    eacute: eacute,
    easter: easter,
    Ecaron: Ecaron,
    ecaron: ecaron,
    Ecirc: Ecirc,
    ecirc: ecirc,
    ecir: ecir,
    ecolon: ecolon,
    Ecy: Ecy,
    ecy: ecy,
    eDDot: eDDot,
    Edot: Edot,
    edot: edot,
    eDot: eDot,
    ee: ee,
    efDot: efDot,
    Efr: Efr,
    efr: efr,
    eg: eg,
    Egrave: Egrave,
    egrave: egrave,
    egs: egs,
    egsdot: egsdot,
    el: el,
    Element: Element,
    elinters: elinters,
    ell: ell,
    els: els,
    elsdot: elsdot,
    Emacr: Emacr,
    emacr: emacr,
    empty: empty,
    emptyset: emptyset,
    EmptySmallSquare: EmptySmallSquare,
    emptyv: emptyv,
    EmptyVerySmallSquare: EmptyVerySmallSquare,
    emsp13: emsp13,
    emsp14: emsp14,
    emsp: emsp,
    ENG: ENG,
    eng: eng,
    ensp: ensp,
    Eogon: Eogon,
    eogon: eogon,
    Eopf: Eopf,
    eopf: eopf,
    epar: epar,
    eparsl: eparsl,
    eplus: eplus,
    epsi: epsi,
    Epsilon: Epsilon,
    epsilon: epsilon,
    epsiv: epsiv,
    eqcirc: eqcirc,
    eqcolon: eqcolon,
    eqsim: eqsim,
    eqslantgtr: eqslantgtr,
    eqslantless: eqslantless,
    Equal: Equal,
    equals: equals,
    EqualTilde: EqualTilde,
    equest: equest,
    Equilibrium: Equilibrium,
    equiv: equiv,
    equivDD: equivDD,
    eqvparsl: eqvparsl,
    erarr: erarr,
    erDot: erDot,
    escr: escr,
    Escr: Escr,
    esdot: esdot,
    Esim: Esim,
    esim: esim,
    Eta: Eta,
    eta: eta,
    ETH: ETH,
    eth: eth,
    Euml: Euml,
    euml: euml,
    euro: euro,
    excl: excl,
    exist: exist,
    Exists: Exists,
    expectation: expectation,
    exponentiale: exponentiale,
    ExponentialE: ExponentialE,
    fallingdotseq: fallingdotseq,
    Fcy: Fcy,
    fcy: fcy,
    female: female,
    ffilig: ffilig,
    fflig: fflig,
    ffllig: ffllig,
    Ffr: Ffr,
    ffr: ffr,
    filig: filig,
    FilledSmallSquare: FilledSmallSquare,
    FilledVerySmallSquare: FilledVerySmallSquare,
    fjlig: fjlig,
    flat: flat,
    fllig: fllig,
    fltns: fltns,
    fnof: fnof,
    Fopf: Fopf,
    fopf: fopf,
    forall: forall,
    ForAll: ForAll,
    fork: fork,
    forkv: forkv,
    Fouriertrf: Fouriertrf,
    fpartint: fpartint,
    frac12: frac12,
    frac13: frac13,
    frac14: frac14,
    frac15: frac15,
    frac16: frac16,
    frac18: frac18,
    frac23: frac23,
    frac25: frac25,
    frac34: frac34,
    frac35: frac35,
    frac38: frac38,
    frac45: frac45,
    frac56: frac56,
    frac58: frac58,
    frac78: frac78,
    frasl: frasl,
    frown: frown,
    fscr: fscr,
    Fscr: Fscr,
    gacute: gacute,
    Gamma: Gamma,
    gamma: gamma,
    Gammad: Gammad,
    gammad: gammad,
    gap: gap,
    Gbreve: Gbreve,
    gbreve: gbreve,
    Gcedil: Gcedil,
    Gcirc: Gcirc,
    gcirc: gcirc,
    Gcy: Gcy,
    gcy: gcy,
    Gdot: Gdot,
    gdot: gdot,
    ge: ge,
    gE: gE,
    gEl: gEl,
    gel: gel,
    geq: geq,
    geqq: geqq,
    geqslant: geqslant,
    gescc: gescc,
    ges: ges,
    gesdot: gesdot,
    gesdoto: gesdoto,
    gesdotol: gesdotol,
    gesl: gesl,
    gesles: gesles,
    Gfr: Gfr,
    gfr: gfr,
    gg: gg,
    Gg: Gg,
    ggg: ggg,
    gimel: gimel,
    GJcy: GJcy,
    gjcy: gjcy,
    gla: gla,
    gl: gl,
    glE: glE,
    glj: glj,
    gnap: gnap,
    gnapprox: gnapprox,
    gne: gne,
    gnE: gnE,
    gneq: gneq,
    gneqq: gneqq,
    gnsim: gnsim,
    Gopf: Gopf,
    gopf: gopf,
    grave: grave,
    GreaterEqual: GreaterEqual,
    GreaterEqualLess: GreaterEqualLess,
    GreaterFullEqual: GreaterFullEqual,
    GreaterGreater: GreaterGreater,
    GreaterLess: GreaterLess,
    GreaterSlantEqual: GreaterSlantEqual,
    GreaterTilde: GreaterTilde,
    Gscr: Gscr,
    gscr: gscr,
    gsim: gsim,
    gsime: gsime,
    gsiml: gsiml,
    gtcc: gtcc,
    gtcir: gtcir,
    gt: gt,
    GT: GT,
    Gt: Gt,
    gtdot: gtdot,
    gtlPar: gtlPar,
    gtquest: gtquest,
    gtrapprox: gtrapprox,
    gtrarr: gtrarr,
    gtrdot: gtrdot,
    gtreqless: gtreqless,
    gtreqqless: gtreqqless,
    gtrless: gtrless,
    gtrsim: gtrsim,
    gvertneqq: gvertneqq,
    gvnE: gvnE,
    Hacek: Hacek,
    hairsp: hairsp,
    half: half,
    hamilt: hamilt,
    HARDcy: HARDcy,
    hardcy: hardcy,
    harrcir: harrcir,
    harr: harr,
    hArr: hArr,
    harrw: harrw,
    Hat: Hat,
    hbar: hbar,
    Hcirc: Hcirc,
    hcirc: hcirc,
    hearts: hearts,
    heartsuit: heartsuit,
    hellip: hellip,
    hercon: hercon,
    hfr: hfr,
    Hfr: Hfr,
    HilbertSpace: HilbertSpace,
    hksearow: hksearow,
    hkswarow: hkswarow,
    hoarr: hoarr,
    homtht: homtht,
    hookleftarrow: hookleftarrow,
    hookrightarrow: hookrightarrow,
    hopf: hopf,
    Hopf: Hopf,
    horbar: horbar,
    HorizontalLine: HorizontalLine,
    hscr: hscr,
    Hscr: Hscr,
    hslash: hslash,
    Hstrok: Hstrok,
    hstrok: hstrok,
    HumpDownHump: HumpDownHump,
    HumpEqual: HumpEqual,
    hybull: hybull,
    hyphen: hyphen,
    Iacute: Iacute,
    iacute: iacute,
    ic: ic,
    Icirc: Icirc,
    icirc: icirc,
    Icy: Icy,
    icy: icy,
    Idot: Idot,
    IEcy: IEcy,
    iecy: iecy,
    iexcl: iexcl,
    iff: iff,
    ifr: ifr,
    Ifr: Ifr,
    Igrave: Igrave,
    igrave: igrave,
    ii: ii,
    iiiint: iiiint,
    iiint: iiint,
    iinfin: iinfin,
    iiota: iiota,
    IJlig: IJlig,
    ijlig: ijlig,
    Imacr: Imacr,
    imacr: imacr,
    image: image,
    ImaginaryI: ImaginaryI,
    imagline: imagline,
    imagpart: imagpart,
    imath: imath,
    Im: Im,
    imof: imof,
    imped: imped,
    Implies: Implies,
    incare: incare,
    infin: infin,
    infintie: infintie,
    inodot: inodot,
    intcal: intcal,
    int: int,
    Int: Int,
    integers: integers,
    Integral: Integral,
    intercal: intercal,
    Intersection: Intersection,
    intlarhk: intlarhk,
    intprod: intprod,
    InvisibleComma: InvisibleComma,
    InvisibleTimes: InvisibleTimes,
    IOcy: IOcy,
    iocy: iocy,
    Iogon: Iogon,
    iogon: iogon,
    Iopf: Iopf,
    iopf: iopf,
    Iota: Iota,
    iota: iota,
    iprod: iprod,
    iquest: iquest,
    iscr: iscr,
    Iscr: Iscr,
    isin: isin,
    isindot: isindot,
    isinE: isinE,
    isins: isins,
    isinsv: isinsv,
    isinv: isinv,
    it: it,
    Itilde: Itilde,
    itilde: itilde,
    Iukcy: Iukcy,
    iukcy: iukcy,
    Iuml: Iuml,
    iuml: iuml,
    Jcirc: Jcirc,
    jcirc: jcirc,
    Jcy: Jcy,
    jcy: jcy,
    Jfr: Jfr,
    jfr: jfr,
    jmath: jmath,
    Jopf: Jopf,
    jopf: jopf,
    Jscr: Jscr,
    jscr: jscr,
    Jsercy: Jsercy,
    jsercy: jsercy,
    Jukcy: Jukcy,
    jukcy: jukcy,
    Kappa: Kappa,
    kappa: kappa,
    kappav: kappav,
    Kcedil: Kcedil,
    kcedil: kcedil,
    Kcy: Kcy,
    kcy: kcy,
    Kfr: Kfr,
    kfr: kfr,
    kgreen: kgreen,
    KHcy: KHcy,
    khcy: khcy,
    KJcy: KJcy,
    kjcy: kjcy,
    Kopf: Kopf,
    kopf: kopf,
    Kscr: Kscr,
    kscr: kscr,
    lAarr: lAarr,
    Lacute: Lacute,
    lacute: lacute,
    laemptyv: laemptyv,
    lagran: lagran,
    Lambda: Lambda,
    lambda: lambda,
    lang: lang,
    Lang: Lang,
    langd: langd,
    langle: langle,
    lap: lap,
    Laplacetrf: Laplacetrf,
    laquo: laquo,
    larrb: larrb,
    larrbfs: larrbfs,
    larr: larr,
    Larr: Larr,
    lArr: lArr,
    larrfs: larrfs,
    larrhk: larrhk,
    larrlp: larrlp,
    larrpl: larrpl,
    larrsim: larrsim,
    larrtl: larrtl,
    latail: latail,
    lAtail: lAtail,
    lat: lat,
    late: late,
    lates: lates,
    lbarr: lbarr,
    lBarr: lBarr,
    lbbrk: lbbrk,
    lbrace: lbrace,
    lbrack: lbrack,
    lbrke: lbrke,
    lbrksld: lbrksld,
    lbrkslu: lbrkslu,
    Lcaron: Lcaron,
    lcaron: lcaron,
    Lcedil: Lcedil,
    lcedil: lcedil,
    lceil: lceil,
    lcub: lcub,
    Lcy: Lcy,
    lcy: lcy,
    ldca: ldca,
    ldquo: ldquo,
    ldquor: ldquor,
    ldrdhar: ldrdhar,
    ldrushar: ldrushar,
    ldsh: ldsh,
    le: le,
    lE: lE,
    LeftAngleBracket: LeftAngleBracket,
    LeftArrowBar: LeftArrowBar,
    leftarrow: leftarrow,
    LeftArrow: LeftArrow,
    Leftarrow: Leftarrow,
    LeftArrowRightArrow: LeftArrowRightArrow,
    leftarrowtail: leftarrowtail,
    LeftCeiling: LeftCeiling,
    LeftDoubleBracket: LeftDoubleBracket,
    LeftDownTeeVector: LeftDownTeeVector,
    LeftDownVectorBar: LeftDownVectorBar,
    LeftDownVector: LeftDownVector,
    LeftFloor: LeftFloor,
    leftharpoondown: leftharpoondown,
    leftharpoonup: leftharpoonup,
    leftleftarrows: leftleftarrows,
    leftrightarrow: leftrightarrow,
    LeftRightArrow: LeftRightArrow,
    Leftrightarrow: Leftrightarrow,
    leftrightarrows: leftrightarrows,
    leftrightharpoons: leftrightharpoons,
    leftrightsquigarrow: leftrightsquigarrow,
    LeftRightVector: LeftRightVector,
    LeftTeeArrow: LeftTeeArrow,
    LeftTee: LeftTee,
    LeftTeeVector: LeftTeeVector,
    leftthreetimes: leftthreetimes,
    LeftTriangleBar: LeftTriangleBar,
    LeftTriangle: LeftTriangle,
    LeftTriangleEqual: LeftTriangleEqual,
    LeftUpDownVector: LeftUpDownVector,
    LeftUpTeeVector: LeftUpTeeVector,
    LeftUpVectorBar: LeftUpVectorBar,
    LeftUpVector: LeftUpVector,
    LeftVectorBar: LeftVectorBar,
    LeftVector: LeftVector,
    lEg: lEg,
    leg: leg,
    leq: leq,
    leqq: leqq,
    leqslant: leqslant,
    lescc: lescc,
    les: les,
    lesdot: lesdot,
    lesdoto: lesdoto,
    lesdotor: lesdotor,
    lesg: lesg,
    lesges: lesges,
    lessapprox: lessapprox,
    lessdot: lessdot,
    lesseqgtr: lesseqgtr,
    lesseqqgtr: lesseqqgtr,
    LessEqualGreater: LessEqualGreater,
    LessFullEqual: LessFullEqual,
    LessGreater: LessGreater,
    lessgtr: lessgtr,
    LessLess: LessLess,
    lesssim: lesssim,
    LessSlantEqual: LessSlantEqual,
    LessTilde: LessTilde,
    lfisht: lfisht,
    lfloor: lfloor,
    Lfr: Lfr,
    lfr: lfr,
    lg: lg,
    lgE: lgE,
    lHar: lHar,
    lhard: lhard,
    lharu: lharu,
    lharul: lharul,
    lhblk: lhblk,
    LJcy: LJcy,
    ljcy: ljcy,
    llarr: llarr,
    ll: ll,
    Ll: Ll,
    llcorner: llcorner,
    Lleftarrow: Lleftarrow,
    llhard: llhard,
    lltri: lltri,
    Lmidot: Lmidot,
    lmidot: lmidot,
    lmoustache: lmoustache,
    lmoust: lmoust,
    lnap: lnap,
    lnapprox: lnapprox,
    lne: lne,
    lnE: lnE,
    lneq: lneq,
    lneqq: lneqq,
    lnsim: lnsim,
    loang: loang,
    loarr: loarr,
    lobrk: lobrk,
    longleftarrow: longleftarrow,
    LongLeftArrow: LongLeftArrow,
    Longleftarrow: Longleftarrow,
    longleftrightarrow: longleftrightarrow,
    LongLeftRightArrow: LongLeftRightArrow,
    Longleftrightarrow: Longleftrightarrow,
    longmapsto: longmapsto,
    longrightarrow: longrightarrow,
    LongRightArrow: LongRightArrow,
    Longrightarrow: Longrightarrow,
    looparrowleft: looparrowleft,
    looparrowright: looparrowright,
    lopar: lopar,
    Lopf: Lopf,
    lopf: lopf,
    loplus: loplus,
    lotimes: lotimes,
    lowast: lowast,
    lowbar: lowbar,
    LowerLeftArrow: LowerLeftArrow,
    LowerRightArrow: LowerRightArrow,
    loz: loz,
    lozenge: lozenge,
    lozf: lozf,
    lpar: lpar,
    lparlt: lparlt,
    lrarr: lrarr,
    lrcorner: lrcorner,
    lrhar: lrhar,
    lrhard: lrhard,
    lrm: lrm,
    lrtri: lrtri,
    lsaquo: lsaquo,
    lscr: lscr,
    Lscr: Lscr,
    lsh: lsh,
    Lsh: Lsh,
    lsim: lsim,
    lsime: lsime,
    lsimg: lsimg,
    lsqb: lsqb,
    lsquo: lsquo,
    lsquor: lsquor,
    Lstrok: Lstrok,
    lstrok: lstrok,
    ltcc: ltcc,
    ltcir: ltcir,
    lt: lt,
    LT: LT,
    Lt: Lt,
    ltdot: ltdot,
    lthree: lthree,
    ltimes: ltimes,
    ltlarr: ltlarr,
    ltquest: ltquest,
    ltri: ltri,
    ltrie: ltrie,
    ltrif: ltrif,
    ltrPar: ltrPar,
    lurdshar: lurdshar,
    luruhar: luruhar,
    lvertneqq: lvertneqq,
    lvnE: lvnE,
    macr: macr,
    male: male,
    malt: malt,
    maltese: maltese,
    map: map,
    mapsto: mapsto,
    mapstodown: mapstodown,
    mapstoleft: mapstoleft,
    mapstoup: mapstoup,
    marker: marker,
    mcomma: mcomma,
    Mcy: Mcy,
    mcy: mcy,
    mdash: mdash,
    mDDot: mDDot,
    measuredangle: measuredangle,
    MediumSpace: MediumSpace,
    Mellintrf: Mellintrf,
    Mfr: Mfr,
    mfr: mfr,
    mho: mho,
    micro: micro,
    midast: midast,
    midcir: midcir,
    mid: mid,
    middot: middot,
    minusb: minusb,
    minus: minus,
    minusd: minusd,
    minusdu: minusdu,
    MinusPlus: MinusPlus,
    mlcp: mlcp,
    mldr: mldr,
    mnplus: mnplus,
    models: models,
    Mopf: Mopf,
    mopf: mopf,
    mp: mp,
    mscr: mscr,
    Mscr: Mscr,
    mstpos: mstpos,
    Mu: Mu,
    mu: mu,
    multimap: multimap,
    mumap: mumap,
    nabla: nabla,
    Nacute: Nacute,
    nacute: nacute,
    nang: nang,
    nap: nap,
    napE: napE,
    napid: napid,
    napos: napos,
    napprox: napprox,
    natural: natural,
    naturals: naturals,
    natur: natur,
    nbsp: nbsp,
    nbump: nbump,
    nbumpe: nbumpe,
    ncap: ncap,
    Ncaron: Ncaron,
    ncaron: ncaron,
    Ncedil: Ncedil,
    ncedil: ncedil,
    ncong: ncong,
    ncongdot: ncongdot,
    ncup: ncup,
    Ncy: Ncy,
    ncy: ncy,
    ndash: ndash,
    nearhk: nearhk,
    nearr: nearr,
    neArr: neArr,
    nearrow: nearrow,
    ne: ne,
    nedot: nedot,
    NegativeMediumSpace: NegativeMediumSpace,
    NegativeThickSpace: NegativeThickSpace,
    NegativeThinSpace: NegativeThinSpace,
    NegativeVeryThinSpace: NegativeVeryThinSpace,
    nequiv: nequiv,
    nesear: nesear,
    nesim: nesim,
    NestedGreaterGreater: NestedGreaterGreater,
    NestedLessLess: NestedLessLess,
    NewLine: NewLine,
    nexist: nexist,
    nexists: nexists,
    Nfr: Nfr,
    nfr: nfr,
    ngE: ngE,
    nge: nge,
    ngeq: ngeq,
    ngeqq: ngeqq,
    ngeqslant: ngeqslant,
    nges: nges,
    nGg: nGg,
    ngsim: ngsim,
    nGt: nGt,
    ngt: ngt,
    ngtr: ngtr,
    nGtv: nGtv,
    nharr: nharr,
    nhArr: nhArr,
    nhpar: nhpar,
    ni: ni,
    nis: nis,
    nisd: nisd,
    niv: niv,
    NJcy: NJcy,
    njcy: njcy,
    nlarr: nlarr,
    nlArr: nlArr,
    nldr: nldr,
    nlE: nlE,
    nle: nle,
    nleftarrow: nleftarrow,
    nLeftarrow: nLeftarrow,
    nleftrightarrow: nleftrightarrow,
    nLeftrightarrow: nLeftrightarrow,
    nleq: nleq,
    nleqq: nleqq,
    nleqslant: nleqslant,
    nles: nles,
    nless: nless,
    nLl: nLl,
    nlsim: nlsim,
    nLt: nLt,
    nlt: nlt,
    nltri: nltri,
    nltrie: nltrie,
    nLtv: nLtv,
    nmid: nmid,
    NoBreak: NoBreak,
    NonBreakingSpace: NonBreakingSpace,
    nopf: nopf,
    Nopf: Nopf,
    Not: Not,
    not: not,
    NotCongruent: NotCongruent,
    NotCupCap: NotCupCap,
    NotDoubleVerticalBar: NotDoubleVerticalBar,
    NotElement: NotElement,
    NotEqual: NotEqual,
    NotEqualTilde: NotEqualTilde,
    NotExists: NotExists,
    NotGreater: NotGreater,
    NotGreaterEqual: NotGreaterEqual,
    NotGreaterFullEqual: NotGreaterFullEqual,
    NotGreaterGreater: NotGreaterGreater,
    NotGreaterLess: NotGreaterLess,
    NotGreaterSlantEqual: NotGreaterSlantEqual,
    NotGreaterTilde: NotGreaterTilde,
    NotHumpDownHump: NotHumpDownHump,
    NotHumpEqual: NotHumpEqual,
    notin: notin,
    notindot: notindot,
    notinE: notinE,
    notinva: notinva,
    notinvb: notinvb,
    notinvc: notinvc,
    NotLeftTriangleBar: NotLeftTriangleBar,
    NotLeftTriangle: NotLeftTriangle,
    NotLeftTriangleEqual: NotLeftTriangleEqual,
    NotLess: NotLess,
    NotLessEqual: NotLessEqual,
    NotLessGreater: NotLessGreater,
    NotLessLess: NotLessLess,
    NotLessSlantEqual: NotLessSlantEqual,
    NotLessTilde: NotLessTilde,
    NotNestedGreaterGreater: NotNestedGreaterGreater,
    NotNestedLessLess: NotNestedLessLess,
    notni: notni,
    notniva: notniva,
    notnivb: notnivb,
    notnivc: notnivc,
    NotPrecedes: NotPrecedes,
    NotPrecedesEqual: NotPrecedesEqual,
    NotPrecedesSlantEqual: NotPrecedesSlantEqual,
    NotReverseElement: NotReverseElement,
    NotRightTriangleBar: NotRightTriangleBar,
    NotRightTriangle: NotRightTriangle,
    NotRightTriangleEqual: NotRightTriangleEqual,
    NotSquareSubset: NotSquareSubset,
    NotSquareSubsetEqual: NotSquareSubsetEqual,
    NotSquareSuperset: NotSquareSuperset,
    NotSquareSupersetEqual: NotSquareSupersetEqual,
    NotSubset: NotSubset,
    NotSubsetEqual: NotSubsetEqual,
    NotSucceeds: NotSucceeds,
    NotSucceedsEqual: NotSucceedsEqual,
    NotSucceedsSlantEqual: NotSucceedsSlantEqual,
    NotSucceedsTilde: NotSucceedsTilde,
    NotSuperset: NotSuperset,
    NotSupersetEqual: NotSupersetEqual,
    NotTilde: NotTilde,
    NotTildeEqual: NotTildeEqual,
    NotTildeFullEqual: NotTildeFullEqual,
    NotTildeTilde: NotTildeTilde,
    NotVerticalBar: NotVerticalBar,
    nparallel: nparallel,
    npar: npar,
    nparsl: nparsl,
    npart: npart,
    npolint: npolint,
    npr: npr,
    nprcue: nprcue,
    nprec: nprec,
    npreceq: npreceq,
    npre: npre,
    nrarrc: nrarrc,
    nrarr: nrarr,
    nrArr: nrArr,
    nrarrw: nrarrw,
    nrightarrow: nrightarrow,
    nRightarrow: nRightarrow,
    nrtri: nrtri,
    nrtrie: nrtrie,
    nsc: nsc,
    nsccue: nsccue,
    nsce: nsce,
    Nscr: Nscr,
    nscr: nscr,
    nshortmid: nshortmid,
    nshortparallel: nshortparallel,
    nsim: nsim,
    nsime: nsime,
    nsimeq: nsimeq,
    nsmid: nsmid,
    nspar: nspar,
    nsqsube: nsqsube,
    nsqsupe: nsqsupe,
    nsub: nsub,
    nsubE: nsubE,
    nsube: nsube,
    nsubset: nsubset,
    nsubseteq: nsubseteq,
    nsubseteqq: nsubseteqq,
    nsucc: nsucc,
    nsucceq: nsucceq,
    nsup: nsup,
    nsupE: nsupE,
    nsupe: nsupe,
    nsupset: nsupset,
    nsupseteq: nsupseteq,
    nsupseteqq: nsupseteqq,
    ntgl: ntgl,
    Ntilde: Ntilde,
    ntilde: ntilde,
    ntlg: ntlg,
    ntriangleleft: ntriangleleft,
    ntrianglelefteq: ntrianglelefteq,
    ntriangleright: ntriangleright,
    ntrianglerighteq: ntrianglerighteq,
    Nu: Nu,
    nu: nu,
    num: num,
    numero: numero,
    numsp: numsp,
    nvap: nvap,
    nvdash: nvdash,
    nvDash: nvDash,
    nVdash: nVdash,
    nVDash: nVDash,
    nvge: nvge,
    nvgt: nvgt,
    nvHarr: nvHarr,
    nvinfin: nvinfin,
    nvlArr: nvlArr,
    nvle: nvle,
    nvlt: nvlt,
    nvltrie: nvltrie,
    nvrArr: nvrArr,
    nvrtrie: nvrtrie,
    nvsim: nvsim,
    nwarhk: nwarhk,
    nwarr: nwarr,
    nwArr: nwArr,
    nwarrow: nwarrow,
    nwnear: nwnear,
    Oacute: Oacute,
    oacute: oacute,
    oast: oast,
    Ocirc: Ocirc,
    ocirc: ocirc,
    ocir: ocir,
    Ocy: Ocy,
    ocy: ocy,
    odash: odash,
    Odblac: Odblac,
    odblac: odblac,
    odiv: odiv,
    odot: odot,
    odsold: odsold,
    OElig: OElig,
    oelig: oelig,
    ofcir: ofcir,
    Ofr: Ofr,
    ofr: ofr,
    ogon: ogon,
    Ograve: Ograve,
    ograve: ograve,
    ogt: ogt,
    ohbar: ohbar,
    ohm: ohm,
    oint: oint,
    olarr: olarr,
    olcir: olcir,
    olcross: olcross,
    oline: oline,
    olt: olt,
    Omacr: Omacr,
    omacr: omacr,
    Omega: Omega,
    omega: omega,
    Omicron: Omicron,
    omicron: omicron,
    omid: omid,
    ominus: ominus,
    Oopf: Oopf,
    oopf: oopf,
    opar: opar,
    OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
    OpenCurlyQuote: OpenCurlyQuote,
    operp: operp,
    oplus: oplus,
    orarr: orarr,
    Or: Or,
    or: or,
    ord: ord,
    order: order,
    orderof: orderof,
    ordf: ordf,
    ordm: ordm,
    origof: origof,
    oror: oror,
    orslope: orslope,
    orv: orv,
    oS: oS,
    Oscr: Oscr,
    oscr: oscr,
    Oslash: Oslash,
    oslash: oslash,
    osol: osol,
    Otilde: Otilde,
    otilde: otilde,
    otimesas: otimesas,
    Otimes: Otimes,
    otimes: otimes,
    Ouml: Ouml,
    ouml: ouml,
    ovbar: ovbar,
    OverBar: OverBar,
    OverBrace: OverBrace,
    OverBracket: OverBracket,
    OverParenthesis: OverParenthesis,
    para: para,
    parallel: parallel,
    par: par,
    parsim: parsim,
    parsl: parsl,
    part: part,
    PartialD: PartialD,
    Pcy: Pcy,
    pcy: pcy,
    percnt: percnt,
    period: period,
    permil: permil,
    perp: perp,
    pertenk: pertenk,
    Pfr: Pfr,
    pfr: pfr,
    Phi: Phi,
    phi: phi,
    phiv: phiv,
    phmmat: phmmat,
    phone: phone,
    Pi: Pi,
    pi: pi,
    pitchfork: pitchfork,
    piv: piv,
    planck: planck,
    planckh: planckh,
    plankv: plankv,
    plusacir: plusacir,
    plusb: plusb,
    pluscir: pluscir,
    plus: plus,
    plusdo: plusdo,
    plusdu: plusdu,
    pluse: pluse,
    PlusMinus: PlusMinus,
    plusmn: plusmn,
    plussim: plussim,
    plustwo: plustwo,
    pm: pm,
    Poincareplane: Poincareplane,
    pointint: pointint,
    popf: popf,
    Popf: Popf,
    pound: pound,
    prap: prap,
    Pr: Pr,
    pr: pr,
    prcue: prcue,
    precapprox: precapprox,
    prec: prec,
    preccurlyeq: preccurlyeq,
    Precedes: Precedes,
    PrecedesEqual: PrecedesEqual,
    PrecedesSlantEqual: PrecedesSlantEqual,
    PrecedesTilde: PrecedesTilde,
    preceq: preceq,
    precnapprox: precnapprox,
    precneqq: precneqq,
    precnsim: precnsim,
    pre: pre,
    prE: prE,
    precsim: precsim,
    prime: prime,
    Prime: Prime,
    primes: primes,
    prnap: prnap,
    prnE: prnE,
    prnsim: prnsim,
    prod: prod,
    Product: Product,
    profalar: profalar,
    profline: profline,
    profsurf: profsurf,
    prop: prop,
    Proportional: Proportional,
    Proportion: Proportion,
    propto: propto,
    prsim: prsim,
    prurel: prurel,
    Pscr: Pscr,
    pscr: pscr,
    Psi: Psi,
    psi: psi,
    puncsp: puncsp,
    Qfr: Qfr,
    qfr: qfr,
    qint: qint,
    qopf: qopf,
    Qopf: Qopf,
    qprime: qprime,
    Qscr: Qscr,
    qscr: qscr,
    quaternions: quaternions,
    quatint: quatint,
    quest: quest,
    questeq: questeq,
    quot: quot,
    QUOT: QUOT,
    rAarr: rAarr,
    race: race,
    Racute: Racute,
    racute: racute,
    radic: radic,
    raemptyv: raemptyv,
    rang: rang,
    Rang: Rang,
    rangd: rangd,
    range: range,
    rangle: rangle,
    raquo: raquo,
    rarrap: rarrap,
    rarrb: rarrb,
    rarrbfs: rarrbfs,
    rarrc: rarrc,
    rarr: rarr,
    Rarr: Rarr,
    rArr: rArr,
    rarrfs: rarrfs,
    rarrhk: rarrhk,
    rarrlp: rarrlp,
    rarrpl: rarrpl,
    rarrsim: rarrsim,
    Rarrtl: Rarrtl,
    rarrtl: rarrtl,
    rarrw: rarrw,
    ratail: ratail,
    rAtail: rAtail,
    ratio: ratio,
    rationals: rationals,
    rbarr: rbarr,
    rBarr: rBarr,
    RBarr: RBarr,
    rbbrk: rbbrk,
    rbrace: rbrace,
    rbrack: rbrack,
    rbrke: rbrke,
    rbrksld: rbrksld,
    rbrkslu: rbrkslu,
    Rcaron: Rcaron,
    rcaron: rcaron,
    Rcedil: Rcedil,
    rcedil: rcedil,
    rceil: rceil,
    rcub: rcub,
    Rcy: Rcy,
    rcy: rcy,
    rdca: rdca,
    rdldhar: rdldhar,
    rdquo: rdquo,
    rdquor: rdquor,
    rdsh: rdsh,
    real: real,
    realine: realine,
    realpart: realpart,
    reals: reals,
    Re: Re,
    rect: rect,
    reg: reg,
    REG: REG,
    ReverseElement: ReverseElement,
    ReverseEquilibrium: ReverseEquilibrium,
    ReverseUpEquilibrium: ReverseUpEquilibrium,
    rfisht: rfisht,
    rfloor: rfloor,
    rfr: rfr,
    Rfr: Rfr,
    rHar: rHar,
    rhard: rhard,
    rharu: rharu,
    rharul: rharul,
    Rho: Rho,
    rho: rho,
    rhov: rhov,
    RightAngleBracket: RightAngleBracket,
    RightArrowBar: RightArrowBar,
    rightarrow: rightarrow,
    RightArrow: RightArrow,
    Rightarrow: Rightarrow,
    RightArrowLeftArrow: RightArrowLeftArrow,
    rightarrowtail: rightarrowtail,
    RightCeiling: RightCeiling,
    RightDoubleBracket: RightDoubleBracket,
    RightDownTeeVector: RightDownTeeVector,
    RightDownVectorBar: RightDownVectorBar,
    RightDownVector: RightDownVector,
    RightFloor: RightFloor,
    rightharpoondown: rightharpoondown,
    rightharpoonup: rightharpoonup,
    rightleftarrows: rightleftarrows,
    rightleftharpoons: rightleftharpoons,
    rightrightarrows: rightrightarrows,
    rightsquigarrow: rightsquigarrow,
    RightTeeArrow: RightTeeArrow,
    RightTee: RightTee,
    RightTeeVector: RightTeeVector,
    rightthreetimes: rightthreetimes,
    RightTriangleBar: RightTriangleBar,
    RightTriangle: RightTriangle,
    RightTriangleEqual: RightTriangleEqual,
    RightUpDownVector: RightUpDownVector,
    RightUpTeeVector: RightUpTeeVector,
    RightUpVectorBar: RightUpVectorBar,
    RightUpVector: RightUpVector,
    RightVectorBar: RightVectorBar,
    RightVector: RightVector,
    ring: ring,
    risingdotseq: risingdotseq,
    rlarr: rlarr,
    rlhar: rlhar,
    rlm: rlm,
    rmoustache: rmoustache,
    rmoust: rmoust,
    rnmid: rnmid,
    roang: roang,
    roarr: roarr,
    robrk: robrk,
    ropar: ropar,
    ropf: ropf,
    Ropf: Ropf,
    roplus: roplus,
    rotimes: rotimes,
    RoundImplies: RoundImplies,
    rpar: rpar,
    rpargt: rpargt,
    rppolint: rppolint,
    rrarr: rrarr,
    Rrightarrow: Rrightarrow,
    rsaquo: rsaquo,
    rscr: rscr,
    Rscr: Rscr,
    rsh: rsh,
    Rsh: Rsh,
    rsqb: rsqb,
    rsquo: rsquo,
    rsquor: rsquor,
    rthree: rthree,
    rtimes: rtimes,
    rtri: rtri,
    rtrie: rtrie,
    rtrif: rtrif,
    rtriltri: rtriltri,
    RuleDelayed: RuleDelayed,
    ruluhar: ruluhar,
    rx: rx,
    Sacute: Sacute,
    sacute: sacute,
    sbquo: sbquo,
    scap: scap,
    Scaron: Scaron,
    scaron: scaron,
    Sc: Sc,
    sc: sc,
    sccue: sccue,
    sce: sce,
    scE: scE,
    Scedil: Scedil,
    scedil: scedil,
    Scirc: Scirc,
    scirc: scirc,
    scnap: scnap,
    scnE: scnE,
    scnsim: scnsim,
    scpolint: scpolint,
    scsim: scsim,
    Scy: Scy,
    scy: scy,
    sdotb: sdotb,
    sdot: sdot,
    sdote: sdote,
    searhk: searhk,
    searr: searr,
    seArr: seArr,
    searrow: searrow,
    sect: sect,
    semi: semi,
    seswar: seswar,
    setminus: setminus,
    setmn: setmn,
    sext: sext,
    Sfr: Sfr,
    sfr: sfr,
    sfrown: sfrown,
    sharp: sharp,
    SHCHcy: SHCHcy,
    shchcy: shchcy,
    SHcy: SHcy,
    shcy: shcy,
    ShortDownArrow: ShortDownArrow,
    ShortLeftArrow: ShortLeftArrow,
    shortmid: shortmid,
    shortparallel: shortparallel,
    ShortRightArrow: ShortRightArrow,
    ShortUpArrow: ShortUpArrow,
    shy: shy,
    Sigma: Sigma,
    sigma: sigma,
    sigmaf: sigmaf,
    sigmav: sigmav,
    sim: sim,
    simdot: simdot,
    sime: sime,
    simeq: simeq,
    simg: simg,
    simgE: simgE,
    siml: siml,
    simlE: simlE,
    simne: simne,
    simplus: simplus,
    simrarr: simrarr,
    slarr: slarr,
    SmallCircle: SmallCircle,
    smallsetminus: smallsetminus,
    smashp: smashp,
    smeparsl: smeparsl,
    smid: smid,
    smile: smile,
    smt: smt,
    smte: smte,
    smtes: smtes,
    SOFTcy: SOFTcy,
    softcy: softcy,
    solbar: solbar,
    solb: solb,
    sol: sol,
    Sopf: Sopf,
    sopf: sopf,
    spades: spades,
    spadesuit: spadesuit,
    spar: spar,
    sqcap: sqcap,
    sqcaps: sqcaps,
    sqcup: sqcup,
    sqcups: sqcups,
    Sqrt: Sqrt,
    sqsub: sqsub,
    sqsube: sqsube,
    sqsubset: sqsubset,
    sqsubseteq: sqsubseteq,
    sqsup: sqsup,
    sqsupe: sqsupe,
    sqsupset: sqsupset,
    sqsupseteq: sqsupseteq,
    square: square,
    Square: Square,
    SquareIntersection: SquareIntersection,
    SquareSubset: SquareSubset,
    SquareSubsetEqual: SquareSubsetEqual,
    SquareSuperset: SquareSuperset,
    SquareSupersetEqual: SquareSupersetEqual,
    SquareUnion: SquareUnion,
    squarf: squarf,
    squ: squ,
    squf: squf,
    srarr: srarr,
    Sscr: Sscr,
    sscr: sscr,
    ssetmn: ssetmn,
    ssmile: ssmile,
    sstarf: sstarf,
    Star: Star,
    star: star,
    starf: starf,
    straightepsilon: straightepsilon,
    straightphi: straightphi,
    strns: strns,
    sub: sub,
    Sub: Sub,
    subdot: subdot,
    subE: subE,
    sube: sube,
    subedot: subedot,
    submult: submult,
    subnE: subnE,
    subne: subne,
    subplus: subplus,
    subrarr: subrarr,
    subset: subset,
    Subset: Subset,
    subseteq: subseteq,
    subseteqq: subseteqq,
    SubsetEqual: SubsetEqual,
    subsetneq: subsetneq,
    subsetneqq: subsetneqq,
    subsim: subsim,
    subsub: subsub,
    subsup: subsup,
    succapprox: succapprox,
    succ: succ,
    succcurlyeq: succcurlyeq,
    Succeeds: Succeeds,
    SucceedsEqual: SucceedsEqual,
    SucceedsSlantEqual: SucceedsSlantEqual,
    SucceedsTilde: SucceedsTilde,
    succeq: succeq,
    succnapprox: succnapprox,
    succneqq: succneqq,
    succnsim: succnsim,
    succsim: succsim,
    SuchThat: SuchThat,
    sum: sum,
    Sum: Sum,
    sung: sung,
    sup1: sup1,
    sup2: sup2,
    sup3: sup3,
    sup: sup,
    Sup: Sup,
    supdot: supdot,
    supdsub: supdsub,
    supE: supE,
    supe: supe,
    supedot: supedot,
    Superset: Superset,
    SupersetEqual: SupersetEqual,
    suphsol: suphsol,
    suphsub: suphsub,
    suplarr: suplarr,
    supmult: supmult,
    supnE: supnE,
    supne: supne,
    supplus: supplus,
    supset: supset,
    Supset: Supset,
    supseteq: supseteq,
    supseteqq: supseteqq,
    supsetneq: supsetneq,
    supsetneqq: supsetneqq,
    supsim: supsim,
    supsub: supsub,
    supsup: supsup,
    swarhk: swarhk,
    swarr: swarr,
    swArr: swArr,
    swarrow: swarrow,
    swnwar: swnwar,
    szlig: szlig,
    Tab: Tab,
    target: target,
    Tau: Tau,
    tau: tau,
    tbrk: tbrk,
    Tcaron: Tcaron,
    tcaron: tcaron,
    Tcedil: Tcedil,
    tcedil: tcedil,
    Tcy: Tcy,
    tcy: tcy,
    tdot: tdot,
    telrec: telrec,
    Tfr: Tfr,
    tfr: tfr,
    there4: there4,
    therefore: therefore,
    Therefore: Therefore,
    Theta: Theta,
    theta: theta,
    thetasym: thetasym,
    thetav: thetav,
    thickapprox: thickapprox,
    thicksim: thicksim,
    ThickSpace: ThickSpace,
    ThinSpace: ThinSpace,
    thinsp: thinsp,
    thkap: thkap,
    thksim: thksim,
    THORN: THORN,
    thorn: thorn,
    tilde: tilde,
    Tilde: Tilde,
    TildeEqual: TildeEqual,
    TildeFullEqual: TildeFullEqual,
    TildeTilde: TildeTilde,
    timesbar: timesbar,
    timesb: timesb,
    times: times,
    timesd: timesd,
    tint: tint,
    toea: toea,
    topbot: topbot,
    topcir: topcir,
    top: top,
    Topf: Topf,
    topf: topf,
    topfork: topfork,
    tosa: tosa,
    tprime: tprime,
    trade: trade,
    TRADE: TRADE,
    triangle: triangle,
    triangledown: triangledown,
    triangleleft: triangleleft,
    trianglelefteq: trianglelefteq,
    triangleq: triangleq,
    triangleright: triangleright,
    trianglerighteq: trianglerighteq,
    tridot: tridot,
    trie: trie,
    triminus: triminus,
    TripleDot: TripleDot,
    triplus: triplus,
    trisb: trisb,
    tritime: tritime,
    trpezium: trpezium,
    Tscr: Tscr,
    tscr: tscr,
    TScy: TScy,
    tscy: tscy,
    TSHcy: TSHcy,
    tshcy: tshcy,
    Tstrok: Tstrok,
    tstrok: tstrok,
    twixt: twixt,
    twoheadleftarrow: twoheadleftarrow,
    twoheadrightarrow: twoheadrightarrow,
    Uacute: Uacute,
    uacute: uacute,
    uarr: uarr,
    Uarr: Uarr,
    uArr: uArr,
    Uarrocir: Uarrocir,
    Ubrcy: Ubrcy,
    ubrcy: ubrcy,
    Ubreve: Ubreve,
    ubreve: ubreve,
    Ucirc: Ucirc,
    ucirc: ucirc,
    Ucy: Ucy,
    ucy: ucy,
    udarr: udarr,
    Udblac: Udblac,
    udblac: udblac,
    udhar: udhar,
    ufisht: ufisht,
    Ufr: Ufr,
    ufr: ufr,
    Ugrave: Ugrave,
    ugrave: ugrave,
    uHar: uHar,
    uharl: uharl,
    uharr: uharr,
    uhblk: uhblk,
    ulcorn: ulcorn,
    ulcorner: ulcorner,
    ulcrop: ulcrop,
    ultri: ultri,
    Umacr: Umacr,
    umacr: umacr,
    uml: uml,
    UnderBar: UnderBar,
    UnderBrace: UnderBrace,
    UnderBracket: UnderBracket,
    UnderParenthesis: UnderParenthesis,
    Union: Union,
    UnionPlus: UnionPlus,
    Uogon: Uogon,
    uogon: uogon,
    Uopf: Uopf,
    uopf: uopf,
    UpArrowBar: UpArrowBar,
    uparrow: uparrow,
    UpArrow: UpArrow,
    Uparrow: Uparrow,
    UpArrowDownArrow: UpArrowDownArrow,
    updownarrow: updownarrow,
    UpDownArrow: UpDownArrow,
    Updownarrow: Updownarrow,
    UpEquilibrium: UpEquilibrium,
    upharpoonleft: upharpoonleft,
    upharpoonright: upharpoonright,
    uplus: uplus,
    UpperLeftArrow: UpperLeftArrow,
    UpperRightArrow: UpperRightArrow,
    upsi: upsi,
    Upsi: Upsi,
    upsih: upsih,
    Upsilon: Upsilon,
    upsilon: upsilon,
    UpTeeArrow: UpTeeArrow,
    UpTee: UpTee,
    upuparrows: upuparrows,
    urcorn: urcorn,
    urcorner: urcorner,
    urcrop: urcrop,
    Uring: Uring,
    uring: uring,
    urtri: urtri,
    Uscr: Uscr,
    uscr: uscr,
    utdot: utdot,
    Utilde: Utilde,
    utilde: utilde,
    utri: utri,
    utrif: utrif,
    uuarr: uuarr,
    Uuml: Uuml,
    uuml: uuml,
    uwangle: uwangle,
    vangrt: vangrt,
    varepsilon: varepsilon,
    varkappa: varkappa,
    varnothing: varnothing,
    varphi: varphi,
    varpi: varpi,
    varpropto: varpropto,
    varr: varr,
    vArr: vArr,
    varrho: varrho,
    varsigma: varsigma,
    varsubsetneq: varsubsetneq,
    varsubsetneqq: varsubsetneqq,
    varsupsetneq: varsupsetneq,
    varsupsetneqq: varsupsetneqq,
    vartheta: vartheta,
    vartriangleleft: vartriangleleft,
    vartriangleright: vartriangleright,
    vBar: vBar,
    Vbar: Vbar,
    vBarv: vBarv,
    Vcy: Vcy,
    vcy: vcy,
    vdash: vdash,
    vDash: vDash,
    Vdash: Vdash,
    VDash: VDash,
    Vdashl: Vdashl,
    veebar: veebar,
    vee: vee,
    Vee: Vee,
    veeeq: veeeq,
    vellip: vellip,
    verbar: verbar,
    Verbar: Verbar,
    vert: vert,
    Vert: Vert,
    VerticalBar: VerticalBar,
    VerticalLine: VerticalLine,
    VerticalSeparator: VerticalSeparator,
    VerticalTilde: VerticalTilde,
    VeryThinSpace: VeryThinSpace,
    Vfr: Vfr,
    vfr: vfr,
    vltri: vltri,
    vnsub: vnsub,
    vnsup: vnsup,
    Vopf: Vopf,
    vopf: vopf,
    vprop: vprop,
    vrtri: vrtri,
    Vscr: Vscr,
    vscr: vscr,
    vsubnE: vsubnE,
    vsubne: vsubne,
    vsupnE: vsupnE,
    vsupne: vsupne,
    Vvdash: Vvdash,
    vzigzag: vzigzag,
    Wcirc: Wcirc,
    wcirc: wcirc,
    wedbar: wedbar,
    wedge: wedge,
    Wedge: Wedge,
    wedgeq: wedgeq,
    weierp: weierp,
    Wfr: Wfr,
    wfr: wfr,
    Wopf: Wopf,
    wopf: wopf,
    wp: wp,
    wr: wr,
    wreath: wreath,
    Wscr: Wscr,
    wscr: wscr,
    xcap: xcap,
    xcirc: xcirc,
    xcup: xcup,
    xdtri: xdtri,
    Xfr: Xfr,
    xfr: xfr,
    xharr: xharr,
    xhArr: xhArr,
    Xi: Xi,
    xi: xi,
    xlarr: xlarr,
    xlArr: xlArr,
    xmap: xmap,
    xnis: xnis,
    xodot: xodot,
    Xopf: Xopf,
    xopf: xopf,
    xoplus: xoplus,
    xotime: xotime,
    xrarr: xrarr,
    xrArr: xrArr,
    Xscr: Xscr,
    xscr: xscr,
    xsqcup: xsqcup,
    xuplus: xuplus,
    xutri: xutri,
    xvee: xvee,
    xwedge: xwedge,
    Yacute: Yacute,
    yacute: yacute,
    YAcy: YAcy,
    yacy: yacy,
    Ycirc: Ycirc,
    ycirc: ycirc,
    Ycy: Ycy,
    ycy: ycy,
    yen: yen,
    Yfr: Yfr,
    yfr: yfr,
    YIcy: YIcy,
    yicy: yicy,
    Yopf: Yopf,
    yopf: yopf,
    Yscr: Yscr,
    yscr: yscr,
    YUcy: YUcy,
    yucy: yucy,
    yuml: yuml,
    Yuml: Yuml,
    Zacute: Zacute,
    zacute: zacute,
    Zcaron: Zcaron,
    zcaron: zcaron,
    Zcy: Zcy,
    zcy: zcy,
    Zdot: Zdot,
    zdot: zdot,
    zeetrf: zeetrf,
    ZeroWidthSpace: ZeroWidthSpace,
    Zeta: Zeta,
    zeta: zeta,
    zfr: zfr,
    Zfr: Zfr,
    ZHcy: ZHcy,
    zhcy: zhcy,
    zigrarr: zigrarr,
    zopf: zopf,
    Zopf: Zopf,
    Zscr: Zscr,
    zscr: zscr,
    zwj: zwj,
    zwnj: zwnj,
    'default': entities
  });
  var require$$0 = getCjsExportFromNamespace(entities$1);
  /*eslint quotes:0*/

  var entities$2 = require$$0;
  var regex = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
  var encodeCache = {}; // Create a lookup array where anything but characters in `chars` string
  // and alphanumeric chars is percent-encoded.
  //

  function getEncodeCache(exclude) {
    var i,
        ch,
        cache = encodeCache[exclude];

    if (cache) {
      return cache;
    }

    cache = encodeCache[exclude] = [];

    for (i = 0; i < 128; i++) {
      ch = String.fromCharCode(i);

      if (/^[0-9a-z]$/i.test(ch)) {
        // always allow unencoded alphanumeric characters
        cache.push(ch);
      } else {
        cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
      }
    }

    for (i = 0; i < exclude.length; i++) {
      cache[exclude.charCodeAt(i)] = exclude[i];
    }

    return cache;
  } // Encode unsafe characters with percent-encoding, skipping already
  // encoded sequences.
  //
  //  - string       - string to encode
  //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
  //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
  //


  function encode(string, exclude, keepEscaped) {
    var i,
        l,
        code,
        nextCode,
        cache,
        result = '';

    if (typeof exclude !== 'string') {
      // encode(string, keepEscaped)
      keepEscaped = exclude;
      exclude = encode.defaultChars;
    }

    if (typeof keepEscaped === 'undefined') {
      keepEscaped = true;
    }

    cache = getEncodeCache(exclude);

    for (i = 0, l = string.length; i < l; i++) {
      code = string.charCodeAt(i);

      if (keepEscaped && code === 0x25
      /* % */
      && i + 2 < l) {
        if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
          result += string.slice(i, i + 3);
          i += 2;
          continue;
        }
      }

      if (code < 128) {
        result += cache[code];
        continue;
      }

      if (code >= 0xD800 && code <= 0xDFFF) {
        if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
          nextCode = string.charCodeAt(i + 1);

          if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
            result += encodeURIComponent(string[i] + string[i + 1]);
            i++;
            continue;
          }
        }

        result += '%EF%BF%BD';
        continue;
      }

      result += encodeURIComponent(string[i]);
    }

    return result;
  }

  encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
  encode.componentChars = "-_.!~*'()";
  var encode_1 = encode;
  /* eslint-disable no-bitwise */

  var decodeCache = {};

  function getDecodeCache(exclude) {
    var i,
        ch,
        cache = decodeCache[exclude];

    if (cache) {
      return cache;
    }

    cache = decodeCache[exclude] = [];

    for (i = 0; i < 128; i++) {
      ch = String.fromCharCode(i);
      cache.push(ch);
    }

    for (i = 0; i < exclude.length; i++) {
      ch = exclude.charCodeAt(i);
      cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
    }

    return cache;
  } // Decode percent-encoded string.
  //


  function decode(string, exclude) {
    var cache;

    if (typeof exclude !== 'string') {
      exclude = decode.defaultChars;
    }

    cache = getDecodeCache(exclude);
    return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
      var i,
          l,
          b1,
          b2,
          b3,
          b4,
          chr,
          result = '';

      for (i = 0, l = seq.length; i < l; i += 3) {
        b1 = parseInt(seq.slice(i + 1, i + 3), 16);

        if (b1 < 0x80) {
          result += cache[b1];
          continue;
        }

        if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {
          // 110xxxxx 10xxxxxx
          b2 = parseInt(seq.slice(i + 4, i + 6), 16);

          if ((b2 & 0xC0) === 0x80) {
            chr = b1 << 6 & 0x7C0 | b2 & 0x3F;

            if (chr < 0x80) {
              result += '\ufffd\ufffd';
            } else {
              result += String.fromCharCode(chr);
            }

            i += 3;
            continue;
          }
        }

        if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {
          // 1110xxxx 10xxxxxx 10xxxxxx
          b2 = parseInt(seq.slice(i + 4, i + 6), 16);
          b3 = parseInt(seq.slice(i + 7, i + 9), 16);

          if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
            chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;

            if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) {
              result += '\ufffd\ufffd\ufffd';
            } else {
              result += String.fromCharCode(chr);
            }

            i += 6;
            continue;
          }
        }

        if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {
          // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
          b2 = parseInt(seq.slice(i + 4, i + 6), 16);
          b3 = parseInt(seq.slice(i + 7, i + 9), 16);
          b4 = parseInt(seq.slice(i + 10, i + 12), 16);

          if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
            chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;

            if (chr < 0x10000 || chr > 0x10FFFF) {
              result += '\ufffd\ufffd\ufffd\ufffd';
            } else {
              chr -= 0x10000;
              result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
            }

            i += 9;
            continue;
          }
        }

        result += '\ufffd';
      }

      return result;
    });
  }

  decode.defaultChars = ';/?:@&=+$,#';
  decode.componentChars = '';
  var decode_1 = decode;

  var format = function format(url) {
    var result = '';
    result += url.protocol || '';
    result += url.slashes ? '//' : '';
    result += url.auth ? url.auth + '@' : '';

    if (url.hostname && url.hostname.indexOf(':') !== -1) {
      // ipv6 address
      result += '[' + url.hostname + ']';
    } else {
      result += url.hostname || '';
    }

    result += url.port ? ':' + url.port : '';
    result += url.pathname || '';
    result += url.search || '';
    result += url.hash || '';
    return result;
  }; // Copyright Joyent, Inc. and other Node contributors.
  //
  // Changes from joyent/node:
  //
  // 1. No leading slash in paths,
  //    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
  //
  // 2. Backslashes are not replaced with slashes,
  //    so `http:\\example.org\` is treated like a relative path
  //
  // 3. Trailing colon is treated like a part of the path,
  //    i.e. in `http://example.org:foo` pathname is `:foo`
  //
  // 4. Nothing is URL-encoded in the resulting object,
  //    (in joyent/node some chars in auth and paths are encoded)
  //
  // 5. `url.parse()` does not have `parseQueryString` argument
  //
  // 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
  //    which can be constructed using other parts of the url.
  //


  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.pathname = null;
  } // Reference: RFC 3986, RFC 1808, RFC 2396
  // define these here so at least they only have to be
  // compiled once on the first module load.


  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,
      // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
      // RFC 2396: characters reserved for delimiting URLs.
  // We actually just auto-escape these.
  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
      // RFC 2396: characters not allowed for various reasons.
  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
  // Note that any invalid chars are also handled, but these
  // are the ones that are *expected* to be seen, so we fast-path
  // them.
  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.

  /* eslint-disable no-script-url */
  // protocols that never have a hostname.
  hostlessProtocol = {
    'javascript': true,
    'javascript:': true
  },
      // protocols that always contain a // bit.
  slashedProtocol = {
    'http': true,
    'https': true,
    'ftp': true,
    'gopher': true,
    'file': true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  };
  /* eslint-enable no-script-url */

  function urlParse(url, slashesDenoteHost) {
    if (url && url instanceof Url) {
      return url;
    }

    var u = new Url();
    u.parse(url, slashesDenoteHost);
    return u;
  }

  Url.prototype.parse = function (url, slashesDenoteHost) {
    var i,
        l,
        lowerProto,
        hec,
        slashes,
        rest = url; // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"

    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);

      if (simplePath) {
        this.pathname = simplePath[1];

        if (simplePath[2]) {
          this.search = simplePath[2];
        }

        return this;
      }
    }

    var proto = protocolPattern.exec(rest);

    if (proto) {
      proto = proto[0];
      lowerProto = proto.toLowerCase();
      this.protocol = proto;
      rest = rest.substr(proto.length);
    } // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.


    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      slashes = rest.substr(0, 2) === '//';

      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }

    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c
      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.
      // find the first instance of any hostEndingChars
      var hostEnd = -1;

      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);

        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      } // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.


      var auth, atSign;

      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      } // Now we have a portion which is definitely the auth.
      // Pull that off.


      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = auth;
      } // the host is the remaining to the left of the first non-host char


      hostEnd = -1;

      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);

        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
          hostEnd = hec;
        }
      } // if we still have not hit it, then the entire thing is a host.


      if (hostEnd === -1) {
        hostEnd = rest.length;
      }

      if (rest[hostEnd - 1] === ':') {
        hostEnd--;
      }

      var host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd); // pull out port.

      this.parseHost(host); // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.

      this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.

      var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);

        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];

          if (!part) {
            continue;
          }

          if (!part.match(hostnamePartPattern)) {
            var newpart = '';

            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            } // we test again with ASCII char only


            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);

              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }

              if (notHost.length) {
                rest = notHost.join('.') + rest;
              }

              this.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      } // strip [ and ] from the hostname
      // the host field still retains them, though


      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      }
    } // chop off from the tail first.


    var hash = rest.indexOf('#');

    if (hash !== -1) {
      // got a fragment string.
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }

    var qm = rest.indexOf('?');

    if (qm !== -1) {
      this.search = rest.substr(qm);
      rest = rest.slice(0, qm);
    }

    if (rest) {
      this.pathname = rest;
    }

    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
      this.pathname = '';
    }

    return this;
  };

  Url.prototype.parseHost = function (host) {
    var port = portPattern.exec(host);

    if (port) {
      port = port[0];

      if (port !== ':') {
        this.port = port.substr(1);
      }

      host = host.substr(0, host.length - port.length);
    }

    if (host) {
      this.hostname = host;
    }
  };

  var parse = urlParse;
  var encode$1 = encode_1;
  var decode$1 = decode_1;
  var format$1 = format;
  var parse$1 = parse;
  var mdurl = {
    encode: encode$1,
    decode: decode$1,
    format: format$1,
    parse: parse$1
  };
  var regex$1 = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  var regex$2 = /[\0-\x1F\x7F-\x9F]/;
  var regex$3 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
  var regex$4 = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
  var Any = regex$1;
  var Cc = regex$2;
  var Cf = regex$3;
  var P = regex;
  var Z = regex$4;
  var uc_micro = {
    Any: Any,
    Cc: Cc,
    Cf: Cf,
    P: P,
    Z: Z
  };
  var utils = createCommonjsModule(function (module, exports) {
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }

    function isString(obj) {
      return _class(obj) === '[object String]';
    }

    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    function has(object, key) {
      return _hasOwnProperty.call(object, key);
    } // Merge objects
    //


    function assign(obj
    /*from1, from2, from3, ...*/
    ) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function (source) {
        if (!source) {
          return;
        }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be object');
        }

        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });
      return obj;
    } // Remove element from array and put another array at those position.
    // Useful for some operations with tokens


    function arrayReplaceAt(src, pos, newElements) {
      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
    } ////////////////////////////////////////////////////////////////////////////////


    function isValidEntityCode(c) {
      /*eslint no-bitwise:0*/
      // broken sequence
      if (c >= 0xD800 && c <= 0xDFFF) {
        return false;
      } // never used


      if (c >= 0xFDD0 && c <= 0xFDEF) {
        return false;
      }

      if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {
        return false;
      } // control codes


      if (c >= 0x00 && c <= 0x08) {
        return false;
      }

      if (c === 0x0B) {
        return false;
      }

      if (c >= 0x0E && c <= 0x1F) {
        return false;
      }

      if (c >= 0x7F && c <= 0x9F) {
        return false;
      } // out of range


      if (c > 0x10FFFF) {
        return false;
      }

      return true;
    }

    function fromCodePoint(c) {
      /*eslint no-bitwise:0*/
      if (c > 0xffff) {
        c -= 0x10000;
        var surrogate1 = 0xd800 + (c >> 10),
            surrogate2 = 0xdc00 + (c & 0x3ff);
        return String.fromCharCode(surrogate1, surrogate2);
      }

      return String.fromCharCode(c);
    }

    var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');
    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;

    function replaceEntityPattern(match, name) {
      var code = 0;

      if (has(entities$2, name)) {
        return entities$2[name];
      }

      if (name.charCodeAt(0) === 0x23
      /* # */
      && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);

        if (isValidEntityCode(code)) {
          return fromCodePoint(code);
        }
      }

      return match;
    }
    /*function replaceEntities(str) {
      if (str.indexOf('&') < 0) { return str; }
    	  return str.replace(ENTITY_RE, replaceEntityPattern);
    }*/


    function unescapeMd(str) {
      if (str.indexOf('\\') < 0) {
        return str;
      }

      return str.replace(UNESCAPE_MD_RE, '$1');
    }

    function unescapeAll(str) {
      if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) {
        return str;
      }

      return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
        if (escaped) {
          return escaped;
        }

        return replaceEntityPattern(match, entity);
      });
    } ////////////////////////////////////////////////////////////////////////////////


    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;'
    };

    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }

    function escapeHtml(str) {
      if (HTML_ESCAPE_TEST_RE.test(str)) {
        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }

      return str;
    } ////////////////////////////////////////////////////////////////////////////////


    var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

    function escapeRE(str) {
      return str.replace(REGEXP_ESCAPE_RE, '\\$&');
    } ////////////////////////////////////////////////////////////////////////////////


    function isSpace(code) {
      switch (code) {
        case 0x09:
        case 0x20:
          return true;
      }

      return false;
    } // Zs (unicode class) || [\t\f\v\r\n]


    function isWhiteSpace(code) {
      if (code >= 0x2000 && code <= 0x200A) {
        return true;
      }

      switch (code) {
        case 0x09: // \t

        case 0x0A: // \n

        case 0x0B: // \v

        case 0x0C: // \f

        case 0x0D: // \r

        case 0x20:
        case 0xA0:
        case 0x1680:
        case 0x202F:
        case 0x205F:
        case 0x3000:
          return true;
      }

      return false;
    } ////////////////////////////////////////////////////////////////////////////////

    /*eslint-disable max-len*/
    // Currently without astral characters support.


    function isPunctChar(ch) {
      return regex.test(ch);
    } // Markdown ASCII punctuation characters.
    //
    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character
    //
    // Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
    //


    function isMdAsciiPunct(ch) {
      switch (ch) {
        case 0x21
        /* ! */
        :
        case 0x22
        /* " */
        :
        case 0x23
        /* # */
        :
        case 0x24
        /* $ */
        :
        case 0x25
        /* % */
        :
        case 0x26
        /* & */
        :
        case 0x27
        /* ' */
        :
        case 0x28
        /* ( */
        :
        case 0x29
        /* ) */
        :
        case 0x2A
        /* * */
        :
        case 0x2B
        /* + */
        :
        case 0x2C
        /* , */
        :
        case 0x2D
        /* - */
        :
        case 0x2E
        /* . */
        :
        case 0x2F
        /* / */
        :
        case 0x3A
        /* : */
        :
        case 0x3B
        /* ; */
        :
        case 0x3C
        /* < */
        :
        case 0x3D
        /* = */
        :
        case 0x3E
        /* > */
        :
        case 0x3F
        /* ? */
        :
        case 0x40
        /* @ */
        :
        case 0x5B
        /* [ */
        :
        case 0x5C
        /* \ */
        :
        case 0x5D
        /* ] */
        :
        case 0x5E
        /* ^ */
        :
        case 0x5F
        /* _ */
        :
        case 0x60
        /* ` */
        :
        case 0x7B
        /* { */
        :
        case 0x7C
        /* | */
        :
        case 0x7D
        /* } */
        :
        case 0x7E
        /* ~ */
        :
          return true;

        default:
          return false;
      }
    } // Hepler to unify [reference labels].
    //


    function normalizeReference(str) {
      // Trim and collapse whitespace
      //
      str = str.trim().replace(/\s+/g, ' '); // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
      // fixed in v12 (couldn't find any details).
      //
      // So treat this one as a special case
      // (remove this when node v10 is no longer supported).
      //

      if ('ẞ'.toLowerCase() === 'Ṿ') {
        str = str.replace(/ẞ/g, 'ß');
      } // .toLowerCase().toUpperCase() should get rid of all differences
      // between letter variants.
      //
      // Simple .toLowerCase() doesn't normalize 125 code points correctly,
      // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
      // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
      // uppercased versions).
      //
      // Here's an example showing how it happens. Lets take greek letter omega:
      // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
      //
      // Unicode entries:
      // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
      // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
      // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
      // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
      //
      // Case-insensitive comparison should treat all of them as equivalent.
      //
      // But .toLowerCase() doesn't change ϑ (it's already lowercase),
      // and .toUpperCase() doesn't change ϴ (already uppercase).
      //
      // Applying first lower then upper case normalizes any character:
      // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
      //
      // Note: this is equivalent to unicode case folding; unicode normalization
      // is a different step that is not required here.
      //
      // Final result should be uppercased, because it's later stored in an object
      // (this avoid a conflict with Object.prototype members,
      // most notably, `__proto__`)
      //


      return str.toLowerCase().toUpperCase();
    } ////////////////////////////////////////////////////////////////////////////////
    // Re-export libraries commonly used in both markdown-it and its plugins,
    // so plugins won't have to depend on them explicitly, which reduces their
    // bundled size (e.g. a browser build).
    //


    exports.lib = {};
    exports.lib.mdurl = mdurl;
    exports.lib.ucmicro = uc_micro;
    exports.assign = assign;
    exports.isString = isString;
    exports.has = has;
    exports.unescapeMd = unescapeMd;
    exports.unescapeAll = unescapeAll;
    exports.isValidEntityCode = isValidEntityCode;
    exports.fromCodePoint = fromCodePoint; // exports.replaceEntities     = replaceEntities;

    exports.escapeHtml = escapeHtml;
    exports.arrayReplaceAt = arrayReplaceAt;
    exports.isSpace = isSpace;
    exports.isWhiteSpace = isWhiteSpace;
    exports.isMdAsciiPunct = isMdAsciiPunct;
    exports.isPunctChar = isPunctChar;
    exports.escapeRE = escapeRE;
    exports.normalizeReference = normalizeReference;
  });
  var utils_1 = utils.lib;
  var utils_2 = utils.assign;
  var utils_3 = utils.isString;
  var utils_4 = utils.has;
  var utils_5 = utils.unescapeMd;
  var utils_6 = utils.unescapeAll;
  var utils_7 = utils.isValidEntityCode;
  var utils_8 = utils.fromCodePoint;
  var utils_9 = utils.escapeHtml;
  var utils_10 = utils.arrayReplaceAt;
  var utils_11 = utils.isSpace;
  var utils_12 = utils.isWhiteSpace;
  var utils_13 = utils.isMdAsciiPunct;
  var utils_14 = utils.isPunctChar;
  var utils_15 = utils.escapeRE;
  var utils_16 = utils.normalizeReference; // Parse link label

  var parse_link_label = function parseLinkLabel(state, start, disableNested) {
    var level,
        found,
        marker,
        prevPos,
        labelEnd = -1,
        max = state.posMax,
        oldPos = state.pos;
    state.pos = start + 1;
    level = 1;

    while (state.pos < max) {
      marker = state.src.charCodeAt(state.pos);

      if (marker === 0x5D
      /* ] */
      ) {
          level--;

          if (level === 0) {
            found = true;
            break;
          }
        }

      prevPos = state.pos;
      state.md.inline.skipToken(state);

      if (marker === 0x5B
      /* [ */
      ) {
          if (prevPos === state.pos - 1) {
            // increase level if we find text `[`, which is not a part of any token
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
    }

    if (found) {
      labelEnd = state.pos;
    } // restore old state


    state.pos = oldPos;
    return labelEnd;
  };

  var unescapeAll = utils.unescapeAll;

  var parse_link_destination = function parseLinkDestination(str, pos, max) {
    var code,
        level,
        lines = 0,
        start = pos,
        result = {
      ok: false,
      pos: 0,
      lines: 0,
      str: ''
    };

    if (str.charCodeAt(pos) === 0x3C
    /* < */
    ) {
        pos++;

        while (pos < max) {
          code = str.charCodeAt(pos);

          if (code === 0x0A
          /* \n */
          ) {
              return result;
            }

          if (code === 0x3E
          /* > */
          ) {
              result.pos = pos + 1;
              result.str = unescapeAll(str.slice(start + 1, pos));
              result.ok = true;
              return result;
            }

          if (code === 0x5C
          /* \ */
          && pos + 1 < max) {
            pos += 2;
            continue;
          }

          pos++;
        } // no closing '>'


        return result;
      } // this should be ... } else { ... branch


    level = 0;

    while (pos < max) {
      code = str.charCodeAt(pos);

      if (code === 0x20) {
        break;
      } // ascii control characters


      if (code < 0x20 || code === 0x7F) {
        break;
      }

      if (code === 0x5C
      /* \ */
      && pos + 1 < max) {
        pos += 2;
        continue;
      }

      if (code === 0x28
      /* ( */
      ) {
          level++;
        }

      if (code === 0x29
      /* ) */
      ) {
          if (level === 0) {
            break;
          }

          level--;
        }

      pos++;
    }

    if (start === pos) {
      return result;
    }

    if (level !== 0) {
      return result;
    }

    result.str = unescapeAll(str.slice(start, pos));
    result.lines = lines;
    result.pos = pos;
    result.ok = true;
    return result;
  };

  var unescapeAll$1 = utils.unescapeAll;

  var parse_link_title = function parseLinkTitle(str, pos, max) {
    var code,
        marker,
        lines = 0,
        start = pos,
        result = {
      ok: false,
      pos: 0,
      lines: 0,
      str: ''
    };

    if (pos >= max) {
      return result;
    }

    marker = str.charCodeAt(pos);

    if (marker !== 0x22
    /* " */
    && marker !== 0x27
    /* ' */
    && marker !== 0x28
    /* ( */
    ) {
        return result;
      }

    pos++; // if opening marker is "(", switch it to closing marker ")"

    if (marker === 0x28) {
      marker = 0x29;
    }

    while (pos < max) {
      code = str.charCodeAt(pos);

      if (code === marker) {
        result.pos = pos + 1;
        result.lines = lines;
        result.str = unescapeAll$1(str.slice(start + 1, pos));
        result.ok = true;
        return result;
      } else if (code === 0x0A) {
        lines++;
      } else if (code === 0x5C
      /* \ */
      && pos + 1 < max) {
        pos++;

        if (str.charCodeAt(pos) === 0x0A) {
          lines++;
        }
      }

      pos++;
    }

    return result;
  };

  var parseLinkLabel = parse_link_label;
  var parseLinkDestination = parse_link_destination;
  var parseLinkTitle = parse_link_title;
  var helpers = {
    parseLinkLabel: parseLinkLabel,
    parseLinkDestination: parseLinkDestination,
    parseLinkTitle: parseLinkTitle
  };
  var assign = utils.assign;
  var unescapeAll$2 = utils.unescapeAll;
  var escapeHtml = utils.escapeHtml; ////////////////////////////////////////////////////////////////////////////////

  var default_rules = {};

  default_rules.code_inline = function (tokens, idx, options, env, slf) {
    var token = tokens[idx];
    return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(tokens[idx].content) + '</code>';
  };

  default_rules.code_block = function (tokens, idx, options, env, slf) {
    var token = tokens[idx];
    return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\n';
  };

  default_rules.fence = function (tokens, idx, options, env, slf) {
    var token = tokens[idx],
        info = token.info ? unescapeAll$2(token.info).trim() : '',
        langName = '',
        highlighted,
        i,
        tmpAttrs,
        tmpToken;

    if (info) {
      langName = info.split(/\s+/g)[0];
    }

    if (options.highlight) {
      highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);
    } else {
      highlighted = escapeHtml(token.content);
    }

    if (highlighted.indexOf('<pre') === 0) {
      return highlighted + '\n';
    } // If language exists, inject class gently, without modifying original token.
    // May be, one day we will add .clone() for token and simplify this part, but
    // now we prefer to keep things local.


    if (info) {
      i = token.attrIndex('class');
      tmpAttrs = token.attrs ? token.attrs.slice() : [];

      if (i < 0) {
        tmpAttrs.push(['class', options.langPrefix + langName]);
      } else {
        tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
      } // Fake token just to render attributes


      tmpToken = {
        attrs: tmpAttrs
      };
      return '<pre><code' + slf.renderAttrs(tmpToken) + '>' + highlighted + '</code></pre>\n';
    }

    return '<pre><code' + slf.renderAttrs(token) + '>' + highlighted + '</code></pre>\n';
  };

  default_rules.image = function (tokens, idx, options, env, slf) {
    var token = tokens[idx]; // "alt" attr MUST be set, even if empty. Because it's mandatory and
    // should be placed on proper position for tests.
    //
    // Replace content with actual value

    token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);
    return slf.renderToken(tokens, idx, options);
  };

  default_rules.hardbreak = function (tokens, idx, options
  /*, env */
  ) {
    return options.xhtmlOut ? '<br />\n' : '<br>\n';
  };

  default_rules.softbreak = function (tokens, idx, options
  /*, env */
  ) {
    return options.breaks ? options.xhtmlOut ? '<br />\n' : '<br>\n' : '\n';
  };

  default_rules.text = function (tokens, idx
  /*, options, env */
  ) {
    return escapeHtml(tokens[idx].content);
  };

  default_rules.html_block = function (tokens, idx
  /*, options, env */
  ) {
    return tokens[idx].content;
  };

  default_rules.html_inline = function (tokens, idx
  /*, options, env */
  ) {
    return tokens[idx].content;
  };
  /**
   * new Renderer()
   *
   * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
   **/


  function Renderer() {
    /**
     * Renderer#rules -> Object
     *
     * Contains render rules for tokens. Can be updated and extended.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.renderer.rules.strong_open  = function () { return '<b>'; };
     * md.renderer.rules.strong_close = function () { return '</b>'; };
     *
     * var result = md.renderInline(...);
     * ```
     *
     * Each rule is called as independent static function with fixed signature:
     *
     * ```javascript
     * function my_token_render(tokens, idx, options, env, renderer) {
     *   // ...
     *   return renderedHTML;
     * }
     * ```
     *
     * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
     * for more details and examples.
     **/
    this.rules = assign({}, default_rules);
  }
  /**
   * Renderer.renderAttrs(token) -> String
   *
   * Render token attributes to string.
   **/


  Renderer.prototype.renderAttrs = function renderAttrs(token) {
    var i, l, result;

    if (!token.attrs) {
      return '';
    }

    result = '';

    for (i = 0, l = token.attrs.length; i < l; i++) {
      result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
    }

    return result;
  };
  /**
   * Renderer.renderToken(tokens, idx, options) -> String
   * - tokens (Array): list of tokens
   * - idx (Numbed): token index to render
   * - options (Object): params of parser instance
   *
   * Default token renderer. Can be overriden by custom function
   * in [[Renderer#rules]].
   **/


  Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
    var nextToken,
        result = '',
        needLf = false,
        token = tokens[idx]; // Tight list paragraphs

    if (token.hidden) {
      return '';
    } // Insert a newline between hidden paragraph and subsequent opening
    // block-level tag.
    //
    // For example, here we should insert a newline before blockquote:
    //  - a
    //    >
    //


    if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
      result += '\n';
    } // Add token name, e.g. `<img`


    result += (token.nesting === -1 ? '</' : '<') + token.tag; // Encode attributes, e.g. `<img src="foo"`

    result += this.renderAttrs(token); // Add a slash for self-closing tags, e.g. `<img src="foo" /`

    if (token.nesting === 0 && options.xhtmlOut) {
      result += ' /';
    } // Check if we need to add a newline after this tag


    if (token.block) {
      needLf = true;

      if (token.nesting === 1) {
        if (idx + 1 < tokens.length) {
          nextToken = tokens[idx + 1];

          if (nextToken.type === 'inline' || nextToken.hidden) {
            // Block-level tag containing an inline tag.
            //
            needLf = false;
          } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
            // Opening tag + closing tag of the same type. E.g. `<li></li>`.
            //
            needLf = false;
          }
        }
      }
    }

    result += needLf ? '>\n' : '>';
    return result;
  };
  /**
   * Renderer.renderInline(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to renter
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * The same as [[Renderer.render]], but for single token of `inline` type.
   **/


  Renderer.prototype.renderInline = function (tokens, options, env) {
    var type,
        result = '',
        rules = this.rules;

    for (var i = 0, len = tokens.length; i < len; i++) {
      type = tokens[i].type;

      if (typeof rules[type] !== 'undefined') {
        result += rules[type](tokens, i, options, env, this);
      } else {
        result += this.renderToken(tokens, i, options);
      }
    }

    return result;
  };
  /** internal
   * Renderer.renderInlineAsText(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to renter
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * Special kludge for image `alt` attributes to conform CommonMark spec.
   * Don't try to use it! Spec requires to show `alt` content with stripped markup,
   * instead of simple escaping.
   **/


  Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
    var result = '';

    for (var i = 0, len = tokens.length; i < len; i++) {
      if (tokens[i].type === 'text') {
        result += tokens[i].content;
      } else if (tokens[i].type === 'image') {
        result += this.renderInlineAsText(tokens[i].children, options, env);
      }
    }

    return result;
  };
  /**
   * Renderer.render(tokens, options, env) -> String
   * - tokens (Array): list on block tokens to renter
   * - options (Object): params of parser instance
   * - env (Object): additional data from parsed input (references, for example)
   *
   * Takes token stream and generates HTML. Probably, you will never need to call
   * this method directly.
   **/


  Renderer.prototype.render = function (tokens, options, env) {
    var i,
        len,
        type,
        result = '',
        rules = this.rules;

    for (i = 0, len = tokens.length; i < len; i++) {
      type = tokens[i].type;

      if (type === 'inline') {
        result += this.renderInline(tokens[i].children, options, env);
      } else if (typeof rules[type] !== 'undefined') {
        result += rules[tokens[i].type](tokens, i, options, env, this);
      } else {
        result += this.renderToken(tokens, i, options, env);
      }
    }

    return result;
  };

  var renderer = Renderer;
  /**
   * class Ruler
   *
   * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
   * [[MarkdownIt#inline]] to manage sequences of functions (rules):
   *
   * - keep rules in defined order
   * - assign the name to each rule
   * - enable/disable rules
   * - add/replace rules
   * - allow assign rules to additional named chains (in the same)
   * - cacheing lists of active rules
   *
   * You will not need use this class directly until write plugins. For simple
   * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
   * [[MarkdownIt.use]].
   **/

  /**
   * new Ruler()
   **/

  function Ruler() {
    // List of added rules. Each element is:
    //
    // {
    //   name: XXX,
    //   enabled: Boolean,
    //   fn: Function(),
    //   alt: [ name2, name3 ]
    // }
    //
    this.__rules__ = []; // Cached rule chains.
    //
    // First level - chain name, '' for default.
    // Second level - diginal anchor for fast filtering by charcodes.
    //

    this.__cache__ = null;
  } ////////////////////////////////////////////////////////////////////////////////
  // Helper methods, should not be used directly
  // Find rule index by name
  //


  Ruler.prototype.__find__ = function (name) {
    for (var i = 0; i < this.__rules__.length; i++) {
      if (this.__rules__[i].name === name) {
        return i;
      }
    }

    return -1;
  }; // Build rules lookup cache
  //


  Ruler.prototype.__compile__ = function () {
    var self = this;
    var chains = ['']; // collect unique names

    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) {
        return;
      }

      rule.alt.forEach(function (altName) {
        if (chains.indexOf(altName) < 0) {
          chains.push(altName);
        }
      });
    });

    self.__cache__ = {};
    chains.forEach(function (chain) {
      self.__cache__[chain] = [];

      self.__rules__.forEach(function (rule) {
        if (!rule.enabled) {
          return;
        }

        if (chain && rule.alt.indexOf(chain) < 0) {
          return;
        }

        self.__cache__[chain].push(rule.fn);
      });
    });
  };
  /**
   * Ruler.at(name, fn [, options])
   * - name (String): rule name to replace.
   * - fn (Function): new rule function.
   * - options (Object): new rule options (not mandatory).
   *
   * Replace rule by name with new function & options. Throws error if name not
   * found.
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * Replace existing typographer replacement rule with new one:
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.core.ruler.at('replacements', function replace(state) {
   *   //...
   * });
   * ```
   **/


  Ruler.prototype.at = function (name, fn, options) {
    var index = this.__find__(name);

    var opt = options || {};

    if (index === -1) {
      throw new Error('Parser rule not found: ' + name);
    }

    this.__rules__[index].fn = fn;
    this.__rules__[index].alt = opt.alt || [];
    this.__cache__ = null;
  };
  /**
   * Ruler.before(beforeName, ruleName, fn [, options])
   * - beforeName (String): new rule will be added before this one.
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Add new rule to chain before one with given name. See also
   * [[Ruler.after]], [[Ruler.push]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/


  Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
    var index = this.__find__(beforeName);

    var opt = options || {};

    if (index === -1) {
      throw new Error('Parser rule not found: ' + beforeName);
    }

    this.__rules__.splice(index, 0, {
      name: ruleName,
      enabled: true,
      fn: fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };
  /**
   * Ruler.after(afterName, ruleName, fn [, options])
   * - afterName (String): new rule will be added after this one.
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Add new rule to chain after one with given name. See also
   * [[Ruler.before]], [[Ruler.push]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.inline.ruler.after('text', 'my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/


  Ruler.prototype.after = function (afterName, ruleName, fn, options) {
    var index = this.__find__(afterName);

    var opt = options || {};

    if (index === -1) {
      throw new Error('Parser rule not found: ' + afterName);
    }

    this.__rules__.splice(index + 1, 0, {
      name: ruleName,
      enabled: true,
      fn: fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };
  /**
   * Ruler.push(ruleName, fn [, options])
   * - ruleName (String): name of added rule.
   * - fn (Function): rule function.
   * - options (Object): rule options (not mandatory).
   *
   * Push new rule to the end of chain. See also
   * [[Ruler.before]], [[Ruler.after]].
   *
   * ##### Options:
   *
   * - __alt__ - array with names of "alternate" chains.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.core.ruler.push('my_rule', function replace(state) {
   *   //...
   * });
   * ```
   **/


  Ruler.prototype.push = function (ruleName, fn, options) {
    var opt = options || {};

    this.__rules__.push({
      name: ruleName,
      enabled: true,
      fn: fn,
      alt: opt.alt || []
    });

    this.__cache__ = null;
  };
  /**
   * Ruler.enable(list [, ignoreInvalid]) -> Array
   * - list (String|Array): list of rule names to enable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable rules with given names. If any rule name not found - throw Error.
   * Errors can be disabled by second param.
   *
   * Returns list of found rule names (if no exception happened).
   *
   * See also [[Ruler.disable]], [[Ruler.enableOnly]].
   **/


  Ruler.prototype.enable = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) {
      list = [list];
    }

    var result = []; // Search by name and enable

    list.forEach(function (name) {
      var idx = this.__find__(name);

      if (idx < 0) {
        if (ignoreInvalid) {
          return;
        }

        throw new Error('Rules manager: invalid rule name ' + name);
      }

      this.__rules__[idx].enabled = true;
      result.push(name);
    }, this);
    this.__cache__ = null;
    return result;
  };
  /**
   * Ruler.enableOnly(list [, ignoreInvalid])
   * - list (String|Array): list of rule names to enable (whitelist).
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable rules with given names, and disable everything else. If any rule name
   * not found - throw Error. Errors can be disabled by second param.
   *
   * See also [[Ruler.disable]], [[Ruler.enable]].
   **/


  Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) {
      list = [list];
    }

    this.__rules__.forEach(function (rule) {
      rule.enabled = false;
    });

    this.enable(list, ignoreInvalid);
  };
  /**
   * Ruler.disable(list [, ignoreInvalid]) -> Array
   * - list (String|Array): list of rule names to disable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Disable rules with given names. If any rule name not found - throw Error.
   * Errors can be disabled by second param.
   *
   * Returns list of found rule names (if no exception happened).
   *
   * See also [[Ruler.enable]], [[Ruler.enableOnly]].
   **/


  Ruler.prototype.disable = function (list, ignoreInvalid) {
    if (!Array.isArray(list)) {
      list = [list];
    }

    var result = []; // Search by name and disable

    list.forEach(function (name) {
      var idx = this.__find__(name);

      if (idx < 0) {
        if (ignoreInvalid) {
          return;
        }

        throw new Error('Rules manager: invalid rule name ' + name);
      }

      this.__rules__[idx].enabled = false;
      result.push(name);
    }, this);
    this.__cache__ = null;
    return result;
  };
  /**
   * Ruler.getRules(chainName) -> Array
   *
   * Return array of active functions (rules) for given chain name. It analyzes
   * rules configuration, compiles caches if not exists and returns result.
   *
   * Default chain name is `''` (empty string). It can't be skipped. That's
   * done intentionally, to keep signature monomorphic for high speed.
   **/


  Ruler.prototype.getRules = function (chainName) {
    if (this.__cache__ === null) {
      this.__compile__();
    } // Chain can be empty, if rules disabled. But we still have to return Array.


    return this.__cache__[chainName] || [];
  };

  var ruler = Ruler; // Normalize input string
  // https://spec.commonmark.org/0.29/#line-ending

  var NEWLINES_RE = /\r\n?|\n/g;
  var NULL_RE = /\0/g;

  var normalize = function normalize(state) {
    var str; // Normalize newlines

    str = state.src.replace(NEWLINES_RE, '\n'); // Replace NULL characters

    str = str.replace(NULL_RE, '\uFFFD');
    state.src = str;
  };

  var block$1 = function block(state) {
    var token;

    if (state.inlineMode) {
      token = new state.Token('inline', '', 0);
      token.content = state.src;
      token.map = [0, 1];
      token.children = [];
      state.tokens.push(token);
    } else {
      state.md.block.parse(state.src, state.md, state.env, state.tokens);
    }
  };

  var inline = function inline(state) {
    var tokens = state.tokens,
        tok,
        i,
        l; // Parse inlines

    for (i = 0, l = tokens.length; i < l; i++) {
      tok = tokens[i];

      if (tok.type === 'inline') {
        state.md.inline.parse(tok.content, state.md, state.env, tok.children);
      }
    }
  };

  var arrayReplaceAt = utils.arrayReplaceAt;

  function isLinkOpen(str) {
    return /^<a[>\s]/i.test(str);
  }

  function isLinkClose(str) {
    return /^<\/a\s*>/i.test(str);
  }

  var linkify = function linkify(state) {
    var i,
        j,
        l,
        tokens,
        token,
        currentToken,
        nodes,
        ln,
        text,
        pos,
        lastPos,
        level,
        htmlLinkLevel,
        url,
        fullUrl,
        urlText,
        blockTokens = state.tokens,
        links;

    if (!state.md.options.linkify) {
      return;
    }

    for (j = 0, l = blockTokens.length; j < l; j++) {
      if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {
        continue;
      }

      tokens = blockTokens[j].children;
      htmlLinkLevel = 0; // We scan from the end, to keep position when new tags added.
      // Use reversed logic in links start/end match

      for (i = tokens.length - 1; i >= 0; i--) {
        currentToken = tokens[i]; // Skip content of markdown links

        if (currentToken.type === 'link_close') {
          i--;

          while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
            i--;
          }

          continue;
        } // Skip content of html tag links


        if (currentToken.type === 'html_inline') {
          if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
            htmlLinkLevel--;
          }

          if (isLinkClose(currentToken.content)) {
            htmlLinkLevel++;
          }
        }

        if (htmlLinkLevel > 0) {
          continue;
        }

        if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
          text = currentToken.content;
          links = state.md.linkify.match(text); // Now split string to nodes

          nodes = [];
          level = currentToken.level;
          lastPos = 0;

          for (ln = 0; ln < links.length; ln++) {
            url = links[ln].url;
            fullUrl = state.md.normalizeLink(url);

            if (!state.md.validateLink(fullUrl)) {
              continue;
            }

            urlText = links[ln].text; // Linkifier might send raw hostnames like "example.com", where url
            // starts with domain name. So we prepend http:// in those cases,
            // and remove it afterwards.
            //

            if (!links[ln].schema) {
              urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
            } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
              urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
            } else {
              urlText = state.md.normalizeLinkText(urlText);
            }

            pos = links[ln].index;

            if (pos > lastPos) {
              token = new state.Token('text', '', 0);
              token.content = text.slice(lastPos, pos);
              token.level = level;
              nodes.push(token);
            }

            token = new state.Token('link_open', 'a', 1);
            token.attrs = [['href', fullUrl]];
            token.level = level++;
            token.markup = 'linkify';
            token.info = 'auto';
            nodes.push(token);
            token = new state.Token('text', '', 0);
            token.content = urlText;
            token.level = level;
            nodes.push(token);
            token = new state.Token('link_close', 'a', -1);
            token.level = --level;
            token.markup = 'linkify';
            token.info = 'auto';
            nodes.push(token);
            lastPos = links[ln].lastIndex;
          }

          if (lastPos < text.length) {
            token = new state.Token('text', '', 0);
            token.content = text.slice(lastPos);
            token.level = level;
            nodes.push(token);
          } // replace current node


          blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
        }
      }
    }
  }; // Simple typographic replacements
  // TODO:
  // - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
  // - miltiplication 2 x 4 -> 2 × 4


  var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/; // Workaround for phantomjs - need regex without /g flag,
  // or root check will fail every second time

  var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
  var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
  var SCOPED_ABBR = {
    c: '©',
    r: '®',
    p: '§',
    tm: '™'
  };

  function replaceFn(match, name) {
    return SCOPED_ABBR[name.toLowerCase()];
  }

  function replace_scoped(inlineTokens) {
    var i,
        token,
        inside_autolink = 0;

    for (i = inlineTokens.length - 1; i >= 0; i--) {
      token = inlineTokens[i];

      if (token.type === 'text' && !inside_autolink) {
        token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
      }

      if (token.type === 'link_open' && token.info === 'auto') {
        inside_autolink--;
      }

      if (token.type === 'link_close' && token.info === 'auto') {
        inside_autolink++;
      }
    }
  }

  function replace_rare(inlineTokens) {
    var i,
        token,
        inside_autolink = 0;

    for (i = inlineTokens.length - 1; i >= 0; i--) {
      token = inlineTokens[i];

      if (token.type === 'text' && !inside_autolink) {
        if (RARE_RE.test(token.content)) {
          token.content = token.content.replace(/\+-/g, '±') // .., ..., ....... -> …
          // but ?..... & !..... -> ?.. & !..
          .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',') // em-dash
          .replace(/(^|[^-])---([^-]|$)/mg, '$1\u2014$2') // en-dash
          .replace(/(^|\s)--(\s|$)/mg, '$1\u2013$2').replace(/(^|[^-\s])--([^-\s]|$)/mg, '$1\u2013$2');
        }
      }

      if (token.type === 'link_open' && token.info === 'auto') {
        inside_autolink--;
      }

      if (token.type === 'link_close' && token.info === 'auto') {
        inside_autolink++;
      }
    }
  }

  var replacements = function replace(state) {
    var blkIdx;

    if (!state.md.options.typographer) {
      return;
    }

    for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
      if (state.tokens[blkIdx].type !== 'inline') {
        continue;
      }

      if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
        replace_scoped(state.tokens[blkIdx].children);
      }

      if (RARE_RE.test(state.tokens[blkIdx].content)) {
        replace_rare(state.tokens[blkIdx].children);
      }
    }
  };

  var isWhiteSpace = utils.isWhiteSpace;
  var isPunctChar = utils.isPunctChar;
  var isMdAsciiPunct = utils.isMdAsciiPunct;
  var QUOTE_TEST_RE = /['"]/;
  var QUOTE_RE = /['"]/g;
  var APOSTROPHE = '\u2019';
  /* ’ */

  function replaceAt(str, index, ch) {
    return str.substr(0, index) + ch + str.substr(index + 1);
  }

  function process_inlines(tokens, state) {
    var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
    stack = [];

    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      thisLevel = tokens[i].level;

      for (j = stack.length - 1; j >= 0; j--) {
        if (stack[j].level <= thisLevel) {
          break;
        }
      }

      stack.length = j + 1;

      if (token.type !== 'text') {
        continue;
      }

      text = token.content;
      pos = 0;
      max = text.length;
      /*eslint no-labels:0,block-scoped-var:0*/

      OUTER: while (pos < max) {
        QUOTE_RE.lastIndex = pos;
        t = QUOTE_RE.exec(text);

        if (!t) {
          break;
        }

        canOpen = canClose = true;
        pos = t.index + 1;
        isSingle = t[0] === "'"; // Find previous character,
        // default to space if it's the beginning of the line
        //

        lastChar = 0x20;

        if (t.index - 1 >= 0) {
          lastChar = text.charCodeAt(t.index - 1);
        } else {
          for (j = i - 1; j >= 0; j--) {
            if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20

            if (tokens[j].type !== 'text') continue;
            lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
            break;
          }
        } // Find next character,
        // default to space if it's the end of the line
        //


        nextChar = 0x20;

        if (pos < max) {
          nextChar = text.charCodeAt(pos);
        } else {
          for (j = i + 1; j < tokens.length; j++) {
            if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20

            if (tokens[j].type !== 'text') continue;
            nextChar = tokens[j].content.charCodeAt(0);
            break;
          }
        }

        isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
        isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
        isLastWhiteSpace = isWhiteSpace(lastChar);
        isNextWhiteSpace = isWhiteSpace(nextChar);

        if (isNextWhiteSpace) {
          canOpen = false;
        } else if (isNextPunctChar) {
          if (!(isLastWhiteSpace || isLastPunctChar)) {
            canOpen = false;
          }
        }

        if (isLastWhiteSpace) {
          canClose = false;
        } else if (isLastPunctChar) {
          if (!(isNextWhiteSpace || isNextPunctChar)) {
            canClose = false;
          }
        }

        if (nextChar === 0x22
        /* " */
        && t[0] === '"') {
          if (lastChar >= 0x30
          /* 0 */
          && lastChar <= 0x39
          /* 9 */
          ) {
              // special case: 1"" - count first quote as an inch
              canClose = canOpen = false;
            }
        }

        if (canOpen && canClose) {
          // treat this as the middle of the word
          canOpen = false;
          canClose = isNextPunctChar;
        }

        if (!canOpen && !canClose) {
          // middle of word
          if (isSingle) {
            token.content = replaceAt(token.content, t.index, APOSTROPHE);
          }

          continue;
        }

        if (canClose) {
          // this could be a closing quote, rewind the stack to get a match
          for (j = stack.length - 1; j >= 0; j--) {
            item = stack[j];

            if (stack[j].level < thisLevel) {
              break;
            }

            if (item.single === isSingle && stack[j].level === thisLevel) {
              item = stack[j];

              if (isSingle) {
                openQuote = state.md.options.quotes[2];
                closeQuote = state.md.options.quotes[3];
              } else {
                openQuote = state.md.options.quotes[0];
                closeQuote = state.md.options.quotes[1];
              } // replace token.content *before* tokens[item.token].content,
              // because, if they are pointing at the same token, replaceAt
              // could mess up indices when quote length != 1


              token.content = replaceAt(token.content, t.index, closeQuote);
              tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);
              pos += closeQuote.length - 1;

              if (item.token === i) {
                pos += openQuote.length - 1;
              }

              text = token.content;
              max = text.length;
              stack.length = j;
              continue OUTER;
            }
          }
        }

        if (canOpen) {
          stack.push({
            token: i,
            pos: t.index,
            single: isSingle,
            level: thisLevel
          });
        } else if (canClose && isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
      }
    }
  }

  var smartquotes = function smartquotes(state) {
    /*eslint max-depth:0*/
    var blkIdx;

    if (!state.md.options.typographer) {
      return;
    }

    for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
      if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
        continue;
      }

      process_inlines(state.tokens[blkIdx].children, state);
    }
  }; // Token class

  /**
   * class Token
   **/

  /**
   * new Token(type, tag, nesting)
   *
   * Create new token and fill passed properties.
   **/


  function Token(type, tag, nesting) {
    /**
     * Token#type -> String
     *
     * Type of the token (string, e.g. "paragraph_open")
     **/
    this.type = type;
    /**
     * Token#tag -> String
     *
     * html tag name, e.g. "p"
     **/

    this.tag = tag;
    /**
     * Token#attrs -> Array
     *
     * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
     **/

    this.attrs = null;
    /**
     * Token#map -> Array
     *
     * Source map info. Format: `[ line_begin, line_end ]`
     **/

    this.map = null;
    /**
     * Token#nesting -> Number
     *
     * Level change (number in {-1, 0, 1} set), where:
     *
     * -  `1` means the tag is opening
     * -  `0` means the tag is self-closing
     * - `-1` means the tag is closing
     **/

    this.nesting = nesting;
    /**
     * Token#level -> Number
     *
     * nesting level, the same as `state.level`
     **/

    this.level = 0;
    /**
     * Token#children -> Array
     *
     * An array of child nodes (inline and img tokens)
     **/

    this.children = null;
    /**
     * Token#content -> String
     *
     * In a case of self-closing tag (code, html, fence, etc.),
     * it has contents of this tag.
     **/

    this.content = '';
    /**
     * Token#markup -> String
     *
     * '*' or '_' for emphasis, fence string for fence, etc.
     **/

    this.markup = '';
    /**
     * Token#info -> String
     *
     * fence infostring
     **/

    this.info = '';
    /**
     * Token#meta -> Object
     *
     * A place for plugins to store an arbitrary data
     **/

    this.meta = null;
    /**
     * Token#block -> Boolean
     *
     * True for block-level tokens, false for inline tokens.
     * Used in renderer to calculate line breaks
     **/

    this.block = false;
    /**
     * Token#hidden -> Boolean
     *
     * If it's true, ignore this element when rendering. Used for tight lists
     * to hide paragraphs.
     **/

    this.hidden = false;
  }
  /**
   * Token.attrIndex(name) -> Number
   *
   * Search attribute index by name.
   **/


  Token.prototype.attrIndex = function attrIndex(name) {
    var attrs, i, len;

    if (!this.attrs) {
      return -1;
    }

    attrs = this.attrs;

    for (i = 0, len = attrs.length; i < len; i++) {
      if (attrs[i][0] === name) {
        return i;
      }
    }

    return -1;
  };
  /**
   * Token.attrPush(attrData)
   *
   * Add `[ name, value ]` attribute to list. Init attrs if necessary
   **/


  Token.prototype.attrPush = function attrPush(attrData) {
    if (this.attrs) {
      this.attrs.push(attrData);
    } else {
      this.attrs = [attrData];
    }
  };
  /**
   * Token.attrSet(name, value)
   *
   * Set `name` attribute to `value`. Override old value if exists.
   **/


  Token.prototype.attrSet = function attrSet(name, value) {
    var idx = this.attrIndex(name),
        attrData = [name, value];

    if (idx < 0) {
      this.attrPush(attrData);
    } else {
      this.attrs[idx] = attrData;
    }
  };
  /**
   * Token.attrGet(name)
   *
   * Get the value of attribute `name`, or null if it does not exist.
   **/


  Token.prototype.attrGet = function attrGet(name) {
    var idx = this.attrIndex(name),
        value = null;

    if (idx >= 0) {
      value = this.attrs[idx][1];
    }

    return value;
  };
  /**
   * Token.attrJoin(name, value)
   *
   * Join value to existing attribute via space. Or create new attribute if not
   * exists. Useful to operate with token classes.
   **/


  Token.prototype.attrJoin = function attrJoin(name, value) {
    var idx = this.attrIndex(name);

    if (idx < 0) {
      this.attrPush([name, value]);
    } else {
      this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
    }
  };

  var token = Token;

  function StateCore(src, md, env) {
    this.src = src;
    this.env = env;
    this.tokens = [];
    this.inlineMode = false;
    this.md = md; // link to parser instance
  } // re-export Token class to use in core rules


  StateCore.prototype.Token = token;
  var state_core = StateCore;
  var _rules = [['normalize', normalize], ['block', block$1], ['inline', inline], ['linkify', linkify], ['replacements', replacements], ['smartquotes', smartquotes]];
  /**
   * new Core()
   **/

  function Core() {
    /**
     * Core#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of core rules.
     **/
    this.ruler = new ruler();

    for (var i = 0; i < _rules.length; i++) {
      this.ruler.push(_rules[i][0], _rules[i][1]);
    }
  }
  /**
   * Core.process(state)
   *
   * Executes core chain rules.
   **/


  Core.prototype.process = function (state) {
    var i, l, rules;
    rules = this.ruler.getRules('');

    for (i = 0, l = rules.length; i < l; i++) {
      rules[i](state);
    }
  };

  Core.prototype.State = state_core;
  var parser_core = Core;
  var isSpace = utils.isSpace;

  function getLine(state, line) {
    var pos = state.bMarks[line] + state.blkIndent,
        max = state.eMarks[line];
    return state.src.substr(pos, max - pos);
  }

  function escapedSplit(str) {
    var result = [],
        pos = 0,
        max = str.length,
        ch,
        escapes = 0,
        lastPos = 0,
        backTicked = false,
        lastBackTick = 0;
    ch = str.charCodeAt(pos);

    while (pos < max) {
      if (ch === 0x60
      /* ` */
      ) {
          if (backTicked) {
            // make \` close code sequence, but not open it;
            // the reason is: `\` is correct code block
            backTicked = false;
            lastBackTick = pos;
          } else if (escapes % 2 === 0) {
            backTicked = true;
            lastBackTick = pos;
          }
        } else if (ch === 0x7c
      /* | */
      && escapes % 2 === 0 && !backTicked) {
        result.push(str.substring(lastPos, pos));
        lastPos = pos + 1;
      }

      if (ch === 0x5c
      /* \ */
      ) {
          escapes++;
        } else {
        escapes = 0;
      }

      pos++; // If there was an un-closed backtick, go back to just after
      // the last backtick, but as if it was a normal character

      if (pos === max && backTicked) {
        backTicked = false;
        pos = lastBackTick + 1;
      }

      ch = str.charCodeAt(pos);
    }

    result.push(str.substring(lastPos));
    return result;
  }

  var table = function table(state, startLine, endLine, silent) {
    var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines; // should have at least two lines

    if (startLine + 2 > endLine) {
      return false;
    }

    nextLine = startLine + 1;

    if (state.sCount[nextLine] < state.blkIndent) {
      return false;
    } // if it's indented more than 3 spaces, it should be a code block


    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      return false;
    } // first character of the second line should be '|', '-', ':',
    // and no other characters are allowed but spaces;
    // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp


    pos = state.bMarks[nextLine] + state.tShift[nextLine];

    if (pos >= state.eMarks[nextLine]) {
      return false;
    }

    ch = state.src.charCodeAt(pos++);

    if (ch !== 0x7C
    /* | */
    && ch !== 0x2D
    /* - */
    && ch !== 0x3A
    /* : */
    ) {
        return false;
      }

    while (pos < state.eMarks[nextLine]) {
      ch = state.src.charCodeAt(pos);

      if (ch !== 0x7C
      /* | */
      && ch !== 0x2D
      /* - */
      && ch !== 0x3A
      /* : */
      && !isSpace(ch)) {
        return false;
      }

      pos++;
    }

    lineText = getLine(state, startLine + 1);
    columns = lineText.split('|');
    aligns = [];

    for (i = 0; i < columns.length; i++) {
      t = columns[i].trim();

      if (!t) {
        // allow empty columns before and after table, but not in between columns;
        // e.g. allow ` |---| `, disallow ` ---||--- `
        if (i === 0 || i === columns.length - 1) {
          continue;
        } else {
          return false;
        }
      }

      if (!/^:?-+:?$/.test(t)) {
        return false;
      }

      if (t.charCodeAt(t.length - 1) === 0x3A
      /* : */
      ) {
          aligns.push(t.charCodeAt(0) === 0x3A
          /* : */
          ? 'center' : 'right');
        } else if (t.charCodeAt(0) === 0x3A
      /* : */
      ) {
          aligns.push('left');
        } else {
        aligns.push('');
      }
    }

    lineText = getLine(state, startLine).trim();

    if (lineText.indexOf('|') === -1) {
      return false;
    }

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    columns = escapedSplit(lineText.replace(/^\||\|$/g, '')); // header row will define an amount of columns in the entire table,
    // and align row shouldn't be smaller than that (the rest of the rows can)

    columnCount = columns.length;

    if (columnCount > aligns.length) {
      return false;
    }

    if (silent) {
      return true;
    }

    token = state.push('table_open', 'table', 1);
    token.map = tableLines = [startLine, 0];
    token = state.push('thead_open', 'thead', 1);
    token.map = [startLine, startLine + 1];
    token = state.push('tr_open', 'tr', 1);
    token.map = [startLine, startLine + 1];

    for (i = 0; i < columns.length; i++) {
      token = state.push('th_open', 'th', 1);
      token.map = [startLine, startLine + 1];

      if (aligns[i]) {
        token.attrs = [['style', 'text-align:' + aligns[i]]];
      }

      token = state.push('inline', '', 0);
      token.content = columns[i].trim();
      token.map = [startLine, startLine + 1];
      token.children = [];
      token = state.push('th_close', 'th', -1);
    }

    token = state.push('tr_close', 'tr', -1);
    token = state.push('thead_close', 'thead', -1);
    token = state.push('tbody_open', 'tbody', 1);
    token.map = tbodyLines = [startLine + 2, 0];

    for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) {
        break;
      }

      lineText = getLine(state, nextLine).trim();

      if (lineText.indexOf('|') === -1) {
        break;
      }

      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        break;
      }

      columns = escapedSplit(lineText.replace(/^\||\|$/g, ''));
      token = state.push('tr_open', 'tr', 1);

      for (i = 0; i < columnCount; i++) {
        token = state.push('td_open', 'td', 1);

        if (aligns[i]) {
          token.attrs = [['style', 'text-align:' + aligns[i]]];
        }

        token = state.push('inline', '', 0);
        token.content = columns[i] ? columns[i].trim() : '';
        token.children = [];
        token = state.push('td_close', 'td', -1);
      }

      token = state.push('tr_close', 'tr', -1);
    }

    token = state.push('tbody_close', 'tbody', -1);
    token = state.push('table_close', 'table', -1);
    tableLines[1] = tbodyLines[1] = nextLine;
    state.line = nextLine;
    return true;
  }; // Code block (4 spaces padded)


  var code = function code(state, startLine, endLine
  /*, silent*/
  ) {
    var nextLine, last, token;

    if (state.sCount[startLine] - state.blkIndent < 4) {
      return false;
    }

    last = nextLine = startLine + 1;

    while (nextLine < endLine) {
      if (state.isEmpty(nextLine)) {
        nextLine++;
        continue;
      }

      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        nextLine++;
        last = nextLine;
        continue;
      }

      break;
    }

    state.line = last;
    token = state.push('code_block', 'code', 0);
    token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);
    token.map = [startLine, state.line];
    return true;
  }; // fences (``` lang, ~~~ lang)


  var fence = function fence(state, startLine, endLine, silent) {
    var marker,
        len,
        params,
        nextLine,
        mem,
        token,
        markup,
        haveEndMarker = false,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    if (pos + 3 > max) {
      return false;
    }

    marker = state.src.charCodeAt(pos);

    if (marker !== 0x7E
    /* ~ */
    && marker !== 0x60
    /* ` */
    ) {
        return false;
      } // scan marker length


    mem = pos;
    pos = state.skipChars(pos, marker);
    len = pos - mem;

    if (len < 3) {
      return false;
    }

    markup = state.src.slice(mem, pos);
    params = state.src.slice(pos, max);

    if (marker === 0x60
    /* ` */
    ) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      } // Since start is found, we can report success here in validation mode


    if (silent) {
      return true;
    } // search end of block


    nextLine = startLine;

    for (;;) {
      nextLine++;

      if (nextLine >= endLine) {
        // unclosed block should be autoclosed by end of document.
        // also block seems to be autoclosed by end of parent
        break;
      }

      pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos < max && state.sCount[nextLine] < state.blkIndent) {
        // non-empty line with negative indent should stop the list:
        // - ```
        //  test
        break;
      }

      if (state.src.charCodeAt(pos) !== marker) {
        continue;
      }

      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        // closing fence should be indented less than 4 spaces
        continue;
      }

      pos = state.skipChars(pos, marker); // closing code fence must be at least as long as the opening one

      if (pos - mem < len) {
        continue;
      } // make sure tail has spaces only


      pos = state.skipSpaces(pos);

      if (pos < max) {
        continue;
      }

      haveEndMarker = true; // found!

      break;
    } // If a fence has heading spaces, they should be removed from its inner block


    len = state.sCount[startLine];
    state.line = nextLine + (haveEndMarker ? 1 : 0);
    token = state.push('fence', 'code', 0);
    token.info = params;
    token.content = state.getLines(startLine + 1, nextLine, len, true);
    token.markup = markup;
    token.map = [startLine, state.line];
    return true;
  };

  var isSpace$1 = utils.isSpace;

  var blockquote = function blockquote(state, startLine, endLine, silent) {
    var adjustTab,
        ch,
        i,
        initial,
        l,
        lastLineEmpty,
        lines,
        nextLine,
        offset,
        oldBMarks,
        oldBSCount,
        oldIndent,
        oldParentType,
        oldSCount,
        oldTShift,
        spaceAfterMarker,
        terminate,
        terminatorRules,
        token,
        wasOutdented,
        oldLineMax = state.lineMax,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    } // check the block quote marker


    if (state.src.charCodeAt(pos++) !== 0x3E
    /* > */
    ) {
        return false;
      } // we know that it's going to be a valid blockquote,
    // so no point trying to find the end of it in silent mode


    if (silent) {
      return true;
    } // skip spaces after ">" and re-calculate offset


    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]); // skip one optional space after '>'

    if (state.src.charCodeAt(pos) === 0x20
    /* space */
    ) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09
    /* tab */
    ) {
        spaceAfterMarker = true;

        if ((state.bsCount[startLine] + offset) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
      spaceAfterMarker = false;
    }

    oldBMarks = [state.bMarks[startLine]];
    state.bMarks[startLine] = pos;

    while (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (isSpace$1(ch)) {
        if (ch === 0x09) {
          offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
        } else {
          offset++;
        }
      } else {
        break;
      }

      pos++;
    }

    oldBSCount = [state.bsCount[startLine]];
    state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
    lastLineEmpty = pos >= max;
    oldSCount = [state.sCount[startLine]];
    state.sCount[startLine] = offset - initial;
    oldTShift = [state.tShift[startLine]];
    state.tShift[startLine] = pos - state.bMarks[startLine];
    terminatorRules = state.md.block.ruler.getRules('blockquote');
    oldParentType = state.parentType;
    state.parentType = 'blockquote';
    wasOutdented = false; // Search the end of the block
    //
    // Block ends with either:
    //  1. an empty line outside:
    //     ```
    //     > test
    //
    //     ```
    //  2. an empty line inside:
    //     ```
    //     >
    //     test
    //     ```
    //  3. another tag:
    //     ```
    //     > test
    //      - - -
    //     ```

    for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
      // check if it's outdented, i.e. it's inside list item and indented
      // less than said list item:
      //
      // ```
      // 1. anything
      //    > current blockquote
      // 2. checking this line
      // ```
      if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];

      if (pos >= max) {
        // Case 1: line is not inside the blockquote, and this line is empty.
        break;
      }

      if (state.src.charCodeAt(pos++) === 0x3E
      /* > */
      && !wasOutdented) {
        // This line is inside the blockquote.
        // skip spaces after ">" and re-calculate offset
        initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]); // skip one optional space after '>'

        if (state.src.charCodeAt(pos) === 0x20
        /* space */
        ) {
            // ' >   test '
            //     ^ -- position start of line here:
            pos++;
            initial++;
            offset++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 0x09
        /* tab */
        ) {
            spaceAfterMarker = true;

            if ((state.bsCount[nextLine] + offset) % 4 === 3) {
              // '  >\t  test '
              //       ^ -- position start of line here (tab has width===1)
              pos++;
              initial++;
              offset++;
              adjustTab = false;
            } else {
              // ' >\t  test '
              //    ^ -- position start of line here + shift bsCount slightly
              //         to make extra space appear
              adjustTab = true;
            }
          } else {
          spaceAfterMarker = false;
        }

        oldBMarks.push(state.bMarks[nextLine]);
        state.bMarks[nextLine] = pos;

        while (pos < max) {
          ch = state.src.charCodeAt(pos);

          if (isSpace$1(ch)) {
            if (ch === 0x09) {
              offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
            } else {
              offset++;
            }
          } else {
            break;
          }

          pos++;
        }

        lastLineEmpty = pos >= max;
        oldBSCount.push(state.bsCount[nextLine]);
        state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] = offset - initial;
        oldTShift.push(state.tShift[nextLine]);
        state.tShift[nextLine] = pos - state.bMarks[nextLine];
        continue;
      } // Case 2: line is not inside the blockquote, and the last line was empty.


      if (lastLineEmpty) {
        break;
      } // Case 3: another tag found.


      terminate = false;

      for (i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break;
        }
      }

      if (terminate) {
        // Quirk to enforce "hard termination mode" for paragraphs;
        // normally if you call `tokenize(state, startLine, nextLine)`,
        // paragraphs will look below nextLine for paragraph continuation,
        // but if blockquote is terminated by another tag, they shouldn't
        state.lineMax = nextLine;

        if (state.blkIndent !== 0) {
          // state.blkIndent was non-zero, we now set it to zero,
          // so we need to re-calculate all offsets to appear as
          // if indent wasn't changed
          oldBMarks.push(state.bMarks[nextLine]);
          oldBSCount.push(state.bsCount[nextLine]);
          oldTShift.push(state.tShift[nextLine]);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] -= state.blkIndent;
        }

        break;
      }

      oldBMarks.push(state.bMarks[nextLine]);
      oldBSCount.push(state.bsCount[nextLine]);
      oldTShift.push(state.tShift[nextLine]);
      oldSCount.push(state.sCount[nextLine]); // A negative indentation means that this is a paragraph continuation
      //

      state.sCount[nextLine] = -1;
    }

    oldIndent = state.blkIndent;
    state.blkIndent = 0;
    token = state.push('blockquote_open', 'blockquote', 1);
    token.markup = '>';
    token.map = lines = [startLine, 0];
    state.md.block.tokenize(state, startLine, nextLine);
    token = state.push('blockquote_close', 'blockquote', -1);
    token.markup = '>';
    state.lineMax = oldLineMax;
    state.parentType = oldParentType;
    lines[1] = state.line; // Restore original tShift; this might not be necessary since the parser
    // has already been here, but just to make sure we can do that.

    for (i = 0; i < oldTShift.length; i++) {
      state.bMarks[i + startLine] = oldBMarks[i];
      state.tShift[i + startLine] = oldTShift[i];
      state.sCount[i + startLine] = oldSCount[i];
      state.bsCount[i + startLine] = oldBSCount[i];
    }

    state.blkIndent = oldIndent;
    return true;
  };

  var isSpace$2 = utils.isSpace;

  var hr = function hr(state, startLine, endLine, silent) {
    var marker,
        cnt,
        ch,
        token,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    marker = state.src.charCodeAt(pos++); // Check hr marker

    if (marker !== 0x2A
    /* * */
    && marker !== 0x2D
    /* - */
    && marker !== 0x5F
    /* _ */
    ) {
        return false;
      } // markers can be mixed with spaces, but there should be at least 3 of them


    cnt = 1;

    while (pos < max) {
      ch = state.src.charCodeAt(pos++);

      if (ch !== marker && !isSpace$2(ch)) {
        return false;
      }

      if (ch === marker) {
        cnt++;
      }
    }

    if (cnt < 3) {
      return false;
    }

    if (silent) {
      return true;
    }

    state.line = startLine + 1;
    token = state.push('hr', 'hr', 0);
    token.map = [startLine, state.line];
    token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
    return true;
  };

  var isSpace$3 = utils.isSpace; // Search `[-+*][\n ]`, returns next pos after marker on success
  // or -1 on fail.

  function skipBulletListMarker(state, startLine) {
    var marker, pos, max, ch;
    pos = state.bMarks[startLine] + state.tShift[startLine];
    max = state.eMarks[startLine];
    marker = state.src.charCodeAt(pos++); // Check bullet

    if (marker !== 0x2A
    /* * */
    && marker !== 0x2D
    /* - */
    && marker !== 0x2B
    /* + */
    ) {
        return -1;
      }

    if (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (!isSpace$3(ch)) {
        // " -test " - is not a list item
        return -1;
      }
    }

    return pos;
  } // Search `\d+[.)][\n ]`, returns next pos after marker on success
  // or -1 on fail.


  function skipOrderedListMarker(state, startLine) {
    var ch,
        start = state.bMarks[startLine] + state.tShift[startLine],
        pos = start,
        max = state.eMarks[startLine]; // List marker should have at least 2 chars (digit + dot)

    if (pos + 1 >= max) {
      return -1;
    }

    ch = state.src.charCodeAt(pos++);

    if (ch < 0x30
    /* 0 */
    || ch > 0x39
    /* 9 */
    ) {
        return -1;
      }

    for (;;) {
      // EOL -> fail
      if (pos >= max) {
        return -1;
      }

      ch = state.src.charCodeAt(pos++);

      if (ch >= 0x30
      /* 0 */
      && ch <= 0x39
      /* 9 */
      ) {
          // List marker should have no more than 9 digits
          // (prevents integer overflow in browsers)
          if (pos - start >= 10) {
            return -1;
          }

          continue;
        } // found valid marker


      if (ch === 0x29
      /* ) */
      || ch === 0x2e
      /* . */
      ) {
          break;
        }

      return -1;
    }

    if (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (!isSpace$3(ch)) {
        // " 1.test " - is not a list item
        return -1;
      }
    }

    return pos;
  }

  function markTightParagraphs(state, idx) {
    var i,
        l,
        level = state.level + 2;

    for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
      if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
        state.tokens[i + 2].hidden = true;
        state.tokens[i].hidden = true;
        i += 2;
      }
    }
  }

  var list = function list(state, startLine, endLine, silent) {
    var ch,
        contentStart,
        i,
        indent,
        indentAfterMarker,
        initial,
        isOrdered,
        itemLines,
        l,
        listLines,
        listTokIdx,
        markerCharCode,
        markerValue,
        max,
        nextLine,
        offset,
        oldListIndent,
        oldParentType,
        oldSCount,
        oldTShift,
        oldTight,
        pos,
        posAfterMarker,
        prevEmptyEnd,
        start,
        terminate,
        terminatorRules,
        token,
        isTerminatingParagraph = false,
        tight = true; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    } // Special case:
    //  - item 1
    //   - item 2
    //    - item 3
    //     - item 4
    //      - this one is a paragraph continuation


    if (state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
      return false;
    } // limit conditions when list can interrupt
    // a paragraph (validation mode only)


    if (silent && state.parentType === 'paragraph') {
      // Next list item should still terminate previous list item;
      //
      // This code can fail if plugins use blkIndent as well as lists,
      // but I hope the spec gets fixed long before that happens.
      //
      if (state.tShift[startLine] >= state.blkIndent) {
        isTerminatingParagraph = true;
      }
    } // Detect list type and position after marker


    if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
      isOrdered = true;
      start = state.bMarks[startLine] + state.tShift[startLine];
      markerValue = Number(state.src.substr(start, posAfterMarker - start - 1)); // If we're starting a new ordered list right after
      // a paragraph, it should start with 1.

      if (isTerminatingParagraph && markerValue !== 1) return false;
    } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
      isOrdered = false;
    } else {
      return false;
    } // If we're starting a new unordered list right after
    // a paragraph, first line should not be empty.


    if (isTerminatingParagraph) {
      if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
    } // We should terminate list on style change. Remember first one to compare.


    markerCharCode = state.src.charCodeAt(posAfterMarker - 1); // For validation mode we can terminate immediately

    if (silent) {
      return true;
    } // Start list


    listTokIdx = state.tokens.length;

    if (isOrdered) {
      token = state.push('ordered_list_open', 'ol', 1);

      if (markerValue !== 1) {
        token.attrs = [['start', markerValue]];
      }
    } else {
      token = state.push('bullet_list_open', 'ul', 1);
    }

    token.map = listLines = [startLine, 0];
    token.markup = String.fromCharCode(markerCharCode); //
    // Iterate list items
    //

    nextLine = startLine;
    prevEmptyEnd = false;
    terminatorRules = state.md.block.ruler.getRules('list');
    oldParentType = state.parentType;
    state.parentType = 'list';

    while (nextLine < endLine) {
      pos = posAfterMarker;
      max = state.eMarks[nextLine];
      initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (ch === 0x09) {
          offset += 4 - (offset + state.bsCount[nextLine]) % 4;
        } else if (ch === 0x20) {
          offset++;
        } else {
          break;
        }

        pos++;
      }

      contentStart = pos;

      if (contentStart >= max) {
        // trimming space in "-    \n  3" case, indent is 1 here
        indentAfterMarker = 1;
      } else {
        indentAfterMarker = offset - initial;
      } // If we have more than 4 spaces, the indent is 1
      // (the rest is just indented code block)


      if (indentAfterMarker > 4) {
        indentAfterMarker = 1;
      } // "  -  test"
      //  ^^^^^ - calculating total length of this thing


      indent = initial + indentAfterMarker; // Run subparser & write tokens

      token = state.push('list_item_open', 'li', 1);
      token.markup = String.fromCharCode(markerCharCode);
      token.map = itemLines = [startLine, 0]; // change current state, then restore it after parser subcall

      oldTight = state.tight;
      oldTShift = state.tShift[startLine];
      oldSCount = state.sCount[startLine]; //  - example list
      // ^ listIndent position will be here
      //   ^ blkIndent position will be here
      //

      oldListIndent = state.listIndent;
      state.listIndent = state.blkIndent;
      state.blkIndent = indent;
      state.tight = true;
      state.tShift[startLine] = contentStart - state.bMarks[startLine];
      state.sCount[startLine] = offset;

      if (contentStart >= max && state.isEmpty(startLine + 1)) {
        // workaround for this case
        // (list item is empty, list terminates before "foo"):
        // ~~~~~~~~
        //   -
        //
        //     foo
        // ~~~~~~~~
        state.line = Math.min(state.line + 2, endLine);
      } else {
        state.md.block.tokenize(state, startLine, endLine, true);
      } // If any of list item is tight, mark list as tight


      if (!state.tight || prevEmptyEnd) {
        tight = false;
      } // Item become loose if finish with empty line,
      // but we should filter last element, because it means list finish


      prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
      state.blkIndent = state.listIndent;
      state.listIndent = oldListIndent;
      state.tShift[startLine] = oldTShift;
      state.sCount[startLine] = oldSCount;
      state.tight = oldTight;
      token = state.push('list_item_close', 'li', -1);
      token.markup = String.fromCharCode(markerCharCode);
      nextLine = startLine = state.line;
      itemLines[1] = nextLine;
      contentStart = state.bMarks[startLine];

      if (nextLine >= endLine) {
        break;
      } //
      // Try to check if list is terminated or continued.
      //


      if (state.sCount[nextLine] < state.blkIndent) {
        break;
      } // if it's indented more than 3 spaces, it should be a code block


      if (state.sCount[startLine] - state.blkIndent >= 4) {
        break;
      } // fail if terminating block found


      terminate = false;

      for (i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break;
        }
      }

      if (terminate) {
        break;
      } // fail if list has another type


      if (isOrdered) {
        posAfterMarker = skipOrderedListMarker(state, nextLine);

        if (posAfterMarker < 0) {
          break;
        }
      } else {
        posAfterMarker = skipBulletListMarker(state, nextLine);

        if (posAfterMarker < 0) {
          break;
        }
      }

      if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
        break;
      }
    } // Finalize list


    if (isOrdered) {
      token = state.push('ordered_list_close', 'ol', -1);
    } else {
      token = state.push('bullet_list_close', 'ul', -1);
    }

    token.markup = String.fromCharCode(markerCharCode);
    listLines[1] = nextLine;
    state.line = nextLine;
    state.parentType = oldParentType; // mark paragraphs tight if needed

    if (tight) {
      markTightParagraphs(state, listTokIdx);
    }

    return true;
  };

  var normalizeReference = utils.normalizeReference;
  var isSpace$4 = utils.isSpace;

  var reference = function reference(state, startLine, _endLine, silent) {
    var ch,
        destEndPos,
        destEndLineNo,
        endLine,
        href,
        i,
        l,
        label,
        labelEnd,
        oldParentType,
        res,
        start,
        str,
        terminate,
        terminatorRules,
        title,
        lines = 0,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine],
        nextLine = startLine + 1; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    if (state.src.charCodeAt(pos) !== 0x5B
    /* [ */
    ) {
        return false;
      } // Simple check to quickly interrupt scan on [link](url) at the start of line.
    // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54


    while (++pos < max) {
      if (state.src.charCodeAt(pos) === 0x5D
      /* ] */
      && state.src.charCodeAt(pos - 1) !== 0x5C
      /* \ */
      ) {
          if (pos + 1 === max) {
            return false;
          }

          if (state.src.charCodeAt(pos + 1) !== 0x3A
          /* : */
          ) {
              return false;
            }

          break;
        }
    }

    endLine = state.lineMax; // jump line-by-line until empty one or EOF

    terminatorRules = state.md.block.ruler.getRules('reference');
    oldParentType = state.parentType;
    state.parentType = 'reference';

    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) {
        continue;
      } // quirk for blockquotes, this line should already be checked by that rule


      if (state.sCount[nextLine] < 0) {
        continue;
      } // Some tags can terminate paragraph without empty line.


      terminate = false;

      for (i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break;
        }
      }

      if (terminate) {
        break;
      }
    }

    str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    max = str.length;

    for (pos = 1; pos < max; pos++) {
      ch = str.charCodeAt(pos);

      if (ch === 0x5B
      /* [ */
      ) {
          return false;
        } else if (ch === 0x5D
      /* ] */
      ) {
          labelEnd = pos;
          break;
        } else if (ch === 0x0A
      /* \n */
      ) {
          lines++;
        } else if (ch === 0x5C
      /* \ */
      ) {
          pos++;

          if (pos < max && str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }
    }

    if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A
    /* : */
    ) {
        return false;
      } // [label]:   destination   'title'
    //         ^^^ skip optional whitespace here


    for (pos = labelEnd + 2; pos < max; pos++) {
      ch = str.charCodeAt(pos);

      if (ch === 0x0A) {
        lines++;
      } else if (isSpace$4(ch)) ;else {
        break;
      }
    } // [label]:   destination   'title'
    //            ^^^^^^^^^^^ parse this


    res = state.md.helpers.parseLinkDestination(str, pos, max);

    if (!res.ok) {
      return false;
    }

    href = state.md.normalizeLink(res.str);

    if (!state.md.validateLink(href)) {
      return false;
    }

    pos = res.pos;
    lines += res.lines; // save cursor state, we could require to rollback later

    destEndPos = pos;
    destEndLineNo = lines; // [label]:   destination   'title'
    //                       ^^^ skipping those spaces

    start = pos;

    for (; pos < max; pos++) {
      ch = str.charCodeAt(pos);

      if (ch === 0x0A) {
        lines++;
      } else if (isSpace$4(ch)) ;else {
        break;
      }
    } // [label]:   destination   'title'
    //                          ^^^^^^^ parse this


    res = state.md.helpers.parseLinkTitle(str, pos, max);

    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;
      lines += res.lines;
    } else {
      title = '';
      pos = destEndPos;
      lines = destEndLineNo;
    } // skip trailing spaces until the rest of the line


    while (pos < max) {
      ch = str.charCodeAt(pos);

      if (!isSpace$4(ch)) {
        break;
      }

      pos++;
    }

    if (pos < max && str.charCodeAt(pos) !== 0x0A) {
      if (title) {
        // garbage at the end of the line after title,
        // but it could still be a valid reference if we roll back
        title = '';
        pos = destEndPos;
        lines = destEndLineNo;

        while (pos < max) {
          ch = str.charCodeAt(pos);

          if (!isSpace$4(ch)) {
            break;
          }

          pos++;
        }
      }
    }

    if (pos < max && str.charCodeAt(pos) !== 0x0A) {
      // garbage at the end of the line
      return false;
    }

    label = normalizeReference(str.slice(1, labelEnd));

    if (!label) {
      // CommonMark 0.20 disallows empty labels
      return false;
    } // Reference can not terminate anything. This check is for safety only.

    /*istanbul ignore if*/


    if (silent) {
      return true;
    }

    if (typeof state.env.references === 'undefined') {
      state.env.references = {};
    }

    if (typeof state.env.references[label] === 'undefined') {
      state.env.references[label] = {
        title: title,
        href: href
      };
    }

    state.parentType = oldParentType;
    state.line = startLine + lines + 1;
    return true;
  };

  var isSpace$5 = utils.isSpace;

  var heading = function heading(state, startLine, endLine, silent) {
    var ch,
        level,
        tmp,
        token,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    ch = state.src.charCodeAt(pos);

    if (ch !== 0x23
    /* # */
    || pos >= max) {
      return false;
    } // count heading level


    level = 1;
    ch = state.src.charCodeAt(++pos);

    while (ch === 0x23
    /* # */
    && pos < max && level <= 6) {
      level++;
      ch = state.src.charCodeAt(++pos);
    }

    if (level > 6 || pos < max && !isSpace$5(ch)) {
      return false;
    }

    if (silent) {
      return true;
    } // Let's cut tails like '    ###  ' from the end of string


    max = state.skipSpacesBack(max, pos);
    tmp = state.skipCharsBack(max, 0x23, pos); // #

    if (tmp > pos && isSpace$5(state.src.charCodeAt(tmp - 1))) {
      max = tmp;
    }

    state.line = startLine + 1;
    token = state.push('heading_open', 'h' + String(level), 1);
    token.markup = '########'.slice(0, level);
    token.map = [startLine, state.line];
    token = state.push('inline', '', 0);
    token.content = state.src.slice(pos, max).trim();
    token.map = [startLine, state.line];
    token.children = [];
    token = state.push('heading_close', 'h' + String(level), -1);
    token.markup = '########'.slice(0, level);
    return true;
  }; // lheading (---, ===)


  var lheading = function lheading(state, startLine, endLine
  /*, silent*/
  ) {
    var content,
        terminate,
        i,
        l,
        token,
        pos,
        max,
        level,
        marker,
        nextLine = startLine + 1,
        oldParentType,
        terminatorRules = state.md.block.ruler.getRules('paragraph'); // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    oldParentType = state.parentType;
    state.parentType = 'paragraph'; // use paragraph to match terminatorRules
    // jump line-by-line until empty one or EOF

    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) {
        continue;
      } //
      // Check for underline in setext header
      //


      if (state.sCount[nextLine] >= state.blkIndent) {
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];

        if (pos < max) {
          marker = state.src.charCodeAt(pos);

          if (marker === 0x2D
          /* - */
          || marker === 0x3D
          /* = */
          ) {
              pos = state.skipChars(pos, marker);
              pos = state.skipSpaces(pos);

              if (pos >= max) {
                level = marker === 0x3D
                /* = */
                ? 1 : 2;
                break;
              }
            }
        }
      } // quirk for blockquotes, this line should already be checked by that rule


      if (state.sCount[nextLine] < 0) {
        continue;
      } // Some tags can terminate paragraph without empty line.


      terminate = false;

      for (i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break;
        }
      }

      if (terminate) {
        break;
      }
    }

    if (!level) {
      // Didn't find valid underline
      return false;
    }

    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    state.line = nextLine + 1;
    token = state.push('heading_open', 'h' + String(level), 1);
    token.markup = String.fromCharCode(marker);
    token.map = [startLine, state.line];
    token = state.push('inline', '', 0);
    token.content = content;
    token.map = [startLine, state.line - 1];
    token.children = [];
    token = state.push('heading_close', 'h' + String(level), -1);
    token.markup = String.fromCharCode(marker);
    state.parentType = oldParentType;
    return true;
  }; // List of valid html blocks names, accorting to commonmark spec


  var html_blocks = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'meta', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul']; // Regexps to match html elements

  var attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
  var unquoted = '[^"\'=<>`\\x00-\\x20]+';
  var single_quoted = "'[^']*'";
  var double_quoted = '"[^"]*"';
  var attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';
  var attribute = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';
  var open_tag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
  var close_tag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
  var comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
  var processing = '<[?].*?[?]>';
  var declaration = '<![A-Z]+\\s+[^>]*>';
  var cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
  var HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');
  var HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');
  var HTML_TAG_RE_1 = HTML_TAG_RE;
  var HTML_OPEN_CLOSE_TAG_RE_1 = HTML_OPEN_CLOSE_TAG_RE;
  var html_re = {
    HTML_TAG_RE: HTML_TAG_RE_1,
    HTML_OPEN_CLOSE_TAG_RE: HTML_OPEN_CLOSE_TAG_RE_1
  };
  var HTML_OPEN_CLOSE_TAG_RE$1 = html_re.HTML_OPEN_CLOSE_TAG_RE; // An array of opening and corresponding closing sequences for html tags,
  // last argument defines whether it can terminate a paragraph or not
  //

  var HTML_SEQUENCES = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + html_blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE$1.source + '\\s*$'), /^$/, false]];

  var html_block = function html_block(state, startLine, endLine, silent) {
    var i,
        nextLine,
        token,
        lineText,
        pos = state.bMarks[startLine] + state.tShift[startLine],
        max = state.eMarks[startLine]; // if it's indented more than 3 spaces, it should be a code block

    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }

    if (!state.md.options.html) {
      return false;
    }

    if (state.src.charCodeAt(pos) !== 0x3C
    /* < */
    ) {
        return false;
      }

    lineText = state.src.slice(pos, max);

    for (i = 0; i < HTML_SEQUENCES.length; i++) {
      if (HTML_SEQUENCES[i][0].test(lineText)) {
        break;
      }
    }

    if (i === HTML_SEQUENCES.length) {
      return false;
    }

    if (silent) {
      // true if this sequence can be a terminator, false otherwise
      return HTML_SEQUENCES[i][2];
    }

    nextLine = startLine + 1; // If we are here - we detected HTML block.
    // Let's roll down till block end.

    if (!HTML_SEQUENCES[i][1].test(lineText)) {
      for (; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }

        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
        lineText = state.src.slice(pos, max);

        if (HTML_SEQUENCES[i][1].test(lineText)) {
          if (lineText.length !== 0) {
            nextLine++;
          }

          break;
        }
      }
    }

    state.line = nextLine;
    token = state.push('html_block', '', 0);
    token.map = [startLine, nextLine];
    token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
    return true;
  }; // Paragraph


  var paragraph = function paragraph(state, startLine
  /*, endLine*/
  ) {
    var content,
        terminate,
        i,
        l,
        token,
        oldParentType,
        nextLine = startLine + 1,
        terminatorRules = state.md.block.ruler.getRules('paragraph'),
        endLine = state.lineMax;
    oldParentType = state.parentType;
    state.parentType = 'paragraph'; // jump line-by-line until empty one or EOF

    for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
      // this would be a code block normally, but after paragraph
      // it's considered a lazy continuation regardless of what's there
      if (state.sCount[nextLine] - state.blkIndent > 3) {
        continue;
      } // quirk for blockquotes, this line should already be checked by that rule


      if (state.sCount[nextLine] < 0) {
        continue;
      } // Some tags can terminate paragraph without empty line.


      terminate = false;

      for (i = 0, l = terminatorRules.length; i < l; i++) {
        if (terminatorRules[i](state, nextLine, endLine, true)) {
          terminate = true;
          break;
        }
      }

      if (terminate) {
        break;
      }
    }

    content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
    state.line = nextLine;
    token = state.push('paragraph_open', 'p', 1);
    token.map = [startLine, state.line];
    token = state.push('inline', '', 0);
    token.content = content;
    token.map = [startLine, state.line];
    token.children = [];
    token = state.push('paragraph_close', 'p', -1);
    state.parentType = oldParentType;
    return true;
  };

  var isSpace$6 = utils.isSpace;

  function StateBlock(src, md, env, tokens) {
    var ch, s, start, pos, len, indent, offset, indent_found;
    this.src = src; // link to parser instance

    this.md = md;
    this.env = env; //
    // Internal state vartiables
    //

    this.tokens = tokens;
    this.bMarks = []; // line begin offsets for fast jumps

    this.eMarks = []; // line end offsets for fast jumps

    this.tShift = []; // offsets of the first non-space characters (tabs not expanded)

    this.sCount = []; // indents for each line (tabs expanded)
    // An amount of virtual spaces (tabs expanded) between beginning
    // of each line (bMarks) and real beginning of that line.
    //
    // It exists only as a hack because blockquotes override bMarks
    // losing information in the process.
    //
    // It's used only when expanding tabs, you can think about it as
    // an initial tab length, e.g. bsCount=21 applied to string `\t123`
    // means first tab should be expanded to 4-21%4 === 3 spaces.
    //

    this.bsCount = []; // block parser variables

    this.blkIndent = 0; // required block content indent (for example, if we are
    // inside a list, it would be positioned after list marker)

    this.line = 0; // line index in src

    this.lineMax = 0; // lines count

    this.tight = false; // loose/tight mode for lists

    this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)

    this.listIndent = -1; // indent of the current list block (-1 if there isn't any)
    // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
    // used in lists to determine if they interrupt a paragraph

    this.parentType = 'root';
    this.level = 0; // renderer

    this.result = ''; // Create caches
    // Generate markers.

    s = this.src;
    indent_found = false;

    for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
      ch = s.charCodeAt(pos);

      if (!indent_found) {
        if (isSpace$6(ch)) {
          indent++;

          if (ch === 0x09) {
            offset += 4 - offset % 4;
          } else {
            offset++;
          }

          continue;
        } else {
          indent_found = true;
        }
      }

      if (ch === 0x0A || pos === len - 1) {
        if (ch !== 0x0A) {
          pos++;
        }

        this.bMarks.push(start);
        this.eMarks.push(pos);
        this.tShift.push(indent);
        this.sCount.push(offset);
        this.bsCount.push(0);
        indent_found = false;
        indent = 0;
        offset = 0;
        start = pos + 1;
      }
    } // Push fake entry to simplify cache bounds checks


    this.bMarks.push(s.length);
    this.eMarks.push(s.length);
    this.tShift.push(0);
    this.sCount.push(0);
    this.bsCount.push(0);
    this.lineMax = this.bMarks.length - 1; // don't count last fake line
  } // Push new token to "stream".
  //


  StateBlock.prototype.push = function (type, tag, nesting) {
    var token$1 = new token(type, tag, nesting);
    token$1.block = true;
    if (nesting < 0) this.level--; // closing tag

    token$1.level = this.level;
    if (nesting > 0) this.level++; // opening tag

    this.tokens.push(token$1);
    return token$1;
  };

  StateBlock.prototype.isEmpty = function isEmpty(line) {
    return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
  };

  StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
    for (var max = this.lineMax; from < max; from++) {
      if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
        break;
      }
    }

    return from;
  }; // Skip spaces from given position.


  StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
    var ch;

    for (var max = this.src.length; pos < max; pos++) {
      ch = this.src.charCodeAt(pos);

      if (!isSpace$6(ch)) {
        break;
      }
    }

    return pos;
  }; // Skip spaces from given position in reverse.


  StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
    if (pos <= min) {
      return pos;
    }

    while (pos > min) {
      if (!isSpace$6(this.src.charCodeAt(--pos))) {
        return pos + 1;
      }
    }

    return pos;
  }; // Skip char codes from given position


  StateBlock.prototype.skipChars = function skipChars(pos, code) {
    for (var max = this.src.length; pos < max; pos++) {
      if (this.src.charCodeAt(pos) !== code) {
        break;
      }
    }

    return pos;
  }; // Skip char codes reverse from given position - 1


  StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
    if (pos <= min) {
      return pos;
    }

    while (pos > min) {
      if (code !== this.src.charCodeAt(--pos)) {
        return pos + 1;
      }
    }

    return pos;
  }; // cut lines range from source.


  StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
    var i,
        lineIndent,
        ch,
        first,
        last,
        queue,
        lineStart,
        line = begin;

    if (begin >= end) {
      return '';
    }

    queue = new Array(end - begin);

    for (i = 0; line < end; line++, i++) {
      lineIndent = 0;
      lineStart = first = this.bMarks[line];

      if (line + 1 < end || keepLastLF) {
        // No need for bounds check because we have fake entry on tail.
        last = this.eMarks[line] + 1;
      } else {
        last = this.eMarks[line];
      }

      while (first < last && lineIndent < indent) {
        ch = this.src.charCodeAt(first);

        if (isSpace$6(ch)) {
          if (ch === 0x09) {
            lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
          } else {
            lineIndent++;
          }
        } else if (first - lineStart < this.tShift[line]) {
          // patched tShift masked characters to look like spaces (blockquotes, list markers)
          lineIndent++;
        } else {
          break;
        }

        first++;
      }

      if (lineIndent > indent) {
        // partially expanding tabs in code blocks, e.g '\t\tfoobar'
        // with indent=2 becomes '  \tfoobar'
        queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
      } else {
        queue[i] = this.src.slice(first, last);
      }
    }

    return queue.join('');
  }; // re-export Token class to use in block rules


  StateBlock.prototype.Token = token;
  var state_block = StateBlock;
  var _rules$1 = [// First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ['table', table, ['paragraph', 'reference']], ['code', code], ['fence', fence, ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']], ['hr', hr, ['paragraph', 'reference', 'blockquote', 'list']], ['list', list, ['paragraph', 'reference', 'blockquote']], ['reference', reference], ['heading', heading, ['paragraph', 'reference', 'blockquote']], ['lheading', lheading], ['html_block', html_block, ['paragraph', 'reference', 'blockquote']], ['paragraph', paragraph]];
  /**
   * new ParserBlock()
   **/

  function ParserBlock() {
    /**
     * ParserBlock#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of block rules.
     **/
    this.ruler = new ruler();

    for (var i = 0; i < _rules$1.length; i++) {
      this.ruler.push(_rules$1[i][0], _rules$1[i][1], {
        alt: (_rules$1[i][2] || []).slice()
      });
    }
  } // Generate tokens for input range
  //


  ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
    var ok,
        i,
        rules = this.ruler.getRules(''),
        len = rules.length,
        line = startLine,
        hasEmptyLines = false,
        maxNesting = state.md.options.maxNesting;

    while (line < endLine) {
      state.line = line = state.skipEmptyLines(line);

      if (line >= endLine) {
        break;
      } // Termination condition for nested calls.
      // Nested calls currently used for blockquotes & lists


      if (state.sCount[line] < state.blkIndent) {
        break;
      } // If nesting level exceeded - skip tail to the end. That's not ordinary
      // situation and we should not care about content.


      if (state.level >= maxNesting) {
        state.line = endLine;
        break;
      } // Try all possible rules.
      // On success, rule should:
      //
      // - update `state.line`
      // - update `state.tokens`
      // - return true


      for (i = 0; i < len; i++) {
        ok = rules[i](state, line, endLine, false);

        if (ok) {
          break;
        }
      } // set state.tight if we had an empty line before current tag
      // i.e. latest empty line should not count


      state.tight = !hasEmptyLines; // paragraph might "eat" one newline after it in nested lists

      if (state.isEmpty(state.line - 1)) {
        hasEmptyLines = true;
      }

      line = state.line;

      if (line < endLine && state.isEmpty(line)) {
        hasEmptyLines = true;
        line++;
        state.line = line;
      }
    }
  };
  /**
   * ParserBlock.parse(str, md, env, outTokens)
   *
   * Process input string and push block tokens into `outTokens`
   **/


  ParserBlock.prototype.parse = function (src, md, env, outTokens) {
    var state;

    if (!src) {
      return;
    }

    state = new this.State(src, md, env, outTokens);
    this.tokenize(state, state.line, state.lineMax);
  };

  ParserBlock.prototype.State = state_block;
  var parser_block = ParserBlock; // Skip text characters for text token, place those to pending buffer
  // Rule to skip pure text
  // '{}$%@~+=:' reserved for extentions
  // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
  // !!!! Don't confuse with "Markdown ASCII Punctuation" chars
  // http://spec.commonmark.org/0.15/#ascii-punctuation-character

  function isTerminatorChar(ch) {
    switch (ch) {
      case 0x0A
      /* \n */
      :
      case 0x21
      /* ! */
      :
      case 0x23
      /* # */
      :
      case 0x24
      /* $ */
      :
      case 0x25
      /* % */
      :
      case 0x26
      /* & */
      :
      case 0x2A
      /* * */
      :
      case 0x2B
      /* + */
      :
      case 0x2D
      /* - */
      :
      case 0x3A
      /* : */
      :
      case 0x3C
      /* < */
      :
      case 0x3D
      /* = */
      :
      case 0x3E
      /* > */
      :
      case 0x40
      /* @ */
      :
      case 0x5B
      /* [ */
      :
      case 0x5C
      /* \ */
      :
      case 0x5D
      /* ] */
      :
      case 0x5E
      /* ^ */
      :
      case 0x5F
      /* _ */
      :
      case 0x60
      /* ` */
      :
      case 0x7B
      /* { */
      :
      case 0x7D
      /* } */
      :
      case 0x7E
      /* ~ */
      :
        return true;

      default:
        return false;
    }
  }

  var text = function text(state, silent) {
    var pos = state.pos;

    while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
      pos++;
    }

    if (pos === state.pos) {
      return false;
    }

    if (!silent) {
      state.pending += state.src.slice(state.pos, pos);
    }

    state.pos = pos;
    return true;
  };

  var isSpace$7 = utils.isSpace;

  var newline = function newline(state, silent) {
    var pmax,
        max,
        pos = state.pos;

    if (state.src.charCodeAt(pos) !== 0x0A
    /* \n */
    ) {
        return false;
      }

    pmax = state.pending.length - 1;
    max = state.posMax; // '  \n' -> hardbreak
    // Lookup in pending chars is bad practice! Don't copy to other rules!
    // Pending string is stored in concat mode, indexed lookups will cause
    // convertion to flat mode.

    if (!silent) {
      if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
        if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
          state.pending = state.pending.replace(/ +$/, '');
          state.push('hardbreak', 'br', 0);
        } else {
          state.pending = state.pending.slice(0, -1);
          state.push('softbreak', 'br', 0);
        }
      } else {
        state.push('softbreak', 'br', 0);
      }
    }

    pos++; // skip heading spaces for next line

    while (pos < max && isSpace$7(state.src.charCodeAt(pos))) {
      pos++;
    }

    state.pos = pos;
    return true;
  };

  var isSpace$8 = utils.isSpace;
  var ESCAPED = [];

  for (var i = 0; i < 256; i++) {
    ESCAPED.push(0);
  }

  '\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {
    ESCAPED[ch.charCodeAt(0)] = 1;
  });

  var _escape = function escape(state, silent) {
    var ch,
        pos = state.pos,
        max = state.posMax;

    if (state.src.charCodeAt(pos) !== 0x5C
    /* \ */
    ) {
        return false;
      }

    pos++;

    if (pos < max) {
      ch = state.src.charCodeAt(pos);

      if (ch < 256 && ESCAPED[ch] !== 0) {
        if (!silent) {
          state.pending += state.src[pos];
        }

        state.pos += 2;
        return true;
      }

      if (ch === 0x0A) {
        if (!silent) {
          state.push('hardbreak', 'br', 0);
        }

        pos++; // skip leading whitespaces from next line

        while (pos < max) {
          ch = state.src.charCodeAt(pos);

          if (!isSpace$8(ch)) {
            break;
          }

          pos++;
        }

        state.pos = pos;
        return true;
      }
    }

    if (!silent) {
      state.pending += '\\';
    }

    state.pos++;
    return true;
  }; // Parse backticks


  var backticks = function backtick(state, silent) {
    var start,
        max,
        marker,
        matchStart,
        matchEnd,
        token,
        pos = state.pos,
        ch = state.src.charCodeAt(pos);

    if (ch !== 0x60
    /* ` */
    ) {
        return false;
      }

    start = pos;
    pos++;
    max = state.posMax;

    while (pos < max && state.src.charCodeAt(pos) === 0x60
    /* ` */
    ) {
      pos++;
    }

    marker = state.src.slice(start, pos);
    matchStart = matchEnd = pos;

    while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
      matchEnd = matchStart + 1;

      while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60
      /* ` */
      ) {
        matchEnd++;
      }

      if (matchEnd - matchStart === marker.length) {
        if (!silent) {
          token = state.push('code_inline', 'code', 0);
          token.markup = marker;
          token.content = state.src.slice(pos, matchStart).replace(/\n/g, ' ').replace(/^ (.+) $/, '$1');
        }

        state.pos = matchEnd;
        return true;
      }
    }

    if (!silent) {
      state.pending += marker;
    }

    state.pos += marker.length;
    return true;
  }; // ~~strike through~~
  // Insert each marker as a separate text token, and add it to delimiter list
  //


  var tokenize = function strikethrough(state, silent) {
    var i,
        scanned,
        token,
        len,
        ch,
        start = state.pos,
        marker = state.src.charCodeAt(start);

    if (silent) {
      return false;
    }

    if (marker !== 0x7E
    /* ~ */
    ) {
        return false;
      }

    scanned = state.scanDelims(state.pos, true);
    len = scanned.length;
    ch = String.fromCharCode(marker);

    if (len < 2) {
      return false;
    }

    if (len % 2) {
      token = state.push('text', '', 0);
      token.content = ch;
      len--;
    }

    for (i = 0; i < len; i += 2) {
      token = state.push('text', '', 0);
      token.content = ch + ch;
      state.delimiters.push({
        marker: marker,
        length: 0,
        // disable "rule of 3" length checks meant for emphasis
        jump: i,
        token: state.tokens.length - 1,
        end: -1,
        open: scanned.can_open,
        close: scanned.can_close
      });
    }

    state.pos += scanned.length;
    return true;
  };

  function postProcess(state, delimiters) {
    var i,
        j,
        startDelim,
        endDelim,
        token,
        loneMarkers = [],
        max = delimiters.length;

    for (i = 0; i < max; i++) {
      startDelim = delimiters[i];

      if (startDelim.marker !== 0x7E
      /* ~ */
      ) {
          continue;
        }

      if (startDelim.end === -1) {
        continue;
      }

      endDelim = delimiters[startDelim.end];
      token = state.tokens[startDelim.token];
      token.type = 's_open';
      token.tag = 's';
      token.nesting = 1;
      token.markup = '~~';
      token.content = '';
      token = state.tokens[endDelim.token];
      token.type = 's_close';
      token.tag = 's';
      token.nesting = -1;
      token.markup = '~~';
      token.content = '';

      if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {
        loneMarkers.push(endDelim.token - 1);
      }
    } // If a marker sequence has an odd number of characters, it's splitted
    // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
    // start of the sequence.
    //
    // So, we have to move all those markers after subsequent s_close tags.
    //


    while (loneMarkers.length) {
      i = loneMarkers.pop();
      j = i + 1;

      while (j < state.tokens.length && state.tokens[j].type === 's_close') {
        j++;
      }

      j--;

      if (i !== j) {
        token = state.tokens[j];
        state.tokens[j] = state.tokens[i];
        state.tokens[i] = token;
      }
    }
  } // Walk through delimiter list and replace text tokens with tags
  //


  var postProcess_1 = function strikethrough(state) {
    var curr,
        tokens_meta = state.tokens_meta,
        max = state.tokens_meta.length;
    postProcess(state, state.delimiters);

    for (curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        postProcess(state, tokens_meta[curr].delimiters);
      }
    }
  };

  var strikethrough = {
    tokenize: tokenize,
    postProcess: postProcess_1
  }; // Process *this* and _that_
  // Insert each marker as a separate text token, and add it to delimiter list
  //

  var tokenize$1 = function emphasis(state, silent) {
    var i,
        scanned,
        token,
        start = state.pos,
        marker = state.src.charCodeAt(start);

    if (silent) {
      return false;
    }

    if (marker !== 0x5F
    /* _ */
    && marker !== 0x2A
    /* * */
    ) {
        return false;
      }

    scanned = state.scanDelims(state.pos, marker === 0x2A);

    for (i = 0; i < scanned.length; i++) {
      token = state.push('text', '', 0);
      token.content = String.fromCharCode(marker);
      state.delimiters.push({
        // Char code of the starting marker (number).
        //
        marker: marker,
        // Total length of these series of delimiters.
        //
        length: scanned.length,
        // An amount of characters before this one that's equivalent to
        // current one. In plain English: if this delimiter does not open
        // an emphasis, neither do previous `jump` characters.
        //
        // Used to skip sequences like "*****" in one step, for 1st asterisk
        // value will be 0, for 2nd it's 1 and so on.
        //
        jump: i,
        // A position of the token this delimiter corresponds to.
        //
        token: state.tokens.length - 1,
        // If this delimiter is matched as a valid opener, `end` will be
        // equal to its position, otherwise it's `-1`.
        //
        end: -1,
        // Boolean flags that determine if this delimiter could open or close
        // an emphasis.
        //
        open: scanned.can_open,
        close: scanned.can_close
      });
    }

    state.pos += scanned.length;
    return true;
  };

  function postProcess$1(state, delimiters) {
    var i,
        startDelim,
        endDelim,
        token,
        ch,
        isStrong,
        max = delimiters.length;

    for (i = max - 1; i >= 0; i--) {
      startDelim = delimiters[i];

      if (startDelim.marker !== 0x5F
      /* _ */
      && startDelim.marker !== 0x2A
      /* * */
      ) {
          continue;
        } // Process only opening markers


      if (startDelim.end === -1) {
        continue;
      }

      endDelim = delimiters[startDelim.end]; // If the previous delimiter has the same marker and is adjacent to this one,
      // merge those into one strong delimiter.
      //
      // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
      //

      isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1 && delimiters[i - 1].marker === startDelim.marker;
      ch = String.fromCharCode(startDelim.marker);
      token = state.tokens[startDelim.token];
      token.type = isStrong ? 'strong_open' : 'em_open';
      token.tag = isStrong ? 'strong' : 'em';
      token.nesting = 1;
      token.markup = isStrong ? ch + ch : ch;
      token.content = '';
      token = state.tokens[endDelim.token];
      token.type = isStrong ? 'strong_close' : 'em_close';
      token.tag = isStrong ? 'strong' : 'em';
      token.nesting = -1;
      token.markup = isStrong ? ch + ch : ch;
      token.content = '';

      if (isStrong) {
        state.tokens[delimiters[i - 1].token].content = '';
        state.tokens[delimiters[startDelim.end + 1].token].content = '';
        i--;
      }
    }
  } // Walk through delimiter list and replace text tokens with tags
  //


  var postProcess_1$1 = function emphasis(state) {
    var curr,
        tokens_meta = state.tokens_meta,
        max = state.tokens_meta.length;
    postProcess$1(state, state.delimiters);

    for (curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        postProcess$1(state, tokens_meta[curr].delimiters);
      }
    }
  };

  var emphasis = {
    tokenize: tokenize$1,
    postProcess: postProcess_1$1
  };
  var normalizeReference$1 = utils.normalizeReference;
  var isSpace$9 = utils.isSpace;

  var link = function link(state, silent) {
    var attrs,
        code,
        label,
        labelEnd,
        labelStart,
        pos,
        res,
        ref,
        title,
        token,
        href = '',
        oldPos = state.pos,
        max = state.posMax,
        start = state.pos,
        parseReference = true;

    if (state.src.charCodeAt(state.pos) !== 0x5B
    /* [ */
    ) {
        return false;
      }

    labelStart = state.pos + 1;
    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true); // parser failed to find ']', so it's not a valid link

    if (labelEnd < 0) {
      return false;
    }

    pos = labelEnd + 1;

    if (pos < max && state.src.charCodeAt(pos) === 0x28
    /* ( */
    ) {
        //
        // Inline link
        //
        // might have found a valid shortcut link, disable reference parsing
        parseReference = false; // [link](  <href>  "title"  )
        //        ^^ skipping these spaces

        pos++;

        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);

          if (!isSpace$9(code) && code !== 0x0A) {
            break;
          }
        }

        if (pos >= max) {
          return false;
        } // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination


        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);

        if (res.ok) {
          href = state.md.normalizeLink(res.str);

          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }
        } // [link](  <href>  "title"  )
        //                ^^ skipping these spaces


        start = pos;

        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);

          if (!isSpace$9(code) && code !== 0x0A) {
            break;
          }
        } // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title


        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);

        if (pos < max && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos; // [link](  <href>  "title"  )
          //                         ^^ skipping these spaces

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace$9(code) && code !== 0x0A) {
              break;
            }
          }
        } else {
          title = '';
        }

        if (pos >= max || state.src.charCodeAt(pos) !== 0x29
        /* ) */
        ) {
            // parsing a valid shortcut link failed, fallback to reference
            parseReference = true;
          }

        pos++;
      }

    if (parseReference) {
      //
      // Link reference
      //
      if (typeof state.env.references === 'undefined') {
        return false;
      }

      if (pos < max && state.src.charCodeAt(pos) === 0x5B
      /* [ */
      ) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);

          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
        pos = labelEnd + 1;
      } // covers label === '' and label === undefined
      // (collapsed reference link and shortcut reference link respectively)


      if (!label) {
        label = state.src.slice(labelStart, labelEnd);
      }

      ref = state.env.references[normalizeReference$1(label)];

      if (!ref) {
        state.pos = oldPos;
        return false;
      }

      href = ref.href;
      title = ref.title;
    } //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //


    if (!silent) {
      state.pos = labelStart;
      state.posMax = labelEnd;
      token = state.push('link_open', 'a', 1);
      token.attrs = attrs = [['href', href]];

      if (title) {
        attrs.push(['title', title]);
      }

      state.md.inline.tokenize(state);
      token = state.push('link_close', 'a', -1);
    }

    state.pos = pos;
    state.posMax = max;
    return true;
  };

  var normalizeReference$2 = utils.normalizeReference;
  var isSpace$a = utils.isSpace;

  var image$1 = function image(state, silent) {
    var attrs,
        code,
        content,
        label,
        labelEnd,
        labelStart,
        pos,
        ref,
        res,
        title,
        token,
        tokens,
        start,
        href = '',
        oldPos = state.pos,
        max = state.posMax;

    if (state.src.charCodeAt(state.pos) !== 0x21
    /* ! */
    ) {
        return false;
      }

    if (state.src.charCodeAt(state.pos + 1) !== 0x5B
    /* [ */
    ) {
        return false;
      }

    labelStart = state.pos + 2;
    labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false); // parser failed to find ']', so it's not a valid link

    if (labelEnd < 0) {
      return false;
    }

    pos = labelEnd + 1;

    if (pos < max && state.src.charCodeAt(pos) === 0x28
    /* ( */
    ) {
        //
        // Inline link
        //
        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;

        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);

          if (!isSpace$a(code) && code !== 0x0A) {
            break;
          }
        }

        if (pos >= max) {
          return false;
        } // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination


        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);

        if (res.ok) {
          href = state.md.normalizeLink(res.str);

          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }
        } // [link](  <href>  "title"  )
        //                ^^ skipping these spaces


        start = pos;

        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);

          if (!isSpace$a(code) && code !== 0x0A) {
            break;
          }
        } // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title


        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);

        if (pos < max && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos; // [link](  <href>  "title"  )
          //                         ^^ skipping these spaces

          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);

            if (!isSpace$a(code) && code !== 0x0A) {
              break;
            }
          }
        } else {
          title = '';
        }

        if (pos >= max || state.src.charCodeAt(pos) !== 0x29
        /* ) */
        ) {
            state.pos = oldPos;
            return false;
          }

        pos++;
      } else {
      //
      // Link reference
      //
      if (typeof state.env.references === 'undefined') {
        return false;
      }

      if (pos < max && state.src.charCodeAt(pos) === 0x5B
      /* [ */
      ) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);

          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
        pos = labelEnd + 1;
      } // covers label === '' and label === undefined
      // (collapsed reference link and shortcut reference link respectively)


      if (!label) {
        label = state.src.slice(labelStart, labelEnd);
      }

      ref = state.env.references[normalizeReference$2(label)];

      if (!ref) {
        state.pos = oldPos;
        return false;
      }

      href = ref.href;
      title = ref.title;
    } //
    // We found the end of the link, and know for a fact it's a valid link;
    // so all that's left to do is to call tokenizer.
    //


    if (!silent) {
      content = state.src.slice(labelStart, labelEnd);
      state.md.inline.parse(content, state.md, state.env, tokens = []);
      token = state.push('image', 'img', 0);
      token.attrs = attrs = [['src', href], ['alt', '']];
      token.children = tokens;
      token.content = content;

      if (title) {
        attrs.push(['title', title]);
      }
    }

    state.pos = pos;
    state.posMax = max;
    return true;
  }; // Process autolinks '<protocol:...>'

  /*eslint max-len:0*/


  var EMAIL_RE = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
  var AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;

  var autolink = function autolink(state, silent) {
    var tail,
        linkMatch,
        emailMatch,
        url,
        fullUrl,
        token,
        pos = state.pos;

    if (state.src.charCodeAt(pos) !== 0x3C
    /* < */
    ) {
        return false;
      }

    tail = state.src.slice(pos);

    if (tail.indexOf('>') < 0) {
      return false;
    }

    if (AUTOLINK_RE.test(tail)) {
      linkMatch = tail.match(AUTOLINK_RE);
      url = linkMatch[0].slice(1, -1);
      fullUrl = state.md.normalizeLink(url);

      if (!state.md.validateLink(fullUrl)) {
        return false;
      }

      if (!silent) {
        token = state.push('link_open', 'a', 1);
        token.attrs = [['href', fullUrl]];
        token.markup = 'autolink';
        token.info = 'auto';
        token = state.push('text', '', 0);
        token.content = state.md.normalizeLinkText(url);
        token = state.push('link_close', 'a', -1);
        token.markup = 'autolink';
        token.info = 'auto';
      }

      state.pos += linkMatch[0].length;
      return true;
    }

    if (EMAIL_RE.test(tail)) {
      emailMatch = tail.match(EMAIL_RE);
      url = emailMatch[0].slice(1, -1);
      fullUrl = state.md.normalizeLink('mailto:' + url);

      if (!state.md.validateLink(fullUrl)) {
        return false;
      }

      if (!silent) {
        token = state.push('link_open', 'a', 1);
        token.attrs = [['href', fullUrl]];
        token.markup = 'autolink';
        token.info = 'auto';
        token = state.push('text', '', 0);
        token.content = state.md.normalizeLinkText(url);
        token = state.push('link_close', 'a', -1);
        token.markup = 'autolink';
        token.info = 'auto';
      }

      state.pos += emailMatch[0].length;
      return true;
    }

    return false;
  };

  var HTML_TAG_RE$1 = html_re.HTML_TAG_RE;

  function isLetter(ch) {
    /*eslint no-bitwise:0*/
    var lc = ch | 0x20; // to lower case

    return lc >= 0x61
    /* a */
    && lc <= 0x7a
    /* z */
    ;
  }

  var html_inline = function html_inline(state, silent) {
    var ch,
        match,
        max,
        token,
        pos = state.pos;

    if (!state.md.options.html) {
      return false;
    } // Check start


    max = state.posMax;

    if (state.src.charCodeAt(pos) !== 0x3C
    /* < */
    || pos + 2 >= max) {
      return false;
    } // Quick fail on second char


    ch = state.src.charCodeAt(pos + 1);

    if (ch !== 0x21
    /* ! */
    && ch !== 0x3F
    /* ? */
    && ch !== 0x2F
    /* / */
    && !isLetter(ch)) {
      return false;
    }

    match = state.src.slice(pos).match(HTML_TAG_RE$1);

    if (!match) {
      return false;
    }

    if (!silent) {
      token = state.push('html_inline', '', 0);
      token.content = state.src.slice(pos, pos + match[0].length);
    }

    state.pos += match[0].length;
    return true;
  };

  var has = utils.has;
  var isValidEntityCode = utils.isValidEntityCode;
  var fromCodePoint = utils.fromCodePoint;
  var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
  var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;

  var entity = function entity(state, silent) {
    var ch,
        code,
        match,
        pos = state.pos,
        max = state.posMax;

    if (state.src.charCodeAt(pos) !== 0x26
    /* & */
    ) {
        return false;
      }

    if (pos + 1 < max) {
      ch = state.src.charCodeAt(pos + 1);

      if (ch === 0x23
      /* # */
      ) {
          match = state.src.slice(pos).match(DIGITAL_RE);

          if (match) {
            if (!silent) {
              code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
              state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
            }

            state.pos += match[0].length;
            return true;
          }
        } else {
        match = state.src.slice(pos).match(NAMED_RE);

        if (match) {
          if (has(entities$2, match[1])) {
            if (!silent) {
              state.pending += entities$2[match[1]];
            }

            state.pos += match[0].length;
            return true;
          }
        }
      }
    }

    if (!silent) {
      state.pending += '&';
    }

    state.pos++;
    return true;
  }; // For each opening emphasis-like marker find a matching closing one


  function processDelimiters(state, delimiters) {
    var closerIdx,
        openerIdx,
        closer,
        opener,
        minOpenerIdx,
        newMinOpenerIdx,
        isOddMatch,
        lastJump,
        openersBottom = {},
        max = delimiters.length;

    for (closerIdx = 0; closerIdx < max; closerIdx++) {
      closer = delimiters[closerIdx]; // Length is only used for emphasis-specific "rule of 3",
      // if it's not defined (in strikethrough or 3rd party plugins),
      // we can default it to 0 to disable those checks.
      //

      closer.length = closer.length || 0;
      if (!closer.close) continue; // Previously calculated lower bounds (previous fails)
      // for each marker and each delimiter length modulo 3.

      if (!openersBottom.hasOwnProperty(closer.marker)) {
        openersBottom[closer.marker] = [-1, -1, -1];
      }

      minOpenerIdx = openersBottom[closer.marker][closer.length % 3];
      newMinOpenerIdx = -1;
      openerIdx = closerIdx - closer.jump - 1;

      for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {
        opener = delimiters[openerIdx];
        if (opener.marker !== closer.marker) continue;
        if (newMinOpenerIdx === -1) newMinOpenerIdx = openerIdx;

        if (opener.open && opener.end < 0 && opener.level === closer.level) {
          isOddMatch = false; // from spec:
          //
          // If one of the delimiters can both open and close emphasis, then the
          // sum of the lengths of the delimiter runs containing the opening and
          // closing delimiters must not be a multiple of 3 unless both lengths
          // are multiples of 3.
          //

          if (opener.close || closer.open) {
            if ((opener.length + closer.length) % 3 === 0) {
              if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                isOddMatch = true;
              }
            }
          }

          if (!isOddMatch) {
            // If previous delimiter cannot be an opener, we can safely skip
            // the entire sequence in future checks. This is required to make
            // sure algorithm has linear complexity (see *_*_*_*_*_... case).
            //
            lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? delimiters[openerIdx - 1].jump + 1 : 0;
            closer.jump = closerIdx - openerIdx + lastJump;
            closer.open = false;
            opener.end = closerIdx;
            opener.jump = lastJump;
            opener.close = false;
            newMinOpenerIdx = -1;
            break;
          }
        }
      }

      if (newMinOpenerIdx !== -1) {
        // If match for this delimiter run failed, we want to set lower bound for
        // future lookups. This is required to make sure algorithm has linear
        // complexity.
        //
        // See details here:
        // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
        //
        openersBottom[closer.marker][(closer.length || 0) % 3] = newMinOpenerIdx;
      }
    }
  }

  var balance_pairs = function link_pairs(state) {
    var curr,
        tokens_meta = state.tokens_meta,
        max = state.tokens_meta.length;
    processDelimiters(state, state.delimiters);

    for (curr = 0; curr < max; curr++) {
      if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
        processDelimiters(state, tokens_meta[curr].delimiters);
      }
    }
  }; // Clean up tokens after emphasis and strikethrough postprocessing:


  var text_collapse = function text_collapse(state) {
    var curr,
        last,
        level = 0,
        tokens = state.tokens,
        max = state.tokens.length;

    for (curr = last = 0; curr < max; curr++) {
      // re-calculate levels after emphasis/strikethrough turns some text nodes
      // into opening/closing tags
      if (tokens[curr].nesting < 0) level--; // closing tag

      tokens[curr].level = level;
      if (tokens[curr].nesting > 0) level++; // opening tag

      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {
        // collapse two adjacent text nodes
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
      } else {
        if (curr !== last) {
          tokens[last] = tokens[curr];
        }

        last++;
      }
    }

    if (curr !== last) {
      tokens.length = last;
    }
  };

  var isWhiteSpace$1 = utils.isWhiteSpace;
  var isPunctChar$1 = utils.isPunctChar;
  var isMdAsciiPunct$1 = utils.isMdAsciiPunct;

  function StateInline(src, md, env, outTokens) {
    this.src = src;
    this.env = env;
    this.md = md;
    this.tokens = outTokens;
    this.tokens_meta = Array(outTokens.length);
    this.pos = 0;
    this.posMax = this.src.length;
    this.level = 0;
    this.pending = '';
    this.pendingLevel = 0; // Stores { start: end } pairs. Useful for backtrack
    // optimization of pairs parse (emphasis, strikes).

    this.cache = {}; // List of emphasis-like delimiters for current tag

    this.delimiters = []; // Stack of delimiter lists for upper level tags

    this._prev_delimiters = [];
  } // Flush pending text
  //


  StateInline.prototype.pushPending = function () {
    var token$1 = new token('text', '', 0);
    token$1.content = this.pending;
    token$1.level = this.pendingLevel;
    this.tokens.push(token$1);
    this.pending = '';
    return token$1;
  }; // Push new token to "stream".
  // If pending text exists - flush it as text token
  //


  StateInline.prototype.push = function (type, tag, nesting) {
    if (this.pending) {
      this.pushPending();
    }

    var token$1 = new token(type, tag, nesting);
    var token_meta = null;

    if (nesting < 0) {
      // closing tag
      this.level--;
      this.delimiters = this._prev_delimiters.pop();
    }

    token$1.level = this.level;

    if (nesting > 0) {
      // opening tag
      this.level++;

      this._prev_delimiters.push(this.delimiters);

      this.delimiters = [];
      token_meta = {
        delimiters: this.delimiters
      };
    }

    this.pendingLevel = this.level;
    this.tokens.push(token$1);
    this.tokens_meta.push(token_meta);
    return token$1;
  }; // Scan a sequence of emphasis-like markers, and determine whether
  // it can start an emphasis sequence or end an emphasis sequence.
  //
  //  - start - position to scan from (it should point at a valid marker);
  //  - canSplitWord - determine if these markers can be found inside a word
  //


  StateInline.prototype.scanDelims = function (start, canSplitWord) {
    var pos = start,
        lastChar,
        nextChar,
        count,
        can_open,
        can_close,
        isLastWhiteSpace,
        isLastPunctChar,
        isNextWhiteSpace,
        isNextPunctChar,
        left_flanking = true,
        right_flanking = true,
        max = this.posMax,
        marker = this.src.charCodeAt(start); // treat beginning of the line as a whitespace

    lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

    while (pos < max && this.src.charCodeAt(pos) === marker) {
      pos++;
    }

    count = pos - start; // treat end of the line as a whitespace

    nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;
    isLastPunctChar = isMdAsciiPunct$1(lastChar) || isPunctChar$1(String.fromCharCode(lastChar));
    isNextPunctChar = isMdAsciiPunct$1(nextChar) || isPunctChar$1(String.fromCharCode(nextChar));
    isLastWhiteSpace = isWhiteSpace$1(lastChar);
    isNextWhiteSpace = isWhiteSpace$1(nextChar);

    if (isNextWhiteSpace) {
      left_flanking = false;
    } else if (isNextPunctChar) {
      if (!(isLastWhiteSpace || isLastPunctChar)) {
        left_flanking = false;
      }
    }

    if (isLastWhiteSpace) {
      right_flanking = false;
    } else if (isLastPunctChar) {
      if (!(isNextWhiteSpace || isNextPunctChar)) {
        right_flanking = false;
      }
    }

    if (!canSplitWord) {
      can_open = left_flanking && (!right_flanking || isLastPunctChar);
      can_close = right_flanking && (!left_flanking || isNextPunctChar);
    } else {
      can_open = left_flanking;
      can_close = right_flanking;
    }

    return {
      can_open: can_open,
      can_close: can_close,
      length: count
    };
  }; // re-export Token class to use in block rules


  StateInline.prototype.Token = token;
  var state_inline = StateInline; ////////////////////////////////////////////////////////////////////////////////
  // Parser rules

  var _rules$2 = [['text', text], ['newline', newline], ['escape', _escape], ['backticks', backticks], ['strikethrough', strikethrough.tokenize], ['emphasis', emphasis.tokenize], ['link', link], ['image', image$1], ['autolink', autolink], ['html_inline', html_inline], ['entity', entity]];
  var _rules2 = [['balance_pairs', balance_pairs], ['strikethrough', strikethrough.postProcess], ['emphasis', emphasis.postProcess], ['text_collapse', text_collapse]];
  /**
   * new ParserInline()
   **/

  function ParserInline() {
    var i;
    /**
     * ParserInline#ruler -> Ruler
     *
     * [[Ruler]] instance. Keep configuration of inline rules.
     **/

    this.ruler = new ruler();

    for (i = 0; i < _rules$2.length; i++) {
      this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
    }
    /**
     * ParserInline#ruler2 -> Ruler
     *
     * [[Ruler]] instance. Second ruler used for post-processing
     * (e.g. in emphasis-like rules).
     **/


    this.ruler2 = new ruler();

    for (i = 0; i < _rules2.length; i++) {
      this.ruler2.push(_rules2[i][0], _rules2[i][1]);
    }
  } // Skip single token by running all rules in validation mode;
  // returns `true` if any rule reported success
  //


  ParserInline.prototype.skipToken = function (state) {
    var ok,
        i,
        pos = state.pos,
        rules = this.ruler.getRules(''),
        len = rules.length,
        maxNesting = state.md.options.maxNesting,
        cache = state.cache;

    if (typeof cache[pos] !== 'undefined') {
      state.pos = cache[pos];
      return;
    }

    if (state.level < maxNesting) {
      for (i = 0; i < len; i++) {
        // Increment state.level and decrement it later to limit recursion.
        // It's harmless to do here, because no tokens are created. But ideally,
        // we'd need a separate private state variable for this purpose.
        //
        state.level++;
        ok = rules[i](state, true);
        state.level--;

        if (ok) {
          break;
        }
      }
    } else {
      // Too much nesting, just skip until the end of the paragraph.
      //
      // NOTE: this will cause links to behave incorrectly in the following case,
      //       when an amount of `[` is exactly equal to `maxNesting + 1`:
      //
      //       [[[[[[[[[[[[[[[[[[[[[foo]()
      //
      // TODO: remove this workaround when CM standard will allow nested links
      //       (we can replace it by preventing links from being parsed in
      //       validation mode)
      //
      state.pos = state.posMax;
    }

    if (!ok) {
      state.pos++;
    }

    cache[pos] = state.pos;
  }; // Generate tokens for input range
  //


  ParserInline.prototype.tokenize = function (state) {
    var ok,
        i,
        rules = this.ruler.getRules(''),
        len = rules.length,
        end = state.posMax,
        maxNesting = state.md.options.maxNesting;

    while (state.pos < end) {
      // Try all possible rules.
      // On success, rule should:
      //
      // - update `state.pos`
      // - update `state.tokens`
      // - return true
      if (state.level < maxNesting) {
        for (i = 0; i < len; i++) {
          ok = rules[i](state, false);

          if (ok) {
            break;
          }
        }
      }

      if (ok) {
        if (state.pos >= end) {
          break;
        }

        continue;
      }

      state.pending += state.src[state.pos++];
    }

    if (state.pending) {
      state.pushPending();
    }
  };
  /**
   * ParserInline.parse(str, md, env, outTokens)
   *
   * Process input string and push inline tokens into `outTokens`
   **/


  ParserInline.prototype.parse = function (str, md, env, outTokens) {
    var i, rules, len;
    var state = new this.State(str, md, env, outTokens);
    this.tokenize(state);
    rules = this.ruler2.getRules('');
    len = rules.length;

    for (i = 0; i < len; i++) {
      rules[i](state);
    }
  };

  ParserInline.prototype.State = state_inline;
  var parser_inline = ParserInline;

  var re = function (opts) {
    var re = {}; // Use direct extract instead of `regenerate` to reduse browserified size

    re.src_Any = regex$1.source;
    re.src_Cc = regex$2.source;
    re.src_Z = regex$4.source;
    re.src_P = regex.source; // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)

    re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|'); // \p{\Z\Cc} (white spaces + control)

    re.src_ZCc = [re.src_Z, re.src_Cc].join('|'); // Experimental. List of chars, completely prohibited in links
    // because can separate it from other part of text

    var text_separators = '[><\uff5c]'; // All possible word characters (everything without punctuation, spaces & controls)
    // Defined via punctuation & spaces to save space
    // Should be something like \p{\L\N\S\M} (\w but without `_`)

    re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'; // The same as abothe but without [0-9]
    // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';
    ////////////////////////////////////////////////////////////////////////////////

    re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'; // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.

    re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';
    re.src_port = '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';
    re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';
    re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-]).|' + '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' + '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' + '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' + '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' + "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" + "\\'(?=" + re.src_pseudo_letter + '|[-]).|' + // allow `I'm_king` if no pair found
    '\\.{2,4}[a-zA-Z0-9%/]|' + // github has ... in commit range links,
    // google has .... in links (issue #66)
    // Restrict to
    // - english
    // - percent-encoded
    // - parts of file path
    // until more examples found.
    '\\.(?!' + re.src_ZCc + '|[.]).|' + (opts && opts['---'] ? '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
    : '\\-+|') + '\\,(?!' + re.src_ZCc + ').|' + // allow `,,,` in paths
    '\\!(?!' + re.src_ZCc + '|[!]).|' + '\\?(?!' + re.src_ZCc + '|[?]).' + ')+' + '|\\/' + ')?'; // Allow anything in markdown spec, forbid quote (") at the first position
    // because emails enclosed in quotes are far more common

    re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
    re.src_xn = 'xn--[a-z0-9\\-]{1,59}'; // More to read about domain names
    // http://serverfault.com/questions/638260/

    re.src_domain_root = // Allow letters & digits (http://test1)
    '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';
    re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';
    re.src_host = '(?:' + // Don't need IP check, because digits are already allowed in normal domain names
    //   src_ip4 +
    // '|' +
    '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain
    /*_root*/
    + ')' + ')';
    re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' + ')';
    re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';
    re.src_host_strict = re.src_host + re.src_host_terminator;
    re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
    re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
    re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
    re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator; ////////////////////////////////////////////////////////////////////////////////
    // Main rules
    // Rude test fuzzy links by host, for quick deny

    re.tpl_host_fuzzy_test = 'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';
    re.tpl_email_fuzzy = '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';
    re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';
    re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';
    return re;
  }; ////////////////////////////////////////////////////////////////////////////////
  // Helpers
  // Merge objects
  //


  function assign$1(obj
  /*from1, from2, from3, ...*/
  ) {
    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function (source) {
      if (!source) {
        return;
      }

      Object.keys(source).forEach(function (key) {
        obj[key] = source[key];
      });
    });
    return obj;
  }

  function _class(obj) {
    return Object.prototype.toString.call(obj);
  }

  function isString(obj) {
    return _class(obj) === '[object String]';
  }

  function isObject(obj) {
    return _class(obj) === '[object Object]';
  }

  function isRegExp(obj) {
    return _class(obj) === '[object RegExp]';
  }

  function isFunction(obj) {
    return _class(obj) === '[object Function]';
  }

  function escapeRE(str) {
    return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
  } ////////////////////////////////////////////////////////////////////////////////


  var defaultOptions = {
    fuzzyLink: true,
    fuzzyEmail: true,
    fuzzyIP: false
  };

  function isOptionsObj(obj) {
    return Object.keys(obj || {}).reduce(function (acc, k) {
      return acc || defaultOptions.hasOwnProperty(k);
    }, false);
  }

  var defaultSchemas = {
    'http:': {
      validate: function (text, pos, self) {
        var tail = text.slice(pos);

        if (!self.re.http) {
          // compile lazily, because "host"-containing variables can change on tlds update.
          self.re.http = new RegExp('^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');
        }

        if (self.re.http.test(tail)) {
          return tail.match(self.re.http)[0].length;
        }

        return 0;
      }
    },
    'https:': 'http:',
    'ftp:': 'http:',
    '//': {
      validate: function (text, pos, self) {
        var tail = text.slice(pos);

        if (!self.re.no_http) {
          // compile lazily, because "host"-containing variables can change on tlds update.
          self.re.no_http = new RegExp('^' + self.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
          // with code comments
          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');
        }

        if (self.re.no_http.test(tail)) {
          // should not be `://` & `///`, that protects from errors in protocol name
          if (pos >= 3 && text[pos - 3] === ':') {
            return 0;
          }

          if (pos >= 3 && text[pos - 3] === '/') {
            return 0;
          }

          return tail.match(self.re.no_http)[0].length;
        }

        return 0;
      }
    },
    'mailto:': {
      validate: function (text, pos, self) {
        var tail = text.slice(pos);

        if (!self.re.mailto) {
          self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');
        }

        if (self.re.mailto.test(tail)) {
          return tail.match(self.re.mailto)[0].length;
        }

        return 0;
      }
    }
  };
  /*eslint-disable max-len*/
  // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)

  var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'; // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead

  var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');
  /*eslint-enable max-len*/
  ////////////////////////////////////////////////////////////////////////////////

  function resetScanCache(self) {
    self.__index__ = -1;
    self.__text_cache__ = '';
  }

  function createValidator(re) {
    return function (text, pos) {
      var tail = text.slice(pos);

      if (re.test(tail)) {
        return tail.match(re)[0].length;
      }

      return 0;
    };
  }

  function createNormalizer() {
    return function (match, self) {
      self.normalize(match);
    };
  } // Schemas compiler. Build regexps.
  //


  function compile(self) {
    // Load & clone RE patterns.
    var re$1 = self.re = re(self.__opts__); // Define dynamic patterns

    var tlds = self.__tlds__.slice();

    self.onCompile();

    if (!self.__tlds_replaced__) {
      tlds.push(tlds_2ch_src_re);
    }

    tlds.push(re$1.src_xn);
    re$1.src_tlds = tlds.join('|');

    function untpl(tpl) {
      return tpl.replace('%TLDS%', re$1.src_tlds);
    }

    re$1.email_fuzzy = RegExp(untpl(re$1.tpl_email_fuzzy), 'i');
    re$1.link_fuzzy = RegExp(untpl(re$1.tpl_link_fuzzy), 'i');
    re$1.link_no_ip_fuzzy = RegExp(untpl(re$1.tpl_link_no_ip_fuzzy), 'i');
    re$1.host_fuzzy_test = RegExp(untpl(re$1.tpl_host_fuzzy_test), 'i'); //
    // Compile each schema
    //

    var aliases = [];
    self.__compiled__ = {}; // Reset compiled data

    function schemaError(name, val) {
      throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
    }

    Object.keys(self.__schemas__).forEach(function (name) {
      var val = self.__schemas__[name]; // skip disabled methods

      if (val === null) {
        return;
      }

      var compiled = {
        validate: null,
        link: null
      };
      self.__compiled__[name] = compiled;

      if (isObject(val)) {
        if (isRegExp(val.validate)) {
          compiled.validate = createValidator(val.validate);
        } else if (isFunction(val.validate)) {
          compiled.validate = val.validate;
        } else {
          schemaError(name, val);
        }

        if (isFunction(val.normalize)) {
          compiled.normalize = val.normalize;
        } else if (!val.normalize) {
          compiled.normalize = createNormalizer();
        } else {
          schemaError(name, val);
        }

        return;
      }

      if (isString(val)) {
        aliases.push(name);
        return;
      }

      schemaError(name, val);
    }); //
    // Compile postponed aliases
    //

    aliases.forEach(function (alias) {
      if (!self.__compiled__[self.__schemas__[alias]]) {
        // Silently fail on missed schemas to avoid errons on disable.
        // schemaError(alias, self.__schemas__[alias]);
        return;
      }

      self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
      self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
    }); //
    // Fake record for guessed links
    //

    self.__compiled__[''] = {
      validate: null,
      normalize: createNormalizer()
    }; //
    // Build schema condition
    //

    var slist = Object.keys(self.__compiled__).filter(function (name) {
      // Filter disabled & fake schemas
      return name.length > 0 && self.__compiled__[name];
    }).map(escapeRE).join('|'); // (?!_) cause 1.5x slowdown

    self.re.schema_test = RegExp('(^|(?!_)(?:[><\uff5c]|' + re$1.src_ZPCc + '))(' + slist + ')', 'i');
    self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re$1.src_ZPCc + '))(' + slist + ')', 'ig');
    self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i'); //
    // Cleanup
    //

    resetScanCache(self);
  }
  /**
   * class Match
   *
   * Match result. Single element of array, returned by [[LinkifyIt#match]]
   **/


  function Match(self, shift) {
    var start = self.__index__,
        end = self.__last_index__,
        text = self.__text_cache__.slice(start, end);
    /**
     * Match#schema -> String
     *
     * Prefix (protocol) for matched string.
     **/


    this.schema = self.__schema__.toLowerCase();
    /**
     * Match#index -> Number
     *
     * First position of matched string.
     **/

    this.index = start + shift;
    /**
     * Match#lastIndex -> Number
     *
     * Next position after matched string.
     **/

    this.lastIndex = end + shift;
    /**
     * Match#raw -> String
     *
     * Matched string.
     **/

    this.raw = text;
    /**
     * Match#text -> String
     *
     * Notmalized text of matched string.
     **/

    this.text = text;
    /**
     * Match#url -> String
     *
     * Normalized url of matched string.
     **/

    this.url = text;
  }

  function createMatch(self, shift) {
    var match = new Match(self, shift);

    self.__compiled__[match.schema].normalize(match, self);

    return match;
  }
  /**
   * class LinkifyIt
   **/

  /**
   * new LinkifyIt(schemas, options)
   * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
   * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
   *
   * Creates new linkifier instance with optional additional schemas.
   * Can be called without `new` keyword for convenience.
   *
   * By default understands:
   *
   * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
   * - "fuzzy" links and emails (example.com, foo@bar.com).
   *
   * `schemas` is an object, where each key/value describes protocol/rule:
   *
   * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
   *   for example). `linkify-it` makes shure that prefix is not preceeded with
   *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
   * - __value__ - rule to check tail after link prefix
   *   - _String_ - just alias to existing rule
   *   - _Object_
   *     - _validate_ - validator function (should return matched length on success),
   *       or `RegExp`.
   *     - _normalize_ - optional function to normalize text & url of matched result
   *       (for example, for @twitter mentions).
   *
   * `options`:
   *
   * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
   * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
   *   like version numbers. Default `false`.
   * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
   *
   **/


  function LinkifyIt(schemas, options) {
    if (!(this instanceof LinkifyIt)) {
      return new LinkifyIt(schemas, options);
    }

    if (!options) {
      if (isOptionsObj(schemas)) {
        options = schemas;
        schemas = {};
      }
    }

    this.__opts__ = assign$1({}, defaultOptions, options); // Cache last tested result. Used to skip repeating steps on next `match` call.

    this.__index__ = -1;
    this.__last_index__ = -1; // Next scan position

    this.__schema__ = '';
    this.__text_cache__ = '';
    this.__schemas__ = assign$1({}, defaultSchemas, schemas);
    this.__compiled__ = {};
    this.__tlds__ = tlds_default;
    this.__tlds_replaced__ = false;
    this.re = {};
    compile(this);
  }
  /** chainable
   * LinkifyIt#add(schema, definition)
   * - schema (String): rule name (fixed pattern prefix)
   * - definition (String|RegExp|Object): schema definition
   *
   * Add new rule definition. See constructor description for details.
   **/


  LinkifyIt.prototype.add = function add(schema, definition) {
    this.__schemas__[schema] = definition;
    compile(this);
    return this;
  };
  /** chainable
   * LinkifyIt#set(options)
   * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
   *
   * Set recognition options for links without schema.
   **/


  LinkifyIt.prototype.set = function set(options) {
    this.__opts__ = assign$1(this.__opts__, options);
    return this;
  };
  /**
   * LinkifyIt#test(text) -> Boolean
   *
   * Searches linkifiable pattern and returns `true` on success or `false` on fail.
   **/


  LinkifyIt.prototype.test = function test(text) {
    // Reset scan cache
    this.__text_cache__ = text;
    this.__index__ = -1;

    if (!text.length) {
      return false;
    }

    var m, ml, me, len, shift, next, re, tld_pos, at_pos; // try to scan for link with schema - that's the most simple rule

    if (this.re.schema_test.test(text)) {
      re = this.re.schema_search;
      re.lastIndex = 0;

      while ((m = re.exec(text)) !== null) {
        len = this.testSchemaAt(text, m[2], re.lastIndex);

        if (len) {
          this.__schema__ = m[2];
          this.__index__ = m.index + m[1].length;
          this.__last_index__ = m.index + m[0].length + len;
          break;
        }
      }
    }

    if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
      // guess schemaless links
      tld_pos = text.search(this.re.host_fuzzy_test);

      if (tld_pos >= 0) {
        // if tld is located after found link - no need to check fuzzy pattern
        if (this.__index__ < 0 || tld_pos < this.__index__) {
          if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
            shift = ml.index + ml[1].length;

            if (this.__index__ < 0 || shift < this.__index__) {
              this.__schema__ = '';
              this.__index__ = shift;
              this.__last_index__ = ml.index + ml[0].length;
            }
          }
        }
      }
    }

    if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
      // guess schemaless emails
      at_pos = text.indexOf('@');

      if (at_pos >= 0) {
        // We can't skip this check, because this cases are possible:
        // 192.168.1.1@gmail.com, my.in@example.com
        if ((me = text.match(this.re.email_fuzzy)) !== null) {
          shift = me.index + me[1].length;
          next = me.index + me[0].length;

          if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
            this.__schema__ = 'mailto:';
            this.__index__ = shift;
            this.__last_index__ = next;
          }
        }
      }
    }

    return this.__index__ >= 0;
  };
  /**
   * LinkifyIt#pretest(text) -> Boolean
   *
   * Very quick check, that can give false positives. Returns true if link MAY BE
   * can exists. Can be used for speed optimization, when you need to check that
   * link NOT exists.
   **/


  LinkifyIt.prototype.pretest = function pretest(text) {
    return this.re.pretest.test(text);
  };
  /**
   * LinkifyIt#testSchemaAt(text, name, position) -> Number
   * - text (String): text to scan
   * - name (String): rule (schema) name
   * - position (Number): text offset to check from
   *
   * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
   * at given position. Returns length of found pattern (0 on fail).
   **/


  LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
    // If not supported schema check requested - terminate
    if (!this.__compiled__[schema.toLowerCase()]) {
      return 0;
    }

    return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
  };
  /**
   * LinkifyIt#match(text) -> Array|null
   *
   * Returns array of found link descriptions or `null` on fail. We strongly
   * recommend to use [[LinkifyIt#test]] first, for best speed.
   *
   * ##### Result match description
   *
   * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
   *   protocol-neutral  links.
   * - __index__ - offset of matched text
   * - __lastIndex__ - index of next char after mathch end
   * - __raw__ - matched text
   * - __text__ - normalized text
   * - __url__ - link, generated from matched text
   **/


  LinkifyIt.prototype.match = function match(text) {
    var shift = 0,
        result = []; // Try to take previous element from cache, if .test() called before

    if (this.__index__ >= 0 && this.__text_cache__ === text) {
      result.push(createMatch(this, shift));
      shift = this.__last_index__;
    } // Cut head if cache was used


    var tail = shift ? text.slice(shift) : text; // Scan string until end reached

    while (this.test(tail)) {
      result.push(createMatch(this, shift));
      tail = tail.slice(this.__last_index__);
      shift += this.__last_index__;
    }

    if (result.length) {
      return result;
    }

    return null;
  };
  /** chainable
   * LinkifyIt#tlds(list [, keepOld]) -> this
   * - list (Array): list of tlds
   * - keepOld (Boolean): merge with current list if `true` (`false` by default)
   *
   * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
   * to avoid false positives. By default this algorythm used:
   *
   * - hostname with any 2-letter root zones are ok.
   * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
   *   are ok.
   * - encoded (`xn--...`) root zones are ok.
   *
   * If list is replaced, then exact match for 2-chars root zones will be checked.
   **/


  LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
    list = Array.isArray(list) ? list : [list];

    if (!keepOld) {
      this.__tlds__ = list.slice();
      this.__tlds_replaced__ = true;
      compile(this);
      return this;
    }

    this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {
      return el !== arr[idx - 1];
    }).reverse();
    compile(this);
    return this;
  };
  /**
   * LinkifyIt#normalize(match)
   *
   * Default normalizer (if schema does not define it's own).
   **/


  LinkifyIt.prototype.normalize = function normalize(match) {
    // Do minimal possible changes by default. Need to collect feedback prior
    // to move forward https://github.com/markdown-it/linkify-it/issues/1
    if (!match.schema) {
      match.url = 'http://' + match.url;
    }

    if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
      match.url = 'mailto:' + match.url;
    }
  };
  /**
   * LinkifyIt#onCompile()
   *
   * Override to modify basic RegExp-s.
   **/


  LinkifyIt.prototype.onCompile = function onCompile() {};

  var linkifyIt = LinkifyIt; // markdown-it default options

  var _default = {
    options: {
      html: false,
      // Enable HTML tags in source
      xhtmlOut: false,
      // Use '/' to close single tags (<br />)
      breaks: false,
      // Convert '\n' in paragraphs into <br>
      langPrefix: 'language-',
      // CSS language prefix for fenced blocks
      linkify: false,
      // autoconvert URL-like texts to links
      // Enable some language-neutral replacements + quotes beautification
      typographer: false,
      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019',

      /* “”‘’ */
      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,
      maxNesting: 100 // Internal protection, recursion limit

    },
    components: {
      core: {},
      block: {},
      inline: {}
    }
  }; // "Zero" preset, with nothing enabled. Useful for manual configuring of simple

  var zero = {
    options: {
      html: false,
      // Enable HTML tags in source
      xhtmlOut: false,
      // Use '/' to close single tags (<br />)
      breaks: false,
      // Convert '\n' in paragraphs into <br>
      langPrefix: 'language-',
      // CSS language prefix for fenced blocks
      linkify: false,
      // autoconvert URL-like texts to links
      // Enable some language-neutral replacements + quotes beautification
      typographer: false,
      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019',

      /* “”‘’ */
      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,
      maxNesting: 20 // Internal protection, recursion limit

    },
    components: {
      core: {
        rules: ['normalize', 'block', 'inline']
      },
      block: {
        rules: ['paragraph']
      },
      inline: {
        rules: ['text'],
        rules2: ['balance_pairs', 'text_collapse']
      }
    }
  }; // Commonmark default options

  var commonmark = {
    options: {
      html: true,
      // Enable HTML tags in source
      xhtmlOut: true,
      // Use '/' to close single tags (<br />)
      breaks: false,
      // Convert '\n' in paragraphs into <br>
      langPrefix: 'language-',
      // CSS language prefix for fenced blocks
      linkify: false,
      // autoconvert URL-like texts to links
      // Enable some language-neutral replacements + quotes beautification
      typographer: false,
      // Double + single quotes replacement pairs, when typographer enabled,
      // and smartquotes on. Could be either a String or an Array.
      //
      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
      // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
      quotes: '\u201c\u201d\u2018\u2019',

      /* “”‘’ */
      // Highlighter function. Should return escaped HTML,
      // or '' if the source string is not changed and should be escaped externaly.
      // If result starts with <pre... internal wrapper is skipped.
      //
      // function (/*str, lang*/) { return ''; }
      //
      highlight: null,
      maxNesting: 20 // Internal protection, recursion limit

    },
    components: {
      core: {
        rules: ['normalize', 'block', 'inline']
      },
      block: {
        rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']
      },
      inline: {
        rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],
        rules2: ['balance_pairs', 'emphasis', 'text_collapse']
      }
    }
  };
  var config = {
    'default': _default,
    zero: zero,
    commonmark: commonmark
  }; ////////////////////////////////////////////////////////////////////////////////
  //
  // This validator can prohibit more than really needed to prevent XSS. It's a
  // tradeoff to keep code simple and to be secure by default.
  //
  // If you need different setup - override validator method as you wish. Or
  // replace it with dummy function and use external sanitizer.
  //

  var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
  var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

  function validateLink(url) {
    // url should be normalized at this point, and existing entities are decoded
    var str = url.trim().toLowerCase();
    return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
  } ////////////////////////////////////////////////////////////////////////////////


  var RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];

  function normalizeLink(url) {
    var parsed = mdurl.parse(url, true);

    if (parsed.hostname) {
      // Encode hostnames in urls like:
      // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
      //
      // We don't encode unknown schemas, because it's likely that we encode
      // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
      //
      if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
        try {
          parsed.hostname = punycode.toASCII(parsed.hostname);
        } catch (er) {
          /**/
        }
      }
    }

    return mdurl.encode(mdurl.format(parsed));
  }

  function normalizeLinkText(url) {
    var parsed = mdurl.parse(url, true);

    if (parsed.hostname) {
      // Encode hostnames in urls like:
      // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
      //
      // We don't encode unknown schemas, because it's likely that we encode
      // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
      //
      if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
        try {
          parsed.hostname = punycode.toUnicode(parsed.hostname);
        } catch (er) {
          /**/
        }
      }
    }

    return mdurl.decode(mdurl.format(parsed));
  }
  /**
   * class MarkdownIt
   *
   * Main parser/renderer class.
   *
   * ##### Usage
   *
   * ```javascript
   * // node.js, "classic" way:
   * var MarkdownIt = require('markdown-it'),
   *     md = new MarkdownIt();
   * var result = md.render('# markdown-it rulezz!');
   *
   * // node.js, the same, but with sugar:
   * var md = require('markdown-it')();
   * var result = md.render('# markdown-it rulezz!');
   *
   * // browser without AMD, added to "window" on script load
   * // Note, there are no dash.
   * var md = window.markdownit();
   * var result = md.render('# markdown-it rulezz!');
   * ```
   *
   * Single line rendering, without paragraph wrap:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * var result = md.renderInline('__markdown-it__ rulezz!');
   * ```
   **/

  /**
   * new MarkdownIt([presetName, options])
   * - presetName (String): optional, `commonmark` / `zero`
   * - options (Object)
   *
   * Creates parser instanse with given config. Can be called without `new`.
   *
   * ##### presetName
   *
   * MarkdownIt provides named presets as a convenience to quickly
   * enable/disable active syntax rules and options for common use cases.
   *
   * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
   *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
   * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
   *   similar to GFM, used when no preset name given. Enables all available rules,
   *   but still without html, typographer & autolinker.
   * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
   *   all rules disabled. Useful to quickly setup your config via `.enable()`.
   *   For example, when you need only `bold` and `italic` markup and nothing else.
   *
   * ##### options:
   *
   * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
   *   That's not safe! You may need external sanitizer to protect output from XSS.
   *   It's better to extend features via plugins, instead of enabling HTML.
   * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
   *   (`<br />`). This is needed only for full CommonMark compatibility. In real
   *   world you will need HTML output.
   * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
   * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
   *   Can be useful for external highlighters.
   * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
   * - __typographer__  - `false`. Set `true` to enable [some language-neutral
   *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
   *   quotes beautification (smartquotes).
   * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
   *   pairs, when typographer enabled and smartquotes on. For example, you can
   *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
   *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
   * - __highlight__ - `null`. Highlighter function for fenced code blocks.
   *   Highlighter `function (str, lang)` should return escaped HTML. It can also
   *   return empty string if the source was not changed and should be escaped
   *   externaly. If result starts with <pre... internal wrapper is skipped.
   *
   * ##### Example
   *
   * ```javascript
   * // commonmark mode
   * var md = require('markdown-it')('commonmark');
   *
   * // default mode
   * var md = require('markdown-it')();
   *
   * // enable everything
   * var md = require('markdown-it')({
   *   html: true,
   *   linkify: true,
   *   typographer: true
   * });
   * ```
   *
   * ##### Syntax highlighting
   *
   * ```js
   * var hljs = require('highlight.js') // https://highlightjs.org/
   *
   * var md = require('markdown-it')({
   *   highlight: function (str, lang) {
   *     if (lang && hljs.getLanguage(lang)) {
   *       try {
   *         return hljs.highlight(lang, str, true).value;
   *       } catch (__) {}
   *     }
   *
   *     return ''; // use external default escaping
   *   }
   * });
   * ```
   *
   * Or with full wrapper override (if you need assign class to `<pre>`):
   *
   * ```javascript
   * var hljs = require('highlight.js') // https://highlightjs.org/
   *
   * // Actual default values
   * var md = require('markdown-it')({
   *   highlight: function (str, lang) {
   *     if (lang && hljs.getLanguage(lang)) {
   *       try {
   *         return '<pre class="hljs"><code>' +
   *                hljs.highlight(lang, str, true).value +
   *                '</code></pre>';
   *       } catch (__) {}
   *     }
   *
   *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
   *   }
   * });
   * ```
   *
   **/


  function MarkdownIt(presetName, options) {
    if (!(this instanceof MarkdownIt)) {
      return new MarkdownIt(presetName, options);
    }

    if (!options) {
      if (!utils.isString(presetName)) {
        options = presetName || {};
        presetName = 'default';
      }
    }
    /**
     * MarkdownIt#inline -> ParserInline
     *
     * Instance of [[ParserInline]]. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/


    this.inline = new parser_inline();
    /**
     * MarkdownIt#block -> ParserBlock
     *
     * Instance of [[ParserBlock]]. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/

    this.block = new parser_block();
    /**
     * MarkdownIt#core -> Core
     *
     * Instance of [[Core]] chain executor. You may need it to add new rules when
     * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
     * [[MarkdownIt.enable]].
     **/

    this.core = new parser_core();
    /**
     * MarkdownIt#renderer -> Renderer
     *
     * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
     * rules for new token types, generated by plugins.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * function myToken(tokens, idx, options, env, self) {
     *   //...
     *   return result;
     * };
     *
     * md.renderer.rules['my_token'] = myToken
     * ```
     *
     * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
     **/

    this.renderer = new renderer();
    /**
     * MarkdownIt#linkify -> LinkifyIt
     *
     * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
     * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
     * rule.
     **/

    this.linkify = new linkifyIt();
    /**
     * MarkdownIt#validateLink(url) -> Boolean
     *
     * Link validation function. CommonMark allows too much in links. By default
     * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
     * except some embedded image types.
     *
     * You can change this behaviour:
     *
     * ```javascript
     * var md = require('markdown-it')();
     * // enable everything
     * md.validateLink = function () { return true; }
     * ```
     **/

    this.validateLink = validateLink;
    /**
     * MarkdownIt#normalizeLink(url) -> String
     *
     * Function used to encode link url to a machine-readable format,
     * which includes url-encoding, punycode, etc.
     **/

    this.normalizeLink = normalizeLink;
    /**
     * MarkdownIt#normalizeLinkText(url) -> String
     *
     * Function used to decode link url to a human-readable format`
     **/

    this.normalizeLinkText = normalizeLinkText; // Expose utils & helpers for easy acces from plugins

    /**
     * MarkdownIt#utils -> utils
     *
     * Assorted utility functions, useful to write plugins. See details
     * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
     **/

    this.utils = utils;
    /**
     * MarkdownIt#helpers -> helpers
     *
     * Link components parser functions, useful to write plugins. See details
     * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
     **/

    this.helpers = utils.assign({}, helpers);
    this.options = {};
    this.configure(presetName);

    if (options) {
      this.set(options);
    }
  }
  /** chainable
   * MarkdownIt.set(options)
   *
   * Set parser options (in the same format as in constructor). Probably, you
   * will never need it, but you can change options after constructor call.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')()
   *             .set({ html: true, breaks: true })
   *             .set({ typographer, true });
   * ```
   *
   * __Note:__ To achieve the best possible performance, don't modify a
   * `markdown-it` instance options on the fly. If you need multiple configurations
   * it's best to create multiple instances and initialize each with separate
   * config.
   **/


  MarkdownIt.prototype.set = function (options) {
    utils.assign(this.options, options);
    return this;
  };
  /** chainable, internal
   * MarkdownIt.configure(presets)
   *
   * Batch load of all options and compenent settings. This is internal method,
   * and you probably will not need it. But if you with - see available presets
   * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
   *
   * We strongly recommend to use presets instead of direct config loads. That
   * will give better compatibility with next versions.
   **/


  MarkdownIt.prototype.configure = function (presets) {
    var self = this,
        presetName;

    if (utils.isString(presets)) {
      presetName = presets;
      presets = config[presetName];

      if (!presets) {
        throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
      }
    }

    if (!presets) {
      throw new Error('Wrong `markdown-it` preset, can\'t be empty');
    }

    if (presets.options) {
      self.set(presets.options);
    }

    if (presets.components) {
      Object.keys(presets.components).forEach(function (name) {
        if (presets.components[name].rules) {
          self[name].ruler.enableOnly(presets.components[name].rules);
        }

        if (presets.components[name].rules2) {
          self[name].ruler2.enableOnly(presets.components[name].rules2);
        }
      });
    }

    return this;
  };
  /** chainable
   * MarkdownIt.enable(list, ignoreInvalid)
   * - list (String|Array): rule name or list of rule names to enable
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * Enable list or rules. It will automatically find appropriate components,
   * containing rules with given names. If rule not found, and `ignoreInvalid`
   * not set - throws exception.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')()
   *             .enable(['sub', 'sup'])
   *             .disable('smartquotes');
   * ```
   **/


  MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
    var result = [];

    if (!Array.isArray(list)) {
      list = [list];
    }

    ['core', 'block', 'inline'].forEach(function (chain) {
      result = result.concat(this[chain].ruler.enable(list, true));
    }, this);
    result = result.concat(this.inline.ruler2.enable(list, true));
    var missed = list.filter(function (name) {
      return result.indexOf(name) < 0;
    });

    if (missed.length && !ignoreInvalid) {
      throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
    }

    return this;
  };
  /** chainable
   * MarkdownIt.disable(list, ignoreInvalid)
   * - list (String|Array): rule name or list of rule names to disable.
   * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
   *
   * The same as [[MarkdownIt.enable]], but turn specified rules off.
   **/


  MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
    var result = [];

    if (!Array.isArray(list)) {
      list = [list];
    }

    ['core', 'block', 'inline'].forEach(function (chain) {
      result = result.concat(this[chain].ruler.disable(list, true));
    }, this);
    result = result.concat(this.inline.ruler2.disable(list, true));
    var missed = list.filter(function (name) {
      return result.indexOf(name) < 0;
    });

    if (missed.length && !ignoreInvalid) {
      throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
    }

    return this;
  };
  /** chainable
   * MarkdownIt.use(plugin, params)
   *
   * Load specified plugin with given params into current parser instance.
   * It's just a sugar to call `plugin(md, params)` with curring.
   *
   * ##### Example
   *
   * ```javascript
   * var iterator = require('markdown-it-for-inline');
   * var md = require('markdown-it')()
   *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
   *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
   *             });
   * ```
   **/


  MarkdownIt.prototype.use = function (plugin
  /*, params, ... */
  ) {
    var args = [this].concat(Array.prototype.slice.call(arguments, 1));
    plugin.apply(plugin, args);
    return this;
  };
  /** internal
   * MarkdownIt.parse(src, env) -> Array
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Parse input string and returns list of block tokens (special token type
   * "inline" will contain list of inline tokens). You should not call this
   * method directly, until you write custom renderer (for example, to produce
   * AST).
   *
   * `env` is used to pass data between "distributed" rules and return additional
   * metadata like reference info, needed for the renderer. It also can be used to
   * inject data in specific cases. Usually, you will be ok to pass `{}`,
   * and then pass updated object to renderer.
   **/


  MarkdownIt.prototype.parse = function (src, env) {
    if (typeof src !== 'string') {
      throw new Error('Input data should be a String');
    }

    var state = new this.core.State(src, this, env);
    this.core.process(state);
    return state.tokens;
  };
  /**
   * MarkdownIt.render(src [, env]) -> String
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Render markdown string into html. It does all magic for you :).
   *
   * `env` can be used to inject additional metadata (`{}` by default).
   * But you will not need it with high probability. See also comment
   * in [[MarkdownIt.parse]].
   **/


  MarkdownIt.prototype.render = function (src, env) {
    env = env || {};
    return this.renderer.render(this.parse(src, env), this.options, env);
  };
  /** internal
   * MarkdownIt.parseInline(src, env) -> Array
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
   * block tokens list with the single `inline` element, containing parsed inline
   * tokens in `children` property. Also updates `env` object.
   **/


  MarkdownIt.prototype.parseInline = function (src, env) {
    var state = new this.core.State(src, this, env);
    state.inlineMode = true;
    this.core.process(state);
    return state.tokens;
  };
  /**
   * MarkdownIt.renderInline(src [, env]) -> String
   * - src (String): source string
   * - env (Object): environment sandbox
   *
   * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
   * will NOT be wrapped into `<p>` tags.
   **/


  MarkdownIt.prototype.renderInline = function (src, env) {
    env = env || {};
    return this.renderer.render(this.parseInline(src, env), this.options, env);
  };

  var lib = MarkdownIt;
  var markdownIt = lib;
  var grinning = "😀";
  var smiley = "😃";
  var smile$1 = "😄";
  var grin = "😁";
  var laughing = "😆";
  var satisfied = "😆";
  var sweat_smile = "😅";
  var joy = "😂";
  var rofl = "🤣";
  var relaxed = "☺️";
  var blush = "😊";
  var innocent = "😇";
  var slightly_smiling_face = "🙂";
  var upside_down_face = "🙃";
  var wink = "😉";
  var relieved = "😌";
  var heart_eyes = "😍";
  var kissing_heart = "😘";
  var kissing = "😗";
  var kissing_smiling_eyes = "😙";
  var kissing_closed_eyes = "😚";
  var yum = "😋";
  var stuck_out_tongue_winking_eye = "😜";
  var stuck_out_tongue_closed_eyes = "😝";
  var stuck_out_tongue = "😛";
  var money_mouth_face = "🤑";
  var hugs = "🤗";
  var nerd_face = "🤓";
  var sunglasses = "😎";
  var clown_face = "🤡";
  var cowboy_hat_face = "🤠";
  var smirk = "😏";
  var unamused = "😒";
  var disappointed = "😞";
  var pensive = "😔";
  var worried = "😟";
  var confused = "😕";
  var slightly_frowning_face = "🙁";
  var frowning_face = "☹️";
  var persevere = "😣";
  var confounded = "😖";
  var tired_face = "😫";
  var weary = "😩";
  var triumph = "😤";
  var angry = "😠";
  var rage = "😡";
  var pout = "😡";
  var no_mouth = "😶";
  var neutral_face = "😐";
  var expressionless = "😑";
  var hushed = "😯";
  var frowning = "😦";
  var anguished = "😧";
  var open_mouth = "😮";
  var astonished = "😲";
  var dizzy_face = "😵";
  var flushed = "😳";
  var scream = "😱";
  var fearful = "😨";
  var cold_sweat = "😰";
  var cry = "😢";
  var disappointed_relieved = "😥";
  var drooling_face = "🤤";
  var sob = "😭";
  var sweat = "😓";
  var sleepy = "😪";
  var sleeping = "😴";
  var roll_eyes = "🙄";
  var thinking = "🤔";
  var lying_face = "🤥";
  var grimacing = "😬";
  var zipper_mouth_face = "🤐";
  var nauseated_face = "🤢";
  var sneezing_face = "🤧";
  var mask = "😷";
  var face_with_thermometer = "🤒";
  var face_with_head_bandage = "🤕";
  var smiling_imp = "😈";
  var imp = "👿";
  var japanese_ogre = "👹";
  var japanese_goblin = "👺";
  var hankey = "💩";
  var poop = "💩";
  var shit = "💩";
  var ghost = "👻";
  var skull = "💀";
  var skull_and_crossbones = "☠️";
  var alien = "👽";
  var space_invader = "👾";
  var robot = "🤖";
  var jack_o_lantern = "🎃";
  var smiley_cat = "😺";
  var smile_cat = "😸";
  var joy_cat = "😹";
  var heart_eyes_cat = "😻";
  var smirk_cat = "😼";
  var kissing_cat = "😽";
  var scream_cat = "🙀";
  var crying_cat_face = "😿";
  var pouting_cat = "😾";
  var open_hands = "👐";
  var raised_hands = "🙌";
  var clap = "👏";
  var pray = "🙏";
  var handshake = "🤝";
  var thumbsup = "👍";
  var thumbsdown = "👎";
  var fist_oncoming = "👊";
  var facepunch = "👊";
  var punch = "👊";
  var fist_raised = "✊";
  var fist = "✊";
  var fist_left = "🤛";
  var fist_right = "🤜";
  var crossed_fingers = "🤞";
  var v = "✌️";
  var metal = "🤘";
  var ok_hand = "👌";
  var point_left = "👈";
  var point_right = "👉";
  var point_up_2 = "👆";
  var point_down = "👇";
  var point_up = "☝️";
  var hand = "✋";
  var raised_hand = "✋";
  var raised_back_of_hand = "🤚";
  var raised_hand_with_fingers_splayed = "🖐";
  var vulcan_salute = "🖖";
  var wave = "👋";
  var call_me_hand = "🤙";
  var muscle = "💪";
  var middle_finger = "🖕";
  var fu = "🖕";
  var writing_hand = "✍️";
  var selfie = "🤳";
  var nail_care = "💅";
  var ring$1 = "💍";
  var lipstick = "💄";
  var kiss = "💋";
  var lips = "👄";
  var tongue = "👅";
  var ear = "👂";
  var nose = "👃";
  var footprints = "👣";
  var eye = "👁";
  var eyes = "👀";
  var speaking_head = "🗣";
  var bust_in_silhouette = "👤";
  var busts_in_silhouette = "👥";
  var baby = "👶";
  var boy = "👦";
  var girl = "👧";
  var man = "👨";
  var woman = "👩";
  var blonde_woman = "👱‍♀";
  var blonde_man = "👱";
  var person_with_blond_hair = "👱";
  var older_man = "👴";
  var older_woman = "👵";
  var man_with_gua_pi_mao = "👲";
  var woman_with_turban = "👳‍♀";
  var man_with_turban = "👳";
  var policewoman = "👮‍♀";
  var policeman = "👮";
  var cop = "👮";
  var construction_worker_woman = "👷‍♀";
  var construction_worker_man = "👷";
  var construction_worker = "👷";
  var guardswoman = "💂‍♀";
  var guardsman = "💂";
  var female_detective = "🕵️‍♀️";
  var male_detective = "🕵";
  var detective = "🕵";
  var woman_health_worker = "👩‍⚕";
  var man_health_worker = "👨‍⚕";
  var woman_farmer = "👩‍🌾";
  var man_farmer = "👨‍🌾";
  var woman_cook = "👩‍🍳";
  var man_cook = "👨‍🍳";
  var woman_student = "👩‍🎓";
  var man_student = "👨‍🎓";
  var woman_singer = "👩‍🎤";
  var man_singer = "👨‍🎤";
  var woman_teacher = "👩‍🏫";
  var man_teacher = "👨‍🏫";
  var woman_factory_worker = "👩‍🏭";
  var man_factory_worker = "👨‍🏭";
  var woman_technologist = "👩‍💻";
  var man_technologist = "👨‍💻";
  var woman_office_worker = "👩‍💼";
  var man_office_worker = "👨‍💼";
  var woman_mechanic = "👩‍🔧";
  var man_mechanic = "👨‍🔧";
  var woman_scientist = "👩‍🔬";
  var man_scientist = "👨‍🔬";
  var woman_artist = "👩‍🎨";
  var man_artist = "👨‍🎨";
  var woman_firefighter = "👩‍🚒";
  var man_firefighter = "👨‍🚒";
  var woman_pilot = "👩‍✈";
  var man_pilot = "👨‍✈";
  var woman_astronaut = "👩‍🚀";
  var man_astronaut = "👨‍🚀";
  var woman_judge = "👩‍⚖";
  var man_judge = "👨‍⚖";
  var mrs_claus = "🤶";
  var santa = "🎅";
  var princess = "👸";
  var prince = "🤴";
  var bride_with_veil = "👰";
  var man_in_tuxedo = "🤵";
  var angel = "👼";
  var pregnant_woman = "🤰";
  var bowing_woman = "🙇‍♀";
  var bowing_man = "🙇";
  var bow = "🙇";
  var tipping_hand_woman = "💁";
  var information_desk_person = "💁";
  var sassy_woman = "💁";
  var tipping_hand_man = "💁‍♂";
  var sassy_man = "💁‍♂";
  var no_good_woman = "🙅";
  var no_good = "🙅";
  var ng_woman = "🙅";
  var no_good_man = "🙅‍♂";
  var ng_man = "🙅‍♂";
  var ok_woman = "🙆";
  var ok_man = "🙆‍♂";
  var raising_hand_woman = "🙋";
  var raising_hand = "🙋";
  var raising_hand_man = "🙋‍♂";
  var woman_facepalming = "🤦‍♀";
  var man_facepalming = "🤦‍♂";
  var woman_shrugging = "🤷‍♀";
  var man_shrugging = "🤷‍♂";
  var pouting_woman = "🙎";
  var person_with_pouting_face = "🙎";
  var pouting_man = "🙎‍♂";
  var frowning_woman = "🙍";
  var person_frowning = "🙍";
  var frowning_man = "🙍‍♂";
  var haircut_woman = "💇";
  var haircut = "💇";
  var haircut_man = "💇‍♂";
  var massage_woman = "💆";
  var massage = "💆";
  var massage_man = "💆‍♂";
  var business_suit_levitating = "🕴";
  var dancer = "💃";
  var man_dancing = "🕺";
  var dancing_women = "👯";
  var dancers = "👯";
  var dancing_men = "👯‍♂";
  var walking_woman = "🚶‍♀";
  var walking_man = "🚶";
  var walking = "🚶";
  var running_woman = "🏃‍♀";
  var running_man = "🏃";
  var runner = "🏃";
  var running = "🏃";
  var couple = "👫";
  var two_women_holding_hands = "👭";
  var two_men_holding_hands = "👬";
  var couple_with_heart_woman_man = "💑";
  var couple_with_heart = "💑";
  var couple_with_heart_woman_woman = "👩‍❤️‍👩";
  var couple_with_heart_man_man = "👨‍❤️‍👨";
  var couplekiss_man_woman = "💏";
  var couplekiss_woman_woman = "👩‍❤️‍💋‍👩";
  var couplekiss_man_man = "👨‍❤️‍💋‍👨";
  var family_man_woman_boy = "👪";
  var family = "👪";
  var family_man_woman_girl = "👨‍👩‍👧";
  var family_man_woman_girl_boy = "👨‍👩‍👧‍👦";
  var family_man_woman_boy_boy = "👨‍👩‍👦‍👦";
  var family_man_woman_girl_girl = "👨‍👩‍👧‍👧";
  var family_woman_woman_boy = "👩‍👩‍👦";
  var family_woman_woman_girl = "👩‍👩‍👧";
  var family_woman_woman_girl_boy = "👩‍👩‍👧‍👦";
  var family_woman_woman_boy_boy = "👩‍👩‍👦‍👦";
  var family_woman_woman_girl_girl = "👩‍👩‍👧‍👧";
  var family_man_man_boy = "👨‍👨‍👦";
  var family_man_man_girl = "👨‍👨‍👧";
  var family_man_man_girl_boy = "👨‍👨‍👧‍👦";
  var family_man_man_boy_boy = "👨‍👨‍👦‍👦";
  var family_man_man_girl_girl = "👨‍👨‍👧‍👧";
  var family_woman_boy = "👩‍👦";
  var family_woman_girl = "👩‍👧";
  var family_woman_girl_boy = "👩‍👧‍👦";
  var family_woman_boy_boy = "👩‍👦‍👦";
  var family_woman_girl_girl = "👩‍👧‍👧";
  var family_man_boy = "👨‍👦";
  var family_man_girl = "👨‍👧";
  var family_man_girl_boy = "👨‍👧‍👦";
  var family_man_boy_boy = "👨‍👦‍👦";
  var family_man_girl_girl = "👨‍👧‍👧";
  var womans_clothes = "👚";
  var shirt = "👕";
  var tshirt = "👕";
  var jeans = "👖";
  var necktie = "👔";
  var dress = "👗";
  var bikini = "👙";
  var kimono = "👘";
  var high_heel = "👠";
  var sandal = "👡";
  var boot = "👢";
  var mans_shoe = "👞";
  var shoe = "👞";
  var athletic_shoe = "👟";
  var womans_hat = "👒";
  var tophat = "🎩";
  var mortar_board = "🎓";
  var crown = "👑";
  var rescue_worker_helmet = "⛑";
  var school_satchel = "🎒";
  var pouch = "👝";
  var purse = "👛";
  var handbag = "👜";
  var briefcase = "💼";
  var eyeglasses = "👓";
  var dark_sunglasses = "🕶";
  var closed_umbrella = "🌂";
  var open_umbrella = "☂️";
  var dog = "🐶";
  var cat = "🐱";
  var mouse = "🐭";
  var hamster = "🐹";
  var rabbit = "🐰";
  var fox_face = "🦊";
  var bear = "🐻";
  var panda_face = "🐼";
  var koala = "🐨";
  var tiger = "🐯";
  var lion = "🦁";
  var cow = "🐮";
  var pig = "🐷";
  var pig_nose = "🐽";
  var frog = "🐸";
  var monkey_face = "🐵";
  var see_no_evil = "🙈";
  var hear_no_evil = "🙉";
  var speak_no_evil = "🙊";
  var monkey = "🐒";
  var chicken = "🐔";
  var penguin = "🐧";
  var bird = "🐦";
  var baby_chick = "🐤";
  var hatching_chick = "🐣";
  var hatched_chick = "🐥";
  var duck = "🦆";
  var eagle = "🦅";
  var owl = "🦉";
  var bat = "🦇";
  var wolf = "🐺";
  var boar = "🐗";
  var horse = "🐴";
  var unicorn = "🦄";
  var bee = "🐝";
  var honeybee = "🐝";
  var bug = "🐛";
  var butterfly = "🦋";
  var snail = "🐌";
  var shell = "🐚";
  var beetle = "🐞";
  var ant = "🐜";
  var spider = "🕷";
  var spider_web = "🕸";
  var turtle = "🐢";
  var snake = "🐍";
  var lizard = "🦎";
  var scorpion = "🦂";
  var crab = "🦀";
  var squid = "🦑";
  var octopus = "🐙";
  var shrimp = "🦐";
  var tropical_fish = "🐠";
  var fish = "🐟";
  var blowfish = "🐡";
  var dolphin = "🐬";
  var flipper = "🐬";
  var shark = "🦈";
  var whale = "🐳";
  var whale2 = "🐋";
  var crocodile = "🐊";
  var leopard = "🐆";
  var tiger2 = "🐅";
  var water_buffalo = "🐃";
  var ox = "🐂";
  var cow2 = "🐄";
  var deer = "🦌";
  var dromedary_camel = "🐪";
  var camel = "🐫";
  var elephant = "🐘";
  var rhinoceros = "🦏";
  var gorilla = "🦍";
  var racehorse = "🐎";
  var pig2 = "🐖";
  var goat = "🐐";
  var ram = "🐏";
  var sheep = "🐑";
  var dog2 = "🐕";
  var poodle = "🐩";
  var cat2 = "🐈";
  var rooster = "🐓";
  var turkey = "🦃";
  var dove = "🕊";
  var rabbit2 = "🐇";
  var mouse2 = "🐁";
  var rat = "🐀";
  var chipmunk = "🐿";
  var feet = "🐾";
  var paw_prints = "🐾";
  var dragon = "🐉";
  var dragon_face = "🐲";
  var cactus = "🌵";
  var christmas_tree = "🎄";
  var evergreen_tree = "🌲";
  var deciduous_tree = "🌳";
  var palm_tree = "🌴";
  var seedling = "🌱";
  var herb = "🌿";
  var shamrock = "☘️";
  var four_leaf_clover = "🍀";
  var bamboo = "🎍";
  var tanabata_tree = "🎋";
  var leaves = "🍃";
  var fallen_leaf = "🍂";
  var maple_leaf = "🍁";
  var mushroom = "🍄";
  var ear_of_rice = "🌾";
  var bouquet = "💐";
  var tulip = "🌷";
  var rose = "🌹";
  var wilted_flower = "🥀";
  var sunflower = "🌻";
  var blossom = "🌼";
  var cherry_blossom = "🌸";
  var hibiscus = "🌺";
  var earth_americas = "🌎";
  var earth_africa = "🌍";
  var earth_asia = "🌏";
  var full_moon = "🌕";
  var waning_gibbous_moon = "🌖";
  var last_quarter_moon = "🌗";
  var waning_crescent_moon = "🌘";
  var new_moon = "🌑";
  var waxing_crescent_moon = "🌒";
  var first_quarter_moon = "🌓";
  var moon = "🌔";
  var waxing_gibbous_moon = "🌔";
  var new_moon_with_face = "🌚";
  var full_moon_with_face = "🌝";
  var sun_with_face = "🌞";
  var first_quarter_moon_with_face = "🌛";
  var last_quarter_moon_with_face = "🌜";
  var crescent_moon = "🌙";
  var dizzy = "💫";
  var star$1 = "⭐️";
  var star2 = "🌟";
  var sparkles = "✨";
  var zap = "⚡️";
  var fire = "🔥";
  var boom = "💥";
  var collision = "💥";
  var comet = "☄";
  var sunny = "☀️";
  var sun_behind_small_cloud = "🌤";
  var partly_sunny = "⛅️";
  var sun_behind_large_cloud = "🌥";
  var sun_behind_rain_cloud = "🌦";
  var rainbow = "🌈";
  var cloud = "☁️";
  var cloud_with_rain = "🌧";
  var cloud_with_lightning_and_rain = "⛈";
  var cloud_with_lightning = "🌩";
  var cloud_with_snow = "🌨";
  var snowman_with_snow = "☃️";
  var snowman = "⛄️";
  var snowflake = "❄️";
  var wind_face = "🌬";
  var dash$1 = "💨";
  var tornado = "🌪";
  var fog = "🌫";
  var ocean = "🌊";
  var droplet = "💧";
  var sweat_drops = "💦";
  var umbrella = "☔️";
  var green_apple = "🍏";
  var apple = "🍎";
  var pear = "🍐";
  var tangerine = "🍊";
  var orange = "🍊";
  var mandarin = "🍊";
  var lemon = "🍋";
  var banana = "🍌";
  var watermelon = "🍉";
  var grapes = "🍇";
  var strawberry = "🍓";
  var melon = "🍈";
  var cherries = "🍒";
  var peach = "🍑";
  var pineapple = "🍍";
  var kiwi_fruit = "🥝";
  var avocado = "🥑";
  var tomato = "🍅";
  var eggplant = "🍆";
  var cucumber = "🥒";
  var carrot = "🥕";
  var corn = "🌽";
  var hot_pepper = "🌶";
  var potato = "🥔";
  var sweet_potato = "🍠";
  var chestnut = "🌰";
  var peanuts = "🥜";
  var honey_pot = "🍯";
  var croissant = "🥐";
  var bread = "🍞";
  var baguette_bread = "🥖";
  var cheese = "🧀";
  var egg = "🥚";
  var fried_egg = "🍳";
  var bacon = "🥓";
  var pancakes = "🥞";
  var fried_shrimp = "🍤";
  var poultry_leg = "🍗";
  var meat_on_bone = "🍖";
  var pizza = "🍕";
  var hotdog = "🌭";
  var hamburger = "🍔";
  var fries = "🍟";
  var stuffed_flatbread = "🥙";
  var taco = "🌮";
  var burrito = "🌯";
  var green_salad = "🥗";
  var shallow_pan_of_food = "🥘";
  var spaghetti = "🍝";
  var ramen = "🍜";
  var stew = "🍲";
  var fish_cake = "🍥";
  var sushi = "🍣";
  var bento = "🍱";
  var curry = "🍛";
  var rice = "🍚";
  var rice_ball = "🍙";
  var rice_cracker = "🍘";
  var oden = "🍢";
  var dango = "🍡";
  var shaved_ice = "🍧";
  var ice_cream = "🍨";
  var icecream = "🍦";
  var cake = "🍰";
  var birthday = "🎂";
  var custard = "🍮";
  var lollipop = "🍭";
  var candy = "🍬";
  var chocolate_bar = "🍫";
  var popcorn = "🍿";
  var doughnut = "🍩";
  var cookie = "🍪";
  var milk_glass = "🥛";
  var baby_bottle = "🍼";
  var coffee = "☕️";
  var tea = "🍵";
  var sake = "🍶";
  var beer = "🍺";
  var beers = "🍻";
  var clinking_glasses = "🥂";
  var wine_glass = "🍷";
  var tumbler_glass = "🥃";
  var cocktail = "🍸";
  var tropical_drink = "🍹";
  var champagne = "🍾";
  var spoon = "🥄";
  var fork_and_knife = "🍴";
  var plate_with_cutlery = "🍽";
  var soccer = "⚽️";
  var basketball = "🏀";
  var football = "🏈";
  var baseball = "⚾️";
  var tennis = "🎾";
  var volleyball = "🏐";
  var rugby_football = "🏉";
  var ping_pong = "🏓";
  var badminton = "🏸";
  var goal_net = "🥅";
  var ice_hockey = "🏒";
  var field_hockey = "🏑";
  var cricket = "🏏";
  var golf = "⛳️";
  var bow_and_arrow = "🏹";
  var fishing_pole_and_fish = "🎣";
  var boxing_glove = "🥊";
  var martial_arts_uniform = "🥋";
  var ice_skate = "⛸";
  var ski = "🎿";
  var skier = "⛷";
  var snowboarder = "🏂";
  var weight_lifting_woman = "🏋️‍♀️";
  var weight_lifting_man = "🏋";
  var person_fencing = "🤺";
  var women_wrestling = "🤼‍♀";
  var men_wrestling = "🤼‍♂";
  var woman_cartwheeling = "🤸‍♀";
  var man_cartwheeling = "🤸‍♂";
  var basketball_woman = "⛹️‍♀️";
  var basketball_man = "⛹";
  var woman_playing_handball = "🤾‍♀";
  var man_playing_handball = "🤾‍♂";
  var golfing_woman = "🏌️‍♀️";
  var golfing_man = "🏌";
  var surfing_woman = "🏄‍♀";
  var surfing_man = "🏄";
  var surfer = "🏄";
  var swimming_woman = "🏊‍♀";
  var swimming_man = "🏊";
  var swimmer = "🏊";
  var woman_playing_water_polo = "🤽‍♀";
  var man_playing_water_polo = "🤽‍♂";
  var rowing_woman = "🚣‍♀";
  var rowing_man = "🚣";
  var rowboat = "🚣";
  var horse_racing = "🏇";
  var biking_woman = "🚴‍♀";
  var biking_man = "🚴";
  var bicyclist = "🚴";
  var mountain_biking_woman = "🚵‍♀";
  var mountain_biking_man = "🚵";
  var mountain_bicyclist = "🚵";
  var running_shirt_with_sash = "🎽";
  var medal_sports = "🏅";
  var medal_military = "🎖";
  var trophy = "🏆";
  var rosette = "🏵";
  var reminder_ribbon = "🎗";
  var ticket = "🎫";
  var tickets = "🎟";
  var circus_tent = "🎪";
  var woman_juggling = "🤹‍♀";
  var man_juggling = "🤹‍♂";
  var performing_arts = "🎭";
  var art = "🎨";
  var clapper = "🎬";
  var microphone = "🎤";
  var headphones = "🎧";
  var musical_score = "🎼";
  var musical_keyboard = "🎹";
  var drum = "🥁";
  var saxophone = "🎷";
  var trumpet = "🎺";
  var guitar = "🎸";
  var violin = "🎻";
  var game_die = "🎲";
  var dart = "🎯";
  var bowling = "🎳";
  var video_game = "🎮";
  var slot_machine = "🎰";
  var car = "🚗";
  var red_car = "🚗";
  var taxi = "🚕";
  var blue_car = "🚙";
  var bus = "🚌";
  var trolleybus = "🚎";
  var racing_car = "🏎";
  var police_car = "🚓";
  var ambulance = "🚑";
  var fire_engine = "🚒";
  var minibus = "🚐";
  var truck = "🚚";
  var articulated_lorry = "🚛";
  var tractor = "🚜";
  var kick_scooter = "🛴";
  var bike = "🚲";
  var motor_scooter = "🛵";
  var motorcycle = "🏍";
  var rotating_light = "🚨";
  var oncoming_police_car = "🚔";
  var oncoming_bus = "🚍";
  var oncoming_automobile = "🚘";
  var oncoming_taxi = "🚖";
  var aerial_tramway = "🚡";
  var mountain_cableway = "🚠";
  var suspension_railway = "🚟";
  var railway_car = "🚃";
  var train = "🚋";
  var mountain_railway = "🚞";
  var monorail = "🚝";
  var bullettrain_side = "🚄";
  var bullettrain_front = "🚅";
  var light_rail = "🚈";
  var steam_locomotive = "🚂";
  var train2 = "🚆";
  var metro = "🚇";
  var tram = "🚊";
  var station = "🚉";
  var helicopter = "🚁";
  var small_airplane = "🛩";
  var airplane = "✈️";
  var flight_departure = "🛫";
  var flight_arrival = "🛬";
  var rocket = "🚀";
  var artificial_satellite = "🛰";
  var seat = "💺";
  var canoe = "🛶";
  var boat = "⛵️";
  var sailboat = "⛵️";
  var motor_boat = "🛥";
  var speedboat = "🚤";
  var passenger_ship = "🛳";
  var ferry = "⛴";
  var ship = "🚢";
  var anchor = "⚓️";
  var construction = "🚧";
  var fuelpump = "⛽️";
  var busstop = "🚏";
  var vertical_traffic_light = "🚦";
  var traffic_light = "🚥";
  var world_map = "🗺";
  var moyai = "🗿";
  var statue_of_liberty = "🗽";
  var fountain = "⛲️";
  var tokyo_tower = "🗼";
  var european_castle = "🏰";
  var japanese_castle = "🏯";
  var stadium = "🏟";
  var ferris_wheel = "🎡";
  var roller_coaster = "🎢";
  var carousel_horse = "🎠";
  var parasol_on_ground = "⛱";
  var beach_umbrella = "🏖";
  var desert_island = "🏝";
  var mountain = "⛰";
  var mountain_snow = "🏔";
  var mount_fuji = "🗻";
  var volcano = "🌋";
  var desert = "🏜";
  var camping = "🏕";
  var tent = "⛺️";
  var railway_track = "🛤";
  var motorway = "🛣";
  var building_construction = "🏗";
  var factory = "🏭";
  var house = "🏠";
  var house_with_garden = "🏡";
  var houses = "🏘";
  var derelict_house = "🏚";
  var office = "🏢";
  var department_store = "🏬";
  var post_office = "🏣";
  var european_post_office = "🏤";
  var hospital = "🏥";
  var bank = "🏦";
  var hotel = "🏨";
  var convenience_store = "🏪";
  var school = "🏫";
  var love_hotel = "🏩";
  var wedding = "💒";
  var classical_building = "🏛";
  var church = "⛪️";
  var mosque = "🕌";
  var synagogue = "🕍";
  var kaaba = "🕋";
  var shinto_shrine = "⛩";
  var japan = "🗾";
  var rice_scene = "🎑";
  var national_park = "🏞";
  var sunrise = "🌅";
  var sunrise_over_mountains = "🌄";
  var stars = "🌠";
  var sparkler = "🎇";
  var fireworks = "🎆";
  var city_sunrise = "🌇";
  var city_sunset = "🌆";
  var cityscape = "🏙";
  var night_with_stars = "🌃";
  var milky_way = "🌌";
  var bridge_at_night = "🌉";
  var foggy = "🌁";
  var watch = "⌚️";
  var iphone = "📱";
  var calling = "📲";
  var computer = "💻";
  var keyboard = "⌨️";
  var desktop_computer = "🖥";
  var printer = "🖨";
  var computer_mouse = "🖱";
  var trackball = "🖲";
  var joystick = "🕹";
  var clamp = "🗜";
  var minidisc = "💽";
  var floppy_disk = "💾";
  var cd = "💿";
  var dvd = "📀";
  var vhs = "📼";
  var camera = "📷";
  var camera_flash = "📸";
  var video_camera = "📹";
  var movie_camera = "🎥";
  var film_projector = "📽";
  var film_strip = "🎞";
  var telephone_receiver = "📞";
  var phone$1 = "☎️";
  var telephone = "☎️";
  var pager = "📟";
  var fax = "📠";
  var tv = "📺";
  var radio = "📻";
  var studio_microphone = "🎙";
  var level_slider = "🎚";
  var control_knobs = "🎛";
  var stopwatch = "⏱";
  var timer_clock = "⏲";
  var alarm_clock = "⏰";
  var mantelpiece_clock = "🕰";
  var hourglass = "⌛️";
  var hourglass_flowing_sand = "⏳";
  var satellite = "📡";
  var battery = "🔋";
  var electric_plug = "🔌";
  var bulb = "💡";
  var flashlight = "🔦";
  var candle = "🕯";
  var wastebasket = "🗑";
  var oil_drum = "🛢";
  var money_with_wings = "💸";
  var dollar$1 = "💵";
  var yen$1 = "💴";
  var euro$1 = "💶";
  var pound$1 = "💷";
  var moneybag = "💰";
  var credit_card = "💳";
  var gem = "💎";
  var balance_scale = "⚖️";
  var wrench = "🔧";
  var hammer = "🔨";
  var hammer_and_pick = "⚒";
  var hammer_and_wrench = "🛠";
  var pick = "⛏";
  var nut_and_bolt = "🔩";
  var gear = "⚙️";
  var chains = "⛓";
  var gun = "🔫";
  var bomb = "💣";
  var hocho = "🔪";
  var knife = "🔪";
  var dagger$1 = "🗡";
  var crossed_swords = "⚔️";
  var shield = "🛡";
  var smoking = "🚬";
  var coffin = "⚰️";
  var funeral_urn = "⚱️";
  var amphora = "🏺";
  var crystal_ball = "🔮";
  var prayer_beads = "📿";
  var barber = "💈";
  var alembic = "⚗️";
  var telescope = "🔭";
  var microscope = "🔬";
  var hole = "🕳";
  var pill = "💊";
  var syringe = "💉";
  var thermometer = "🌡";
  var toilet = "🚽";
  var potable_water = "🚰";
  var shower = "🚿";
  var bathtub = "🛁";
  var bath = "🛀";
  var bellhop_bell = "🛎";
  var key = "🔑";
  var old_key = "🗝";
  var door = "🚪";
  var couch_and_lamp = "🛋";
  var bed = "🛏";
  var sleeping_bed = "🛌";
  var framed_picture = "🖼";
  var shopping = "🛍";
  var shopping_cart = "🛒";
  var gift = "🎁";
  var balloon = "🎈";
  var flags = "🎏";
  var ribbon = "🎀";
  var confetti_ball = "🎊";
  var tada = "🎉";
  var dolls = "🎎";
  var izakaya_lantern = "🏮";
  var lantern = "🏮";
  var wind_chime = "🎐";
  var email = "✉️";
  var envelope = "✉️";
  var envelope_with_arrow = "📩";
  var incoming_envelope = "📨";
  var love_letter = "💌";
  var inbox_tray = "📥";
  var outbox_tray = "📤";
  var label = "🏷";
  var mailbox_closed = "📪";
  var mailbox = "📫";
  var mailbox_with_mail = "📬";
  var mailbox_with_no_mail = "📭";
  var postbox = "📮";
  var postal_horn = "📯";
  var scroll = "📜";
  var page_with_curl = "📃";
  var page_facing_up = "📄";
  var bookmark_tabs = "📑";
  var bar_chart = "📊";
  var chart_with_upwards_trend = "📈";
  var chart_with_downwards_trend = "📉";
  var spiral_notepad = "🗒";
  var spiral_calendar = "🗓";
  var calendar = "📆";
  var date = "📅";
  var card_index = "📇";
  var card_file_box = "🗃";
  var ballot_box = "🗳";
  var file_cabinet = "🗄";
  var clipboard = "📋";
  var file_folder = "📁";
  var open_file_folder = "📂";
  var card_index_dividers = "🗂";
  var newspaper_roll = "🗞";
  var newspaper = "📰";
  var notebook = "📓";
  var notebook_with_decorative_cover = "📔";
  var ledger = "📒";
  var closed_book = "📕";
  var green_book = "📗";
  var blue_book = "📘";
  var orange_book = "📙";
  var books = "📚";
  var book = "📖";
  var open_book = "📖";
  var bookmark = "🔖";
  var link$1 = "🔗";
  var paperclip = "📎";
  var paperclips = "🖇";
  var triangular_ruler = "📐";
  var straight_ruler = "📏";
  var pushpin = "📌";
  var round_pushpin = "📍";
  var scissors = "✂️";
  var pen = "🖊";
  var fountain_pen = "🖋";
  var black_nib = "✒️";
  var paintbrush = "🖌";
  var crayon = "🖍";
  var memo = "📝";
  var pencil = "📝";
  var pencil2 = "✏️";
  var mag = "🔍";
  var mag_right = "🔎";
  var lock_with_ink_pen = "🔏";
  var closed_lock_with_key = "🔐";
  var lock = "🔒";
  var unlock = "🔓";
  var heart = "❤️";
  var yellow_heart = "💛";
  var green_heart = "💚";
  var blue_heart = "💙";
  var purple_heart = "💜";
  var black_heart = "🖤";
  var broken_heart = "💔";
  var heavy_heart_exclamation = "❣️";
  var two_hearts = "💕";
  var revolving_hearts = "💞";
  var heartbeat = "💓";
  var heartpulse = "💗";
  var sparkling_heart = "💖";
  var cupid = "💘";
  var gift_heart = "💝";
  var heart_decoration = "💟";
  var peace_symbol = "☮️";
  var latin_cross = "✝️";
  var star_and_crescent = "☪️";
  var om = "🕉";
  var wheel_of_dharma = "☸️";
  var star_of_david = "✡️";
  var six_pointed_star = "🔯";
  var menorah = "🕎";
  var yin_yang = "☯️";
  var orthodox_cross = "☦️";
  var place_of_worship = "🛐";
  var ophiuchus = "⛎";
  var aries = "♈️";
  var taurus = "♉️";
  var gemini = "♊️";
  var cancer = "♋️";
  var leo = "♌️";
  var virgo = "♍️";
  var libra = "♎️";
  var scorpius = "♏️";
  var sagittarius = "♐️";
  var capricorn = "♑️";
  var aquarius = "♒️";
  var pisces = "♓️";
  var id = "🆔";
  var atom_symbol = "⚛️";
  var accept = "🉑";
  var radioactive = "☢️";
  var biohazard = "☣️";
  var mobile_phone_off = "📴";
  var vibration_mode = "📳";
  var eight_pointed_black_star = "✴️";
  var vs = "🆚";
  var white_flower = "💮";
  var ideograph_advantage = "🉐";
  var secret = "㊙️";
  var congratulations = "㊗️";
  var u6e80 = "🈵";
  var a = "🅰️";
  var b = "🅱️";
  var ab = "🆎";
  var cl = "🆑";
  var o2 = "🅾️";
  var sos = "🆘";
  var x = "❌";
  var o = "⭕️";
  var stop_sign = "🛑";
  var no_entry = "⛔️";
  var name_badge = "📛";
  var no_entry_sign = "🚫";
  var anger = "💢";
  var hotsprings = "♨️";
  var no_pedestrians = "🚷";
  var do_not_litter = "🚯";
  var no_bicycles = "🚳";
  var underage = "🔞";
  var no_mobile_phones = "📵";
  var no_smoking = "🚭";
  var exclamation = "❗️";
  var heavy_exclamation_mark = "❗️";
  var grey_exclamation = "❕";
  var question = "❓";
  var grey_question = "❔";
  var bangbang = "‼️";
  var interrobang = "⁉️";
  var low_brightness = "🔅";
  var high_brightness = "🔆";
  var part_alternation_mark = "〽️";
  var warning = "⚠️";
  var children_crossing = "🚸";
  var trident = "🔱";
  var fleur_de_lis = "⚜️";
  var beginner = "🔰";
  var recycle = "♻️";
  var white_check_mark = "✅";
  var chart = "💹";
  var sparkle = "❇️";
  var eight_spoked_asterisk = "✳️";
  var negative_squared_cross_mark = "❎";
  var globe_with_meridians = "🌐";
  var diamond_shape_with_a_dot_inside = "💠";
  var m = "Ⓜ️";
  var cyclone = "🌀";
  var zzz = "💤";
  var atm = "🏧";
  var wc = "🚾";
  var wheelchair = "♿️";
  var parking = "🅿️";
  var sa = "🈂️";
  var passport_control = "🛂";
  var customs = "🛃";
  var baggage_claim = "🛄";
  var left_luggage = "🛅";
  var mens = "🚹";
  var womens = "🚺";
  var baby_symbol = "🚼";
  var restroom = "🚻";
  var put_litter_in_its_place = "🚮";
  var cinema = "🎦";
  var signal_strength = "📶";
  var koko = "🈁";
  var symbols = "🔣";
  var information_source = "ℹ️";
  var abc = "🔤";
  var abcd = "🔡";
  var capital_abcd = "🔠";
  var ng = "🆖";
  var ok = "🆗";
  var up = "🆙";
  var cool = "🆒";
  var free = "🆓";
  var zero$1 = "0️⃣";
  var one = "1️⃣";
  var two = "2️⃣";
  var three = "3️⃣";
  var four = "4️⃣";
  var five = "5️⃣";
  var six = "6️⃣";
  var seven = "7️⃣";
  var eight = "8️⃣";
  var nine = "9️⃣";
  var keycap_ten = "🔟";
  var hash = "#️⃣";
  var asterisk = "*️⃣";
  var arrow_forward = "▶️";
  var pause_button = "⏸";
  var play_or_pause_button = "⏯";
  var stop_button = "⏹";
  var record_button = "⏺";
  var next_track_button = "⏭";
  var previous_track_button = "⏮";
  var fast_forward = "⏩";
  var rewind = "⏪";
  var arrow_double_up = "⏫";
  var arrow_double_down = "⏬";
  var arrow_backward = "◀️";
  var arrow_up_small = "🔼";
  var arrow_down_small = "🔽";
  var arrow_right = "➡️";
  var arrow_left = "⬅️";
  var arrow_up = "⬆️";
  var arrow_down = "⬇️";
  var arrow_upper_right = "↗️";
  var arrow_lower_right = "↘️";
  var arrow_lower_left = "↙️";
  var arrow_upper_left = "↖️";
  var arrow_up_down = "↕️";
  var left_right_arrow = "↔️";
  var arrow_right_hook = "↪️";
  var leftwards_arrow_with_hook = "↩️";
  var arrow_heading_up = "⤴️";
  var arrow_heading_down = "⤵️";
  var twisted_rightwards_arrows = "🔀";
  var repeat = "🔁";
  var repeat_one = "🔂";
  var arrows_counterclockwise = "🔄";
  var arrows_clockwise = "🔃";
  var musical_note = "🎵";
  var notes = "🎶";
  var heavy_plus_sign = "➕";
  var heavy_minus_sign = "➖";
  var heavy_division_sign = "➗";
  var heavy_multiplication_x = "✖️";
  var heavy_dollar_sign = "💲";
  var currency_exchange = "💱";
  var tm = "™️";
  var copyright = "©️";
  var registered = "®️";
  var wavy_dash = "〰️";
  var curly_loop = "➰";
  var loop = "➿";
  var end = "🔚";
  var back = "🔙";
  var on = "🔛";
  var top$1 = "🔝";
  var soon = "🔜";
  var heavy_check_mark = "✔️";
  var ballot_box_with_check = "☑️";
  var radio_button = "🔘";
  var white_circle = "⚪️";
  var black_circle = "⚫️";
  var red_circle = "🔴";
  var large_blue_circle = "🔵";
  var small_red_triangle = "🔺";
  var small_red_triangle_down = "🔻";
  var small_orange_diamond = "🔸";
  var small_blue_diamond = "🔹";
  var large_orange_diamond = "🔶";
  var large_blue_diamond = "🔷";
  var white_square_button = "🔳";
  var black_square_button = "🔲";
  var black_small_square = "▪️";
  var white_small_square = "▫️";
  var black_medium_small_square = "◾️";
  var white_medium_small_square = "◽️";
  var black_medium_square = "◼️";
  var white_medium_square = "◻️";
  var black_large_square = "⬛️";
  var white_large_square = "⬜️";
  var speaker = "🔈";
  var mute = "🔇";
  var sound = "🔉";
  var loud_sound = "🔊";
  var bell = "🔔";
  var no_bell = "🔕";
  var mega = "📣";
  var loudspeaker = "📢";
  var eye_speech_bubble = "👁‍🗨";
  var speech_balloon = "💬";
  var thought_balloon = "💭";
  var right_anger_bubble = "🗯";
  var spades$1 = "♠️";
  var clubs$1 = "♣️";
  var hearts$1 = "♥️";
  var diamonds = "♦️";
  var black_joker = "🃏";
  var flower_playing_cards = "🎴";
  var mahjong = "🀄️";
  var clock1 = "🕐";
  var clock2 = "🕑";
  var clock3 = "🕒";
  var clock4 = "🕓";
  var clock5 = "🕔";
  var clock6 = "🕕";
  var clock7 = "🕖";
  var clock8 = "🕗";
  var clock9 = "🕘";
  var clock10 = "🕙";
  var clock11 = "🕚";
  var clock12 = "🕛";
  var clock130 = "🕜";
  var clock230 = "🕝";
  var clock330 = "🕞";
  var clock430 = "🕟";
  var clock530 = "🕠";
  var clock630 = "🕡";
  var clock730 = "🕢";
  var clock830 = "🕣";
  var clock930 = "🕤";
  var clock1030 = "🕥";
  var clock1130 = "🕦";
  var clock1230 = "🕧";
  var white_flag = "🏳️";
  var black_flag = "🏴";
  var checkered_flag = "🏁";
  var triangular_flag_on_post = "🚩";
  var rainbow_flag = "🏳️‍🌈";
  var afghanistan = "🇦🇫";
  var aland_islands = "🇦🇽";
  var albania = "🇦🇱";
  var algeria = "🇩🇿";
  var american_samoa = "🇦🇸";
  var andorra = "🇦🇩";
  var angola = "🇦🇴";
  var anguilla = "🇦🇮";
  var antarctica = "🇦🇶";
  var antigua_barbuda = "🇦🇬";
  var argentina = "🇦🇷";
  var armenia = "🇦🇲";
  var aruba = "🇦🇼";
  var australia = "🇦🇺";
  var austria = "🇦🇹";
  var azerbaijan = "🇦🇿";
  var bahamas = "🇧🇸";
  var bahrain = "🇧🇭";
  var bangladesh = "🇧🇩";
  var barbados = "🇧🇧";
  var belarus = "🇧🇾";
  var belgium = "🇧🇪";
  var belize = "🇧🇿";
  var benin = "🇧🇯";
  var bermuda = "🇧🇲";
  var bhutan = "🇧🇹";
  var bolivia = "🇧🇴";
  var caribbean_netherlands = "🇧🇶";
  var bosnia_herzegovina = "🇧🇦";
  var botswana = "🇧🇼";
  var brazil = "🇧🇷";
  var british_indian_ocean_territory = "🇮🇴";
  var british_virgin_islands = "🇻🇬";
  var brunei = "🇧🇳";
  var bulgaria = "🇧🇬";
  var burkina_faso = "🇧🇫";
  var burundi = "🇧🇮";
  var cape_verde = "🇨🇻";
  var cambodia = "🇰🇭";
  var cameroon = "🇨🇲";
  var canada = "🇨🇦";
  var canary_islands = "🇮🇨";
  var cayman_islands = "🇰🇾";
  var central_african_republic = "🇨🇫";
  var chad = "🇹🇩";
  var chile = "🇨🇱";
  var cn = "🇨🇳";
  var christmas_island = "🇨🇽";
  var cocos_islands = "🇨🇨";
  var colombia = "🇨🇴";
  var comoros = "🇰🇲";
  var congo_brazzaville = "🇨🇬";
  var congo_kinshasa = "🇨🇩";
  var cook_islands = "🇨🇰";
  var costa_rica = "🇨🇷";
  var cote_divoire = "🇨🇮";
  var croatia = "🇭🇷";
  var cuba = "🇨🇺";
  var curacao = "🇨🇼";
  var cyprus = "🇨🇾";
  var czech_republic = "🇨🇿";
  var denmark = "🇩🇰";
  var djibouti = "🇩🇯";
  var dominica = "🇩🇲";
  var dominican_republic = "🇩🇴";
  var ecuador = "🇪🇨";
  var egypt = "🇪🇬";
  var el_salvador = "🇸🇻";
  var equatorial_guinea = "🇬🇶";
  var eritrea = "🇪🇷";
  var estonia = "🇪🇪";
  var ethiopia = "🇪🇹";
  var eu = "🇪🇺";
  var european_union = "🇪🇺";
  var falkland_islands = "🇫🇰";
  var faroe_islands = "🇫🇴";
  var fiji = "🇫🇯";
  var finland = "🇫🇮";
  var fr = "🇫🇷";
  var french_guiana = "🇬🇫";
  var french_polynesia = "🇵🇫";
  var french_southern_territories = "🇹🇫";
  var gabon = "🇬🇦";
  var gambia = "🇬🇲";
  var georgia = "🇬🇪";
  var de = "🇩🇪";
  var ghana = "🇬🇭";
  var gibraltar = "🇬🇮";
  var greece = "🇬🇷";
  var greenland = "🇬🇱";
  var grenada = "🇬🇩";
  var guadeloupe = "🇬🇵";
  var guam = "🇬🇺";
  var guatemala = "🇬🇹";
  var guernsey = "🇬🇬";
  var guinea = "🇬🇳";
  var guinea_bissau = "🇬🇼";
  var guyana = "🇬🇾";
  var haiti = "🇭🇹";
  var honduras = "🇭🇳";
  var hong_kong = "🇭🇰";
  var hungary = "🇭🇺";
  var iceland = "🇮🇸";
  var india = "🇮🇳";
  var indonesia = "🇮🇩";
  var iran = "🇮🇷";
  var iraq = "🇮🇶";
  var ireland = "🇮🇪";
  var isle_of_man = "🇮🇲";
  var israel = "🇮🇱";
  var it$1 = "🇮🇹";
  var jamaica = "🇯🇲";
  var jp = "🇯🇵";
  var crossed_flags = "🎌";
  var jersey = "🇯🇪";
  var jordan = "🇯🇴";
  var kazakhstan = "🇰🇿";
  var kenya = "🇰🇪";
  var kiribati = "🇰🇮";
  var kosovo = "🇽🇰";
  var kuwait = "🇰🇼";
  var kyrgyzstan = "🇰🇬";
  var laos = "🇱🇦";
  var latvia = "🇱🇻";
  var lebanon = "🇱🇧";
  var lesotho = "🇱🇸";
  var liberia = "🇱🇷";
  var libya = "🇱🇾";
  var liechtenstein = "🇱🇮";
  var lithuania = "🇱🇹";
  var luxembourg = "🇱🇺";
  var macau = "🇲🇴";
  var macedonia = "🇲🇰";
  var madagascar = "🇲🇬";
  var malawi = "🇲🇼";
  var malaysia = "🇲🇾";
  var maldives = "🇲🇻";
  var mali = "🇲🇱";
  var malta = "🇲🇹";
  var marshall_islands = "🇲🇭";
  var martinique = "🇲🇶";
  var mauritania = "🇲🇷";
  var mauritius = "🇲🇺";
  var mayotte = "🇾🇹";
  var mexico = "🇲🇽";
  var micronesia = "🇫🇲";
  var moldova = "🇲🇩";
  var monaco = "🇲🇨";
  var mongolia = "🇲🇳";
  var montenegro = "🇲🇪";
  var montserrat = "🇲🇸";
  var morocco = "🇲🇦";
  var mozambique = "🇲🇿";
  var myanmar = "🇲🇲";
  var namibia = "🇳🇦";
  var nauru = "🇳🇷";
  var nepal = "🇳🇵";
  var netherlands = "🇳🇱";
  var new_caledonia = "🇳🇨";
  var new_zealand = "🇳🇿";
  var nicaragua = "🇳🇮";
  var niger = "🇳🇪";
  var nigeria = "🇳🇬";
  var niue = "🇳🇺";
  var norfolk_island = "🇳🇫";
  var northern_mariana_islands = "🇲🇵";
  var north_korea = "🇰🇵";
  var norway = "🇳🇴";
  var oman = "🇴🇲";
  var pakistan = "🇵🇰";
  var palau = "🇵🇼";
  var palestinian_territories = "🇵🇸";
  var panama = "🇵🇦";
  var papua_new_guinea = "🇵🇬";
  var paraguay = "🇵🇾";
  var peru = "🇵🇪";
  var philippines = "🇵🇭";
  var pitcairn_islands = "🇵🇳";
  var poland = "🇵🇱";
  var portugal = "🇵🇹";
  var puerto_rico = "🇵🇷";
  var qatar = "🇶🇦";
  var reunion = "🇷🇪";
  var romania = "🇷🇴";
  var ru = "🇷🇺";
  var rwanda = "🇷🇼";
  var st_barthelemy = "🇧🇱";
  var st_helena = "🇸🇭";
  var st_kitts_nevis = "🇰🇳";
  var st_lucia = "🇱🇨";
  var st_pierre_miquelon = "🇵🇲";
  var st_vincent_grenadines = "🇻🇨";
  var samoa = "🇼🇸";
  var san_marino = "🇸🇲";
  var sao_tome_principe = "🇸🇹";
  var saudi_arabia = "🇸🇦";
  var senegal = "🇸🇳";
  var serbia = "🇷🇸";
  var seychelles = "🇸🇨";
  var sierra_leone = "🇸🇱";
  var singapore = "🇸🇬";
  var sint_maarten = "🇸🇽";
  var slovakia = "🇸🇰";
  var slovenia = "🇸🇮";
  var solomon_islands = "🇸🇧";
  var somalia = "🇸🇴";
  var south_africa = "🇿🇦";
  var south_georgia_south_sandwich_islands = "🇬🇸";
  var kr = "🇰🇷";
  var south_sudan = "🇸🇸";
  var es = "🇪🇸";
  var sri_lanka = "🇱🇰";
  var sudan = "🇸🇩";
  var suriname = "🇸🇷";
  var swaziland = "🇸🇿";
  var sweden = "🇸🇪";
  var switzerland = "🇨🇭";
  var syria = "🇸🇾";
  var taiwan = "🇹🇼";
  var tajikistan = "🇹🇯";
  var tanzania = "🇹🇿";
  var thailand = "🇹🇭";
  var timor_leste = "🇹🇱";
  var togo = "🇹🇬";
  var tokelau = "🇹🇰";
  var tonga = "🇹🇴";
  var trinidad_tobago = "🇹🇹";
  var tunisia = "🇹🇳";
  var tr = "🇹🇷";
  var turkmenistan = "🇹🇲";
  var turks_caicos_islands = "🇹🇨";
  var tuvalu = "🇹🇻";
  var uganda = "🇺🇬";
  var ukraine = "🇺🇦";
  var united_arab_emirates = "🇦🇪";
  var gb = "🇬🇧";
  var uk = "🇬🇧";
  var us = "🇺🇸";
  var us_virgin_islands = "🇻🇮";
  var uruguay = "🇺🇾";
  var uzbekistan = "🇺🇿";
  var vanuatu = "🇻🇺";
  var vatican_city = "🇻🇦";
  var venezuela = "🇻🇪";
  var vietnam = "🇻🇳";
  var wallis_futuna = "🇼🇫";
  var western_sahara = "🇪🇭";
  var yemen = "🇾🇪";
  var zambia = "🇿🇲";
  var zimbabwe = "🇿🇼";
  var full = {
    "100": "💯",
    "1234": "🔢",
    grinning: grinning,
    smiley: smiley,
    smile: smile$1,
    grin: grin,
    laughing: laughing,
    satisfied: satisfied,
    sweat_smile: sweat_smile,
    joy: joy,
    rofl: rofl,
    relaxed: relaxed,
    blush: blush,
    innocent: innocent,
    slightly_smiling_face: slightly_smiling_face,
    upside_down_face: upside_down_face,
    wink: wink,
    relieved: relieved,
    heart_eyes: heart_eyes,
    kissing_heart: kissing_heart,
    kissing: kissing,
    kissing_smiling_eyes: kissing_smiling_eyes,
    kissing_closed_eyes: kissing_closed_eyes,
    yum: yum,
    stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye,
    stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes,
    stuck_out_tongue: stuck_out_tongue,
    money_mouth_face: money_mouth_face,
    hugs: hugs,
    nerd_face: nerd_face,
    sunglasses: sunglasses,
    clown_face: clown_face,
    cowboy_hat_face: cowboy_hat_face,
    smirk: smirk,
    unamused: unamused,
    disappointed: disappointed,
    pensive: pensive,
    worried: worried,
    confused: confused,
    slightly_frowning_face: slightly_frowning_face,
    frowning_face: frowning_face,
    persevere: persevere,
    confounded: confounded,
    tired_face: tired_face,
    weary: weary,
    triumph: triumph,
    angry: angry,
    rage: rage,
    pout: pout,
    no_mouth: no_mouth,
    neutral_face: neutral_face,
    expressionless: expressionless,
    hushed: hushed,
    frowning: frowning,
    anguished: anguished,
    open_mouth: open_mouth,
    astonished: astonished,
    dizzy_face: dizzy_face,
    flushed: flushed,
    scream: scream,
    fearful: fearful,
    cold_sweat: cold_sweat,
    cry: cry,
    disappointed_relieved: disappointed_relieved,
    drooling_face: drooling_face,
    sob: sob,
    sweat: sweat,
    sleepy: sleepy,
    sleeping: sleeping,
    roll_eyes: roll_eyes,
    thinking: thinking,
    lying_face: lying_face,
    grimacing: grimacing,
    zipper_mouth_face: zipper_mouth_face,
    nauseated_face: nauseated_face,
    sneezing_face: sneezing_face,
    mask: mask,
    face_with_thermometer: face_with_thermometer,
    face_with_head_bandage: face_with_head_bandage,
    smiling_imp: smiling_imp,
    imp: imp,
    japanese_ogre: japanese_ogre,
    japanese_goblin: japanese_goblin,
    hankey: hankey,
    poop: poop,
    shit: shit,
    ghost: ghost,
    skull: skull,
    skull_and_crossbones: skull_and_crossbones,
    alien: alien,
    space_invader: space_invader,
    robot: robot,
    jack_o_lantern: jack_o_lantern,
    smiley_cat: smiley_cat,
    smile_cat: smile_cat,
    joy_cat: joy_cat,
    heart_eyes_cat: heart_eyes_cat,
    smirk_cat: smirk_cat,
    kissing_cat: kissing_cat,
    scream_cat: scream_cat,
    crying_cat_face: crying_cat_face,
    pouting_cat: pouting_cat,
    open_hands: open_hands,
    raised_hands: raised_hands,
    clap: clap,
    pray: pray,
    handshake: handshake,
    "+1": "👍",
    thumbsup: thumbsup,
    "-1": "👎",
    thumbsdown: thumbsdown,
    fist_oncoming: fist_oncoming,
    facepunch: facepunch,
    punch: punch,
    fist_raised: fist_raised,
    fist: fist,
    fist_left: fist_left,
    fist_right: fist_right,
    crossed_fingers: crossed_fingers,
    v: v,
    metal: metal,
    ok_hand: ok_hand,
    point_left: point_left,
    point_right: point_right,
    point_up_2: point_up_2,
    point_down: point_down,
    point_up: point_up,
    hand: hand,
    raised_hand: raised_hand,
    raised_back_of_hand: raised_back_of_hand,
    raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed,
    vulcan_salute: vulcan_salute,
    wave: wave,
    call_me_hand: call_me_hand,
    muscle: muscle,
    middle_finger: middle_finger,
    fu: fu,
    writing_hand: writing_hand,
    selfie: selfie,
    nail_care: nail_care,
    ring: ring$1,
    lipstick: lipstick,
    kiss: kiss,
    lips: lips,
    tongue: tongue,
    ear: ear,
    nose: nose,
    footprints: footprints,
    eye: eye,
    eyes: eyes,
    speaking_head: speaking_head,
    bust_in_silhouette: bust_in_silhouette,
    busts_in_silhouette: busts_in_silhouette,
    baby: baby,
    boy: boy,
    girl: girl,
    man: man,
    woman: woman,
    blonde_woman: blonde_woman,
    blonde_man: blonde_man,
    person_with_blond_hair: person_with_blond_hair,
    older_man: older_man,
    older_woman: older_woman,
    man_with_gua_pi_mao: man_with_gua_pi_mao,
    woman_with_turban: woman_with_turban,
    man_with_turban: man_with_turban,
    policewoman: policewoman,
    policeman: policeman,
    cop: cop,
    construction_worker_woman: construction_worker_woman,
    construction_worker_man: construction_worker_man,
    construction_worker: construction_worker,
    guardswoman: guardswoman,
    guardsman: guardsman,
    female_detective: female_detective,
    male_detective: male_detective,
    detective: detective,
    woman_health_worker: woman_health_worker,
    man_health_worker: man_health_worker,
    woman_farmer: woman_farmer,
    man_farmer: man_farmer,
    woman_cook: woman_cook,
    man_cook: man_cook,
    woman_student: woman_student,
    man_student: man_student,
    woman_singer: woman_singer,
    man_singer: man_singer,
    woman_teacher: woman_teacher,
    man_teacher: man_teacher,
    woman_factory_worker: woman_factory_worker,
    man_factory_worker: man_factory_worker,
    woman_technologist: woman_technologist,
    man_technologist: man_technologist,
    woman_office_worker: woman_office_worker,
    man_office_worker: man_office_worker,
    woman_mechanic: woman_mechanic,
    man_mechanic: man_mechanic,
    woman_scientist: woman_scientist,
    man_scientist: man_scientist,
    woman_artist: woman_artist,
    man_artist: man_artist,
    woman_firefighter: woman_firefighter,
    man_firefighter: man_firefighter,
    woman_pilot: woman_pilot,
    man_pilot: man_pilot,
    woman_astronaut: woman_astronaut,
    man_astronaut: man_astronaut,
    woman_judge: woman_judge,
    man_judge: man_judge,
    mrs_claus: mrs_claus,
    santa: santa,
    princess: princess,
    prince: prince,
    bride_with_veil: bride_with_veil,
    man_in_tuxedo: man_in_tuxedo,
    angel: angel,
    pregnant_woman: pregnant_woman,
    bowing_woman: bowing_woman,
    bowing_man: bowing_man,
    bow: bow,
    tipping_hand_woman: tipping_hand_woman,
    information_desk_person: information_desk_person,
    sassy_woman: sassy_woman,
    tipping_hand_man: tipping_hand_man,
    sassy_man: sassy_man,
    no_good_woman: no_good_woman,
    no_good: no_good,
    ng_woman: ng_woman,
    no_good_man: no_good_man,
    ng_man: ng_man,
    ok_woman: ok_woman,
    ok_man: ok_man,
    raising_hand_woman: raising_hand_woman,
    raising_hand: raising_hand,
    raising_hand_man: raising_hand_man,
    woman_facepalming: woman_facepalming,
    man_facepalming: man_facepalming,
    woman_shrugging: woman_shrugging,
    man_shrugging: man_shrugging,
    pouting_woman: pouting_woman,
    person_with_pouting_face: person_with_pouting_face,
    pouting_man: pouting_man,
    frowning_woman: frowning_woman,
    person_frowning: person_frowning,
    frowning_man: frowning_man,
    haircut_woman: haircut_woman,
    haircut: haircut,
    haircut_man: haircut_man,
    massage_woman: massage_woman,
    massage: massage,
    massage_man: massage_man,
    business_suit_levitating: business_suit_levitating,
    dancer: dancer,
    man_dancing: man_dancing,
    dancing_women: dancing_women,
    dancers: dancers,
    dancing_men: dancing_men,
    walking_woman: walking_woman,
    walking_man: walking_man,
    walking: walking,
    running_woman: running_woman,
    running_man: running_man,
    runner: runner,
    running: running,
    couple: couple,
    two_women_holding_hands: two_women_holding_hands,
    two_men_holding_hands: two_men_holding_hands,
    couple_with_heart_woman_man: couple_with_heart_woman_man,
    couple_with_heart: couple_with_heart,
    couple_with_heart_woman_woman: couple_with_heart_woman_woman,
    couple_with_heart_man_man: couple_with_heart_man_man,
    couplekiss_man_woman: couplekiss_man_woman,
    couplekiss_woman_woman: couplekiss_woman_woman,
    couplekiss_man_man: couplekiss_man_man,
    family_man_woman_boy: family_man_woman_boy,
    family: family,
    family_man_woman_girl: family_man_woman_girl,
    family_man_woman_girl_boy: family_man_woman_girl_boy,
    family_man_woman_boy_boy: family_man_woman_boy_boy,
    family_man_woman_girl_girl: family_man_woman_girl_girl,
    family_woman_woman_boy: family_woman_woman_boy,
    family_woman_woman_girl: family_woman_woman_girl,
    family_woman_woman_girl_boy: family_woman_woman_girl_boy,
    family_woman_woman_boy_boy: family_woman_woman_boy_boy,
    family_woman_woman_girl_girl: family_woman_woman_girl_girl,
    family_man_man_boy: family_man_man_boy,
    family_man_man_girl: family_man_man_girl,
    family_man_man_girl_boy: family_man_man_girl_boy,
    family_man_man_boy_boy: family_man_man_boy_boy,
    family_man_man_girl_girl: family_man_man_girl_girl,
    family_woman_boy: family_woman_boy,
    family_woman_girl: family_woman_girl,
    family_woman_girl_boy: family_woman_girl_boy,
    family_woman_boy_boy: family_woman_boy_boy,
    family_woman_girl_girl: family_woman_girl_girl,
    family_man_boy: family_man_boy,
    family_man_girl: family_man_girl,
    family_man_girl_boy: family_man_girl_boy,
    family_man_boy_boy: family_man_boy_boy,
    family_man_girl_girl: family_man_girl_girl,
    womans_clothes: womans_clothes,
    shirt: shirt,
    tshirt: tshirt,
    jeans: jeans,
    necktie: necktie,
    dress: dress,
    bikini: bikini,
    kimono: kimono,
    high_heel: high_heel,
    sandal: sandal,
    boot: boot,
    mans_shoe: mans_shoe,
    shoe: shoe,
    athletic_shoe: athletic_shoe,
    womans_hat: womans_hat,
    tophat: tophat,
    mortar_board: mortar_board,
    crown: crown,
    rescue_worker_helmet: rescue_worker_helmet,
    school_satchel: school_satchel,
    pouch: pouch,
    purse: purse,
    handbag: handbag,
    briefcase: briefcase,
    eyeglasses: eyeglasses,
    dark_sunglasses: dark_sunglasses,
    closed_umbrella: closed_umbrella,
    open_umbrella: open_umbrella,
    dog: dog,
    cat: cat,
    mouse: mouse,
    hamster: hamster,
    rabbit: rabbit,
    fox_face: fox_face,
    bear: bear,
    panda_face: panda_face,
    koala: koala,
    tiger: tiger,
    lion: lion,
    cow: cow,
    pig: pig,
    pig_nose: pig_nose,
    frog: frog,
    monkey_face: monkey_face,
    see_no_evil: see_no_evil,
    hear_no_evil: hear_no_evil,
    speak_no_evil: speak_no_evil,
    monkey: monkey,
    chicken: chicken,
    penguin: penguin,
    bird: bird,
    baby_chick: baby_chick,
    hatching_chick: hatching_chick,
    hatched_chick: hatched_chick,
    duck: duck,
    eagle: eagle,
    owl: owl,
    bat: bat,
    wolf: wolf,
    boar: boar,
    horse: horse,
    unicorn: unicorn,
    bee: bee,
    honeybee: honeybee,
    bug: bug,
    butterfly: butterfly,
    snail: snail,
    shell: shell,
    beetle: beetle,
    ant: ant,
    spider: spider,
    spider_web: spider_web,
    turtle: turtle,
    snake: snake,
    lizard: lizard,
    scorpion: scorpion,
    crab: crab,
    squid: squid,
    octopus: octopus,
    shrimp: shrimp,
    tropical_fish: tropical_fish,
    fish: fish,
    blowfish: blowfish,
    dolphin: dolphin,
    flipper: flipper,
    shark: shark,
    whale: whale,
    whale2: whale2,
    crocodile: crocodile,
    leopard: leopard,
    tiger2: tiger2,
    water_buffalo: water_buffalo,
    ox: ox,
    cow2: cow2,
    deer: deer,
    dromedary_camel: dromedary_camel,
    camel: camel,
    elephant: elephant,
    rhinoceros: rhinoceros,
    gorilla: gorilla,
    racehorse: racehorse,
    pig2: pig2,
    goat: goat,
    ram: ram,
    sheep: sheep,
    dog2: dog2,
    poodle: poodle,
    cat2: cat2,
    rooster: rooster,
    turkey: turkey,
    dove: dove,
    rabbit2: rabbit2,
    mouse2: mouse2,
    rat: rat,
    chipmunk: chipmunk,
    feet: feet,
    paw_prints: paw_prints,
    dragon: dragon,
    dragon_face: dragon_face,
    cactus: cactus,
    christmas_tree: christmas_tree,
    evergreen_tree: evergreen_tree,
    deciduous_tree: deciduous_tree,
    palm_tree: palm_tree,
    seedling: seedling,
    herb: herb,
    shamrock: shamrock,
    four_leaf_clover: four_leaf_clover,
    bamboo: bamboo,
    tanabata_tree: tanabata_tree,
    leaves: leaves,
    fallen_leaf: fallen_leaf,
    maple_leaf: maple_leaf,
    mushroom: mushroom,
    ear_of_rice: ear_of_rice,
    bouquet: bouquet,
    tulip: tulip,
    rose: rose,
    wilted_flower: wilted_flower,
    sunflower: sunflower,
    blossom: blossom,
    cherry_blossom: cherry_blossom,
    hibiscus: hibiscus,
    earth_americas: earth_americas,
    earth_africa: earth_africa,
    earth_asia: earth_asia,
    full_moon: full_moon,
    waning_gibbous_moon: waning_gibbous_moon,
    last_quarter_moon: last_quarter_moon,
    waning_crescent_moon: waning_crescent_moon,
    new_moon: new_moon,
    waxing_crescent_moon: waxing_crescent_moon,
    first_quarter_moon: first_quarter_moon,
    moon: moon,
    waxing_gibbous_moon: waxing_gibbous_moon,
    new_moon_with_face: new_moon_with_face,
    full_moon_with_face: full_moon_with_face,
    sun_with_face: sun_with_face,
    first_quarter_moon_with_face: first_quarter_moon_with_face,
    last_quarter_moon_with_face: last_quarter_moon_with_face,
    crescent_moon: crescent_moon,
    dizzy: dizzy,
    star: star$1,
    star2: star2,
    sparkles: sparkles,
    zap: zap,
    fire: fire,
    boom: boom,
    collision: collision,
    comet: comet,
    sunny: sunny,
    sun_behind_small_cloud: sun_behind_small_cloud,
    partly_sunny: partly_sunny,
    sun_behind_large_cloud: sun_behind_large_cloud,
    sun_behind_rain_cloud: sun_behind_rain_cloud,
    rainbow: rainbow,
    cloud: cloud,
    cloud_with_rain: cloud_with_rain,
    cloud_with_lightning_and_rain: cloud_with_lightning_and_rain,
    cloud_with_lightning: cloud_with_lightning,
    cloud_with_snow: cloud_with_snow,
    snowman_with_snow: snowman_with_snow,
    snowman: snowman,
    snowflake: snowflake,
    wind_face: wind_face,
    dash: dash$1,
    tornado: tornado,
    fog: fog,
    ocean: ocean,
    droplet: droplet,
    sweat_drops: sweat_drops,
    umbrella: umbrella,
    green_apple: green_apple,
    apple: apple,
    pear: pear,
    tangerine: tangerine,
    orange: orange,
    mandarin: mandarin,
    lemon: lemon,
    banana: banana,
    watermelon: watermelon,
    grapes: grapes,
    strawberry: strawberry,
    melon: melon,
    cherries: cherries,
    peach: peach,
    pineapple: pineapple,
    kiwi_fruit: kiwi_fruit,
    avocado: avocado,
    tomato: tomato,
    eggplant: eggplant,
    cucumber: cucumber,
    carrot: carrot,
    corn: corn,
    hot_pepper: hot_pepper,
    potato: potato,
    sweet_potato: sweet_potato,
    chestnut: chestnut,
    peanuts: peanuts,
    honey_pot: honey_pot,
    croissant: croissant,
    bread: bread,
    baguette_bread: baguette_bread,
    cheese: cheese,
    egg: egg,
    fried_egg: fried_egg,
    bacon: bacon,
    pancakes: pancakes,
    fried_shrimp: fried_shrimp,
    poultry_leg: poultry_leg,
    meat_on_bone: meat_on_bone,
    pizza: pizza,
    hotdog: hotdog,
    hamburger: hamburger,
    fries: fries,
    stuffed_flatbread: stuffed_flatbread,
    taco: taco,
    burrito: burrito,
    green_salad: green_salad,
    shallow_pan_of_food: shallow_pan_of_food,
    spaghetti: spaghetti,
    ramen: ramen,
    stew: stew,
    fish_cake: fish_cake,
    sushi: sushi,
    bento: bento,
    curry: curry,
    rice: rice,
    rice_ball: rice_ball,
    rice_cracker: rice_cracker,
    oden: oden,
    dango: dango,
    shaved_ice: shaved_ice,
    ice_cream: ice_cream,
    icecream: icecream,
    cake: cake,
    birthday: birthday,
    custard: custard,
    lollipop: lollipop,
    candy: candy,
    chocolate_bar: chocolate_bar,
    popcorn: popcorn,
    doughnut: doughnut,
    cookie: cookie,
    milk_glass: milk_glass,
    baby_bottle: baby_bottle,
    coffee: coffee,
    tea: tea,
    sake: sake,
    beer: beer,
    beers: beers,
    clinking_glasses: clinking_glasses,
    wine_glass: wine_glass,
    tumbler_glass: tumbler_glass,
    cocktail: cocktail,
    tropical_drink: tropical_drink,
    champagne: champagne,
    spoon: spoon,
    fork_and_knife: fork_and_knife,
    plate_with_cutlery: plate_with_cutlery,
    soccer: soccer,
    basketball: basketball,
    football: football,
    baseball: baseball,
    tennis: tennis,
    volleyball: volleyball,
    rugby_football: rugby_football,
    "8ball": "🎱",
    ping_pong: ping_pong,
    badminton: badminton,
    goal_net: goal_net,
    ice_hockey: ice_hockey,
    field_hockey: field_hockey,
    cricket: cricket,
    golf: golf,
    bow_and_arrow: bow_and_arrow,
    fishing_pole_and_fish: fishing_pole_and_fish,
    boxing_glove: boxing_glove,
    martial_arts_uniform: martial_arts_uniform,
    ice_skate: ice_skate,
    ski: ski,
    skier: skier,
    snowboarder: snowboarder,
    weight_lifting_woman: weight_lifting_woman,
    weight_lifting_man: weight_lifting_man,
    person_fencing: person_fencing,
    women_wrestling: women_wrestling,
    men_wrestling: men_wrestling,
    woman_cartwheeling: woman_cartwheeling,
    man_cartwheeling: man_cartwheeling,
    basketball_woman: basketball_woman,
    basketball_man: basketball_man,
    woman_playing_handball: woman_playing_handball,
    man_playing_handball: man_playing_handball,
    golfing_woman: golfing_woman,
    golfing_man: golfing_man,
    surfing_woman: surfing_woman,
    surfing_man: surfing_man,
    surfer: surfer,
    swimming_woman: swimming_woman,
    swimming_man: swimming_man,
    swimmer: swimmer,
    woman_playing_water_polo: woman_playing_water_polo,
    man_playing_water_polo: man_playing_water_polo,
    rowing_woman: rowing_woman,
    rowing_man: rowing_man,
    rowboat: rowboat,
    horse_racing: horse_racing,
    biking_woman: biking_woman,
    biking_man: biking_man,
    bicyclist: bicyclist,
    mountain_biking_woman: mountain_biking_woman,
    mountain_biking_man: mountain_biking_man,
    mountain_bicyclist: mountain_bicyclist,
    running_shirt_with_sash: running_shirt_with_sash,
    medal_sports: medal_sports,
    medal_military: medal_military,
    "1st_place_medal": "🥇",
    "2nd_place_medal": "🥈",
    "3rd_place_medal": "🥉",
    trophy: trophy,
    rosette: rosette,
    reminder_ribbon: reminder_ribbon,
    ticket: ticket,
    tickets: tickets,
    circus_tent: circus_tent,
    woman_juggling: woman_juggling,
    man_juggling: man_juggling,
    performing_arts: performing_arts,
    art: art,
    clapper: clapper,
    microphone: microphone,
    headphones: headphones,
    musical_score: musical_score,
    musical_keyboard: musical_keyboard,
    drum: drum,
    saxophone: saxophone,
    trumpet: trumpet,
    guitar: guitar,
    violin: violin,
    game_die: game_die,
    dart: dart,
    bowling: bowling,
    video_game: video_game,
    slot_machine: slot_machine,
    car: car,
    red_car: red_car,
    taxi: taxi,
    blue_car: blue_car,
    bus: bus,
    trolleybus: trolleybus,
    racing_car: racing_car,
    police_car: police_car,
    ambulance: ambulance,
    fire_engine: fire_engine,
    minibus: minibus,
    truck: truck,
    articulated_lorry: articulated_lorry,
    tractor: tractor,
    kick_scooter: kick_scooter,
    bike: bike,
    motor_scooter: motor_scooter,
    motorcycle: motorcycle,
    rotating_light: rotating_light,
    oncoming_police_car: oncoming_police_car,
    oncoming_bus: oncoming_bus,
    oncoming_automobile: oncoming_automobile,
    oncoming_taxi: oncoming_taxi,
    aerial_tramway: aerial_tramway,
    mountain_cableway: mountain_cableway,
    suspension_railway: suspension_railway,
    railway_car: railway_car,
    train: train,
    mountain_railway: mountain_railway,
    monorail: monorail,
    bullettrain_side: bullettrain_side,
    bullettrain_front: bullettrain_front,
    light_rail: light_rail,
    steam_locomotive: steam_locomotive,
    train2: train2,
    metro: metro,
    tram: tram,
    station: station,
    helicopter: helicopter,
    small_airplane: small_airplane,
    airplane: airplane,
    flight_departure: flight_departure,
    flight_arrival: flight_arrival,
    rocket: rocket,
    artificial_satellite: artificial_satellite,
    seat: seat,
    canoe: canoe,
    boat: boat,
    sailboat: sailboat,
    motor_boat: motor_boat,
    speedboat: speedboat,
    passenger_ship: passenger_ship,
    ferry: ferry,
    ship: ship,
    anchor: anchor,
    construction: construction,
    fuelpump: fuelpump,
    busstop: busstop,
    vertical_traffic_light: vertical_traffic_light,
    traffic_light: traffic_light,
    world_map: world_map,
    moyai: moyai,
    statue_of_liberty: statue_of_liberty,
    fountain: fountain,
    tokyo_tower: tokyo_tower,
    european_castle: european_castle,
    japanese_castle: japanese_castle,
    stadium: stadium,
    ferris_wheel: ferris_wheel,
    roller_coaster: roller_coaster,
    carousel_horse: carousel_horse,
    parasol_on_ground: parasol_on_ground,
    beach_umbrella: beach_umbrella,
    desert_island: desert_island,
    mountain: mountain,
    mountain_snow: mountain_snow,
    mount_fuji: mount_fuji,
    volcano: volcano,
    desert: desert,
    camping: camping,
    tent: tent,
    railway_track: railway_track,
    motorway: motorway,
    building_construction: building_construction,
    factory: factory,
    house: house,
    house_with_garden: house_with_garden,
    houses: houses,
    derelict_house: derelict_house,
    office: office,
    department_store: department_store,
    post_office: post_office,
    european_post_office: european_post_office,
    hospital: hospital,
    bank: bank,
    hotel: hotel,
    convenience_store: convenience_store,
    school: school,
    love_hotel: love_hotel,
    wedding: wedding,
    classical_building: classical_building,
    church: church,
    mosque: mosque,
    synagogue: synagogue,
    kaaba: kaaba,
    shinto_shrine: shinto_shrine,
    japan: japan,
    rice_scene: rice_scene,
    national_park: national_park,
    sunrise: sunrise,
    sunrise_over_mountains: sunrise_over_mountains,
    stars: stars,
    sparkler: sparkler,
    fireworks: fireworks,
    city_sunrise: city_sunrise,
    city_sunset: city_sunset,
    cityscape: cityscape,
    night_with_stars: night_with_stars,
    milky_way: milky_way,
    bridge_at_night: bridge_at_night,
    foggy: foggy,
    watch: watch,
    iphone: iphone,
    calling: calling,
    computer: computer,
    keyboard: keyboard,
    desktop_computer: desktop_computer,
    printer: printer,
    computer_mouse: computer_mouse,
    trackball: trackball,
    joystick: joystick,
    clamp: clamp,
    minidisc: minidisc,
    floppy_disk: floppy_disk,
    cd: cd,
    dvd: dvd,
    vhs: vhs,
    camera: camera,
    camera_flash: camera_flash,
    video_camera: video_camera,
    movie_camera: movie_camera,
    film_projector: film_projector,
    film_strip: film_strip,
    telephone_receiver: telephone_receiver,
    phone: phone$1,
    telephone: telephone,
    pager: pager,
    fax: fax,
    tv: tv,
    radio: radio,
    studio_microphone: studio_microphone,
    level_slider: level_slider,
    control_knobs: control_knobs,
    stopwatch: stopwatch,
    timer_clock: timer_clock,
    alarm_clock: alarm_clock,
    mantelpiece_clock: mantelpiece_clock,
    hourglass: hourglass,
    hourglass_flowing_sand: hourglass_flowing_sand,
    satellite: satellite,
    battery: battery,
    electric_plug: electric_plug,
    bulb: bulb,
    flashlight: flashlight,
    candle: candle,
    wastebasket: wastebasket,
    oil_drum: oil_drum,
    money_with_wings: money_with_wings,
    dollar: dollar$1,
    yen: yen$1,
    euro: euro$1,
    pound: pound$1,
    moneybag: moneybag,
    credit_card: credit_card,
    gem: gem,
    balance_scale: balance_scale,
    wrench: wrench,
    hammer: hammer,
    hammer_and_pick: hammer_and_pick,
    hammer_and_wrench: hammer_and_wrench,
    pick: pick,
    nut_and_bolt: nut_and_bolt,
    gear: gear,
    chains: chains,
    gun: gun,
    bomb: bomb,
    hocho: hocho,
    knife: knife,
    dagger: dagger$1,
    crossed_swords: crossed_swords,
    shield: shield,
    smoking: smoking,
    coffin: coffin,
    funeral_urn: funeral_urn,
    amphora: amphora,
    crystal_ball: crystal_ball,
    prayer_beads: prayer_beads,
    barber: barber,
    alembic: alembic,
    telescope: telescope,
    microscope: microscope,
    hole: hole,
    pill: pill,
    syringe: syringe,
    thermometer: thermometer,
    toilet: toilet,
    potable_water: potable_water,
    shower: shower,
    bathtub: bathtub,
    bath: bath,
    bellhop_bell: bellhop_bell,
    key: key,
    old_key: old_key,
    door: door,
    couch_and_lamp: couch_and_lamp,
    bed: bed,
    sleeping_bed: sleeping_bed,
    framed_picture: framed_picture,
    shopping: shopping,
    shopping_cart: shopping_cart,
    gift: gift,
    balloon: balloon,
    flags: flags,
    ribbon: ribbon,
    confetti_ball: confetti_ball,
    tada: tada,
    dolls: dolls,
    izakaya_lantern: izakaya_lantern,
    lantern: lantern,
    wind_chime: wind_chime,
    email: email,
    envelope: envelope,
    envelope_with_arrow: envelope_with_arrow,
    incoming_envelope: incoming_envelope,
    "e-mail": "📧",
    love_letter: love_letter,
    inbox_tray: inbox_tray,
    outbox_tray: outbox_tray,
    "package": "📦",
    label: label,
    mailbox_closed: mailbox_closed,
    mailbox: mailbox,
    mailbox_with_mail: mailbox_with_mail,
    mailbox_with_no_mail: mailbox_with_no_mail,
    postbox: postbox,
    postal_horn: postal_horn,
    scroll: scroll,
    page_with_curl: page_with_curl,
    page_facing_up: page_facing_up,
    bookmark_tabs: bookmark_tabs,
    bar_chart: bar_chart,
    chart_with_upwards_trend: chart_with_upwards_trend,
    chart_with_downwards_trend: chart_with_downwards_trend,
    spiral_notepad: spiral_notepad,
    spiral_calendar: spiral_calendar,
    calendar: calendar,
    date: date,
    card_index: card_index,
    card_file_box: card_file_box,
    ballot_box: ballot_box,
    file_cabinet: file_cabinet,
    clipboard: clipboard,
    file_folder: file_folder,
    open_file_folder: open_file_folder,
    card_index_dividers: card_index_dividers,
    newspaper_roll: newspaper_roll,
    newspaper: newspaper,
    notebook: notebook,
    notebook_with_decorative_cover: notebook_with_decorative_cover,
    ledger: ledger,
    closed_book: closed_book,
    green_book: green_book,
    blue_book: blue_book,
    orange_book: orange_book,
    books: books,
    book: book,
    open_book: open_book,
    bookmark: bookmark,
    link: link$1,
    paperclip: paperclip,
    paperclips: paperclips,
    triangular_ruler: triangular_ruler,
    straight_ruler: straight_ruler,
    pushpin: pushpin,
    round_pushpin: round_pushpin,
    scissors: scissors,
    pen: pen,
    fountain_pen: fountain_pen,
    black_nib: black_nib,
    paintbrush: paintbrush,
    crayon: crayon,
    memo: memo,
    pencil: pencil,
    pencil2: pencil2,
    mag: mag,
    mag_right: mag_right,
    lock_with_ink_pen: lock_with_ink_pen,
    closed_lock_with_key: closed_lock_with_key,
    lock: lock,
    unlock: unlock,
    heart: heart,
    yellow_heart: yellow_heart,
    green_heart: green_heart,
    blue_heart: blue_heart,
    purple_heart: purple_heart,
    black_heart: black_heart,
    broken_heart: broken_heart,
    heavy_heart_exclamation: heavy_heart_exclamation,
    two_hearts: two_hearts,
    revolving_hearts: revolving_hearts,
    heartbeat: heartbeat,
    heartpulse: heartpulse,
    sparkling_heart: sparkling_heart,
    cupid: cupid,
    gift_heart: gift_heart,
    heart_decoration: heart_decoration,
    peace_symbol: peace_symbol,
    latin_cross: latin_cross,
    star_and_crescent: star_and_crescent,
    om: om,
    wheel_of_dharma: wheel_of_dharma,
    star_of_david: star_of_david,
    six_pointed_star: six_pointed_star,
    menorah: menorah,
    yin_yang: yin_yang,
    orthodox_cross: orthodox_cross,
    place_of_worship: place_of_worship,
    ophiuchus: ophiuchus,
    aries: aries,
    taurus: taurus,
    gemini: gemini,
    cancer: cancer,
    leo: leo,
    virgo: virgo,
    libra: libra,
    scorpius: scorpius,
    sagittarius: sagittarius,
    capricorn: capricorn,
    aquarius: aquarius,
    pisces: pisces,
    id: id,
    atom_symbol: atom_symbol,
    accept: accept,
    radioactive: radioactive,
    biohazard: biohazard,
    mobile_phone_off: mobile_phone_off,
    vibration_mode: vibration_mode,
    eight_pointed_black_star: eight_pointed_black_star,
    vs: vs,
    white_flower: white_flower,
    ideograph_advantage: ideograph_advantage,
    secret: secret,
    congratulations: congratulations,
    u6e80: u6e80,
    a: a,
    b: b,
    ab: ab,
    cl: cl,
    o2: o2,
    sos: sos,
    x: x,
    o: o,
    stop_sign: stop_sign,
    no_entry: no_entry,
    name_badge: name_badge,
    no_entry_sign: no_entry_sign,
    anger: anger,
    hotsprings: hotsprings,
    no_pedestrians: no_pedestrians,
    do_not_litter: do_not_litter,
    no_bicycles: no_bicycles,
    "non-potable_water": "🚱",
    underage: underage,
    no_mobile_phones: no_mobile_phones,
    no_smoking: no_smoking,
    exclamation: exclamation,
    heavy_exclamation_mark: heavy_exclamation_mark,
    grey_exclamation: grey_exclamation,
    question: question,
    grey_question: grey_question,
    bangbang: bangbang,
    interrobang: interrobang,
    low_brightness: low_brightness,
    high_brightness: high_brightness,
    part_alternation_mark: part_alternation_mark,
    warning: warning,
    children_crossing: children_crossing,
    trident: trident,
    fleur_de_lis: fleur_de_lis,
    beginner: beginner,
    recycle: recycle,
    white_check_mark: white_check_mark,
    chart: chart,
    sparkle: sparkle,
    eight_spoked_asterisk: eight_spoked_asterisk,
    negative_squared_cross_mark: negative_squared_cross_mark,
    globe_with_meridians: globe_with_meridians,
    diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside,
    m: m,
    cyclone: cyclone,
    zzz: zzz,
    atm: atm,
    wc: wc,
    wheelchair: wheelchair,
    parking: parking,
    sa: sa,
    passport_control: passport_control,
    customs: customs,
    baggage_claim: baggage_claim,
    left_luggage: left_luggage,
    mens: mens,
    womens: womens,
    baby_symbol: baby_symbol,
    restroom: restroom,
    put_litter_in_its_place: put_litter_in_its_place,
    cinema: cinema,
    signal_strength: signal_strength,
    koko: koko,
    symbols: symbols,
    information_source: information_source,
    abc: abc,
    abcd: abcd,
    capital_abcd: capital_abcd,
    ng: ng,
    ok: ok,
    up: up,
    cool: cool,
    "new": "🆕",
    free: free,
    zero: zero$1,
    one: one,
    two: two,
    three: three,
    four: four,
    five: five,
    six: six,
    seven: seven,
    eight: eight,
    nine: nine,
    keycap_ten: keycap_ten,
    hash: hash,
    asterisk: asterisk,
    arrow_forward: arrow_forward,
    pause_button: pause_button,
    play_or_pause_button: play_or_pause_button,
    stop_button: stop_button,
    record_button: record_button,
    next_track_button: next_track_button,
    previous_track_button: previous_track_button,
    fast_forward: fast_forward,
    rewind: rewind,
    arrow_double_up: arrow_double_up,
    arrow_double_down: arrow_double_down,
    arrow_backward: arrow_backward,
    arrow_up_small: arrow_up_small,
    arrow_down_small: arrow_down_small,
    arrow_right: arrow_right,
    arrow_left: arrow_left,
    arrow_up: arrow_up,
    arrow_down: arrow_down,
    arrow_upper_right: arrow_upper_right,
    arrow_lower_right: arrow_lower_right,
    arrow_lower_left: arrow_lower_left,
    arrow_upper_left: arrow_upper_left,
    arrow_up_down: arrow_up_down,
    left_right_arrow: left_right_arrow,
    arrow_right_hook: arrow_right_hook,
    leftwards_arrow_with_hook: leftwards_arrow_with_hook,
    arrow_heading_up: arrow_heading_up,
    arrow_heading_down: arrow_heading_down,
    twisted_rightwards_arrows: twisted_rightwards_arrows,
    repeat: repeat,
    repeat_one: repeat_one,
    arrows_counterclockwise: arrows_counterclockwise,
    arrows_clockwise: arrows_clockwise,
    musical_note: musical_note,
    notes: notes,
    heavy_plus_sign: heavy_plus_sign,
    heavy_minus_sign: heavy_minus_sign,
    heavy_division_sign: heavy_division_sign,
    heavy_multiplication_x: heavy_multiplication_x,
    heavy_dollar_sign: heavy_dollar_sign,
    currency_exchange: currency_exchange,
    tm: tm,
    copyright: copyright,
    registered: registered,
    wavy_dash: wavy_dash,
    curly_loop: curly_loop,
    loop: loop,
    end: end,
    back: back,
    on: on,
    top: top$1,
    soon: soon,
    heavy_check_mark: heavy_check_mark,
    ballot_box_with_check: ballot_box_with_check,
    radio_button: radio_button,
    white_circle: white_circle,
    black_circle: black_circle,
    red_circle: red_circle,
    large_blue_circle: large_blue_circle,
    small_red_triangle: small_red_triangle,
    small_red_triangle_down: small_red_triangle_down,
    small_orange_diamond: small_orange_diamond,
    small_blue_diamond: small_blue_diamond,
    large_orange_diamond: large_orange_diamond,
    large_blue_diamond: large_blue_diamond,
    white_square_button: white_square_button,
    black_square_button: black_square_button,
    black_small_square: black_small_square,
    white_small_square: white_small_square,
    black_medium_small_square: black_medium_small_square,
    white_medium_small_square: white_medium_small_square,
    black_medium_square: black_medium_square,
    white_medium_square: white_medium_square,
    black_large_square: black_large_square,
    white_large_square: white_large_square,
    speaker: speaker,
    mute: mute,
    sound: sound,
    loud_sound: loud_sound,
    bell: bell,
    no_bell: no_bell,
    mega: mega,
    loudspeaker: loudspeaker,
    eye_speech_bubble: eye_speech_bubble,
    speech_balloon: speech_balloon,
    thought_balloon: thought_balloon,
    right_anger_bubble: right_anger_bubble,
    spades: spades$1,
    clubs: clubs$1,
    hearts: hearts$1,
    diamonds: diamonds,
    black_joker: black_joker,
    flower_playing_cards: flower_playing_cards,
    mahjong: mahjong,
    clock1: clock1,
    clock2: clock2,
    clock3: clock3,
    clock4: clock4,
    clock5: clock5,
    clock6: clock6,
    clock7: clock7,
    clock8: clock8,
    clock9: clock9,
    clock10: clock10,
    clock11: clock11,
    clock12: clock12,
    clock130: clock130,
    clock230: clock230,
    clock330: clock330,
    clock430: clock430,
    clock530: clock530,
    clock630: clock630,
    clock730: clock730,
    clock830: clock830,
    clock930: clock930,
    clock1030: clock1030,
    clock1130: clock1130,
    clock1230: clock1230,
    white_flag: white_flag,
    black_flag: black_flag,
    checkered_flag: checkered_flag,
    triangular_flag_on_post: triangular_flag_on_post,
    rainbow_flag: rainbow_flag,
    afghanistan: afghanistan,
    aland_islands: aland_islands,
    albania: albania,
    algeria: algeria,
    american_samoa: american_samoa,
    andorra: andorra,
    angola: angola,
    anguilla: anguilla,
    antarctica: antarctica,
    antigua_barbuda: antigua_barbuda,
    argentina: argentina,
    armenia: armenia,
    aruba: aruba,
    australia: australia,
    austria: austria,
    azerbaijan: azerbaijan,
    bahamas: bahamas,
    bahrain: bahrain,
    bangladesh: bangladesh,
    barbados: barbados,
    belarus: belarus,
    belgium: belgium,
    belize: belize,
    benin: benin,
    bermuda: bermuda,
    bhutan: bhutan,
    bolivia: bolivia,
    caribbean_netherlands: caribbean_netherlands,
    bosnia_herzegovina: bosnia_herzegovina,
    botswana: botswana,
    brazil: brazil,
    british_indian_ocean_territory: british_indian_ocean_territory,
    british_virgin_islands: british_virgin_islands,
    brunei: brunei,
    bulgaria: bulgaria,
    burkina_faso: burkina_faso,
    burundi: burundi,
    cape_verde: cape_verde,
    cambodia: cambodia,
    cameroon: cameroon,
    canada: canada,
    canary_islands: canary_islands,
    cayman_islands: cayman_islands,
    central_african_republic: central_african_republic,
    chad: chad,
    chile: chile,
    cn: cn,
    christmas_island: christmas_island,
    cocos_islands: cocos_islands,
    colombia: colombia,
    comoros: comoros,
    congo_brazzaville: congo_brazzaville,
    congo_kinshasa: congo_kinshasa,
    cook_islands: cook_islands,
    costa_rica: costa_rica,
    cote_divoire: cote_divoire,
    croatia: croatia,
    cuba: cuba,
    curacao: curacao,
    cyprus: cyprus,
    czech_republic: czech_republic,
    denmark: denmark,
    djibouti: djibouti,
    dominica: dominica,
    dominican_republic: dominican_republic,
    ecuador: ecuador,
    egypt: egypt,
    el_salvador: el_salvador,
    equatorial_guinea: equatorial_guinea,
    eritrea: eritrea,
    estonia: estonia,
    ethiopia: ethiopia,
    eu: eu,
    european_union: european_union,
    falkland_islands: falkland_islands,
    faroe_islands: faroe_islands,
    fiji: fiji,
    finland: finland,
    fr: fr,
    french_guiana: french_guiana,
    french_polynesia: french_polynesia,
    french_southern_territories: french_southern_territories,
    gabon: gabon,
    gambia: gambia,
    georgia: georgia,
    de: de,
    ghana: ghana,
    gibraltar: gibraltar,
    greece: greece,
    greenland: greenland,
    grenada: grenada,
    guadeloupe: guadeloupe,
    guam: guam,
    guatemala: guatemala,
    guernsey: guernsey,
    guinea: guinea,
    guinea_bissau: guinea_bissau,
    guyana: guyana,
    haiti: haiti,
    honduras: honduras,
    hong_kong: hong_kong,
    hungary: hungary,
    iceland: iceland,
    india: india,
    indonesia: indonesia,
    iran: iran,
    iraq: iraq,
    ireland: ireland,
    isle_of_man: isle_of_man,
    israel: israel,
    it: it$1,
    jamaica: jamaica,
    jp: jp,
    crossed_flags: crossed_flags,
    jersey: jersey,
    jordan: jordan,
    kazakhstan: kazakhstan,
    kenya: kenya,
    kiribati: kiribati,
    kosovo: kosovo,
    kuwait: kuwait,
    kyrgyzstan: kyrgyzstan,
    laos: laos,
    latvia: latvia,
    lebanon: lebanon,
    lesotho: lesotho,
    liberia: liberia,
    libya: libya,
    liechtenstein: liechtenstein,
    lithuania: lithuania,
    luxembourg: luxembourg,
    macau: macau,
    macedonia: macedonia,
    madagascar: madagascar,
    malawi: malawi,
    malaysia: malaysia,
    maldives: maldives,
    mali: mali,
    malta: malta,
    marshall_islands: marshall_islands,
    martinique: martinique,
    mauritania: mauritania,
    mauritius: mauritius,
    mayotte: mayotte,
    mexico: mexico,
    micronesia: micronesia,
    moldova: moldova,
    monaco: monaco,
    mongolia: mongolia,
    montenegro: montenegro,
    montserrat: montserrat,
    morocco: morocco,
    mozambique: mozambique,
    myanmar: myanmar,
    namibia: namibia,
    nauru: nauru,
    nepal: nepal,
    netherlands: netherlands,
    new_caledonia: new_caledonia,
    new_zealand: new_zealand,
    nicaragua: nicaragua,
    niger: niger,
    nigeria: nigeria,
    niue: niue,
    norfolk_island: norfolk_island,
    northern_mariana_islands: northern_mariana_islands,
    north_korea: north_korea,
    norway: norway,
    oman: oman,
    pakistan: pakistan,
    palau: palau,
    palestinian_territories: palestinian_territories,
    panama: panama,
    papua_new_guinea: papua_new_guinea,
    paraguay: paraguay,
    peru: peru,
    philippines: philippines,
    pitcairn_islands: pitcairn_islands,
    poland: poland,
    portugal: portugal,
    puerto_rico: puerto_rico,
    qatar: qatar,
    reunion: reunion,
    romania: romania,
    ru: ru,
    rwanda: rwanda,
    st_barthelemy: st_barthelemy,
    st_helena: st_helena,
    st_kitts_nevis: st_kitts_nevis,
    st_lucia: st_lucia,
    st_pierre_miquelon: st_pierre_miquelon,
    st_vincent_grenadines: st_vincent_grenadines,
    samoa: samoa,
    san_marino: san_marino,
    sao_tome_principe: sao_tome_principe,
    saudi_arabia: saudi_arabia,
    senegal: senegal,
    serbia: serbia,
    seychelles: seychelles,
    sierra_leone: sierra_leone,
    singapore: singapore,
    sint_maarten: sint_maarten,
    slovakia: slovakia,
    slovenia: slovenia,
    solomon_islands: solomon_islands,
    somalia: somalia,
    south_africa: south_africa,
    south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands,
    kr: kr,
    south_sudan: south_sudan,
    es: es,
    sri_lanka: sri_lanka,
    sudan: sudan,
    suriname: suriname,
    swaziland: swaziland,
    sweden: sweden,
    switzerland: switzerland,
    syria: syria,
    taiwan: taiwan,
    tajikistan: tajikistan,
    tanzania: tanzania,
    thailand: thailand,
    timor_leste: timor_leste,
    togo: togo,
    tokelau: tokelau,
    tonga: tonga,
    trinidad_tobago: trinidad_tobago,
    tunisia: tunisia,
    tr: tr,
    turkmenistan: turkmenistan,
    turks_caicos_islands: turks_caicos_islands,
    tuvalu: tuvalu,
    uganda: uganda,
    ukraine: ukraine,
    united_arab_emirates: united_arab_emirates,
    gb: gb,
    uk: uk,
    us: us,
    us_virgin_islands: us_virgin_islands,
    uruguay: uruguay,
    uzbekistan: uzbekistan,
    vanuatu: vanuatu,
    vatican_city: vatican_city,
    venezuela: venezuela,
    vietnam: vietnam,
    wallis_futuna: wallis_futuna,
    western_sahara: western_sahara,
    yemen: yemen,
    zambia: zambia,
    zimbabwe: zimbabwe
  };
  var full$1 =
  /*#__PURE__*/
  Object.freeze({
    __proto__: null,
    grinning: grinning,
    smiley: smiley,
    smile: smile$1,
    grin: grin,
    laughing: laughing,
    satisfied: satisfied,
    sweat_smile: sweat_smile,
    joy: joy,
    rofl: rofl,
    relaxed: relaxed,
    blush: blush,
    innocent: innocent,
    slightly_smiling_face: slightly_smiling_face,
    upside_down_face: upside_down_face,
    wink: wink,
    relieved: relieved,
    heart_eyes: heart_eyes,
    kissing_heart: kissing_heart,
    kissing: kissing,
    kissing_smiling_eyes: kissing_smiling_eyes,
    kissing_closed_eyes: kissing_closed_eyes,
    yum: yum,
    stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye,
    stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes,
    stuck_out_tongue: stuck_out_tongue,
    money_mouth_face: money_mouth_face,
    hugs: hugs,
    nerd_face: nerd_face,
    sunglasses: sunglasses,
    clown_face: clown_face,
    cowboy_hat_face: cowboy_hat_face,
    smirk: smirk,
    unamused: unamused,
    disappointed: disappointed,
    pensive: pensive,
    worried: worried,
    confused: confused,
    slightly_frowning_face: slightly_frowning_face,
    frowning_face: frowning_face,
    persevere: persevere,
    confounded: confounded,
    tired_face: tired_face,
    weary: weary,
    triumph: triumph,
    angry: angry,
    rage: rage,
    pout: pout,
    no_mouth: no_mouth,
    neutral_face: neutral_face,
    expressionless: expressionless,
    hushed: hushed,
    frowning: frowning,
    anguished: anguished,
    open_mouth: open_mouth,
    astonished: astonished,
    dizzy_face: dizzy_face,
    flushed: flushed,
    scream: scream,
    fearful: fearful,
    cold_sweat: cold_sweat,
    cry: cry,
    disappointed_relieved: disappointed_relieved,
    drooling_face: drooling_face,
    sob: sob,
    sweat: sweat,
    sleepy: sleepy,
    sleeping: sleeping,
    roll_eyes: roll_eyes,
    thinking: thinking,
    lying_face: lying_face,
    grimacing: grimacing,
    zipper_mouth_face: zipper_mouth_face,
    nauseated_face: nauseated_face,
    sneezing_face: sneezing_face,
    mask: mask,
    face_with_thermometer: face_with_thermometer,
    face_with_head_bandage: face_with_head_bandage,
    smiling_imp: smiling_imp,
    imp: imp,
    japanese_ogre: japanese_ogre,
    japanese_goblin: japanese_goblin,
    hankey: hankey,
    poop: poop,
    shit: shit,
    ghost: ghost,
    skull: skull,
    skull_and_crossbones: skull_and_crossbones,
    alien: alien,
    space_invader: space_invader,
    robot: robot,
    jack_o_lantern: jack_o_lantern,
    smiley_cat: smiley_cat,
    smile_cat: smile_cat,
    joy_cat: joy_cat,
    heart_eyes_cat: heart_eyes_cat,
    smirk_cat: smirk_cat,
    kissing_cat: kissing_cat,
    scream_cat: scream_cat,
    crying_cat_face: crying_cat_face,
    pouting_cat: pouting_cat,
    open_hands: open_hands,
    raised_hands: raised_hands,
    clap: clap,
    pray: pray,
    handshake: handshake,
    thumbsup: thumbsup,
    thumbsdown: thumbsdown,
    fist_oncoming: fist_oncoming,
    facepunch: facepunch,
    punch: punch,
    fist_raised: fist_raised,
    fist: fist,
    fist_left: fist_left,
    fist_right: fist_right,
    crossed_fingers: crossed_fingers,
    v: v,
    metal: metal,
    ok_hand: ok_hand,
    point_left: point_left,
    point_right: point_right,
    point_up_2: point_up_2,
    point_down: point_down,
    point_up: point_up,
    hand: hand,
    raised_hand: raised_hand,
    raised_back_of_hand: raised_back_of_hand,
    raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed,
    vulcan_salute: vulcan_salute,
    wave: wave,
    call_me_hand: call_me_hand,
    muscle: muscle,
    middle_finger: middle_finger,
    fu: fu,
    writing_hand: writing_hand,
    selfie: selfie,
    nail_care: nail_care,
    ring: ring$1,
    lipstick: lipstick,
    kiss: kiss,
    lips: lips,
    tongue: tongue,
    ear: ear,
    nose: nose,
    footprints: footprints,
    eye: eye,
    eyes: eyes,
    speaking_head: speaking_head,
    bust_in_silhouette: bust_in_silhouette,
    busts_in_silhouette: busts_in_silhouette,
    baby: baby,
    boy: boy,
    girl: girl,
    man: man,
    woman: woman,
    blonde_woman: blonde_woman,
    blonde_man: blonde_man,
    person_with_blond_hair: person_with_blond_hair,
    older_man: older_man,
    older_woman: older_woman,
    man_with_gua_pi_mao: man_with_gua_pi_mao,
    woman_with_turban: woman_with_turban,
    man_with_turban: man_with_turban,
    policewoman: policewoman,
    policeman: policeman,
    cop: cop,
    construction_worker_woman: construction_worker_woman,
    construction_worker_man: construction_worker_man,
    construction_worker: construction_worker,
    guardswoman: guardswoman,
    guardsman: guardsman,
    female_detective: female_detective,
    male_detective: male_detective,
    detective: detective,
    woman_health_worker: woman_health_worker,
    man_health_worker: man_health_worker,
    woman_farmer: woman_farmer,
    man_farmer: man_farmer,
    woman_cook: woman_cook,
    man_cook: man_cook,
    woman_student: woman_student,
    man_student: man_student,
    woman_singer: woman_singer,
    man_singer: man_singer,
    woman_teacher: woman_teacher,
    man_teacher: man_teacher,
    woman_factory_worker: woman_factory_worker,
    man_factory_worker: man_factory_worker,
    woman_technologist: woman_technologist,
    man_technologist: man_technologist,
    woman_office_worker: woman_office_worker,
    man_office_worker: man_office_worker,
    woman_mechanic: woman_mechanic,
    man_mechanic: man_mechanic,
    woman_scientist: woman_scientist,
    man_scientist: man_scientist,
    woman_artist: woman_artist,
    man_artist: man_artist,
    woman_firefighter: woman_firefighter,
    man_firefighter: man_firefighter,
    woman_pilot: woman_pilot,
    man_pilot: man_pilot,
    woman_astronaut: woman_astronaut,
    man_astronaut: man_astronaut,
    woman_judge: woman_judge,
    man_judge: man_judge,
    mrs_claus: mrs_claus,
    santa: santa,
    princess: princess,
    prince: prince,
    bride_with_veil: bride_with_veil,
    man_in_tuxedo: man_in_tuxedo,
    angel: angel,
    pregnant_woman: pregnant_woman,
    bowing_woman: bowing_woman,
    bowing_man: bowing_man,
    bow: bow,
    tipping_hand_woman: tipping_hand_woman,
    information_desk_person: information_desk_person,
    sassy_woman: sassy_woman,
    tipping_hand_man: tipping_hand_man,
    sassy_man: sassy_man,
    no_good_woman: no_good_woman,
    no_good: no_good,
    ng_woman: ng_woman,
    no_good_man: no_good_man,
    ng_man: ng_man,
    ok_woman: ok_woman,
    ok_man: ok_man,
    raising_hand_woman: raising_hand_woman,
    raising_hand: raising_hand,
    raising_hand_man: raising_hand_man,
    woman_facepalming: woman_facepalming,
    man_facepalming: man_facepalming,
    woman_shrugging: woman_shrugging,
    man_shrugging: man_shrugging,
    pouting_woman: pouting_woman,
    person_with_pouting_face: person_with_pouting_face,
    pouting_man: pouting_man,
    frowning_woman: frowning_woman,
    person_frowning: person_frowning,
    frowning_man: frowning_man,
    haircut_woman: haircut_woman,
    haircut: haircut,
    haircut_man: haircut_man,
    massage_woman: massage_woman,
    massage: massage,
    massage_man: massage_man,
    business_suit_levitating: business_suit_levitating,
    dancer: dancer,
    man_dancing: man_dancing,
    dancing_women: dancing_women,
    dancers: dancers,
    dancing_men: dancing_men,
    walking_woman: walking_woman,
    walking_man: walking_man,
    walking: walking,
    running_woman: running_woman,
    running_man: running_man,
    runner: runner,
    running: running,
    couple: couple,
    two_women_holding_hands: two_women_holding_hands,
    two_men_holding_hands: two_men_holding_hands,
    couple_with_heart_woman_man: couple_with_heart_woman_man,
    couple_with_heart: couple_with_heart,
    couple_with_heart_woman_woman: couple_with_heart_woman_woman,
    couple_with_heart_man_man: couple_with_heart_man_man,
    couplekiss_man_woman: couplekiss_man_woman,
    couplekiss_woman_woman: couplekiss_woman_woman,
    couplekiss_man_man: couplekiss_man_man,
    family_man_woman_boy: family_man_woman_boy,
    family: family,
    family_man_woman_girl: family_man_woman_girl,
    family_man_woman_girl_boy: family_man_woman_girl_boy,
    family_man_woman_boy_boy: family_man_woman_boy_boy,
    family_man_woman_girl_girl: family_man_woman_girl_girl,
    family_woman_woman_boy: family_woman_woman_boy,
    family_woman_woman_girl: family_woman_woman_girl,
    family_woman_woman_girl_boy: family_woman_woman_girl_boy,
    family_woman_woman_boy_boy: family_woman_woman_boy_boy,
    family_woman_woman_girl_girl: family_woman_woman_girl_girl,
    family_man_man_boy: family_man_man_boy,
    family_man_man_girl: family_man_man_girl,
    family_man_man_girl_boy: family_man_man_girl_boy,
    family_man_man_boy_boy: family_man_man_boy_boy,
    family_man_man_girl_girl: family_man_man_girl_girl,
    family_woman_boy: family_woman_boy,
    family_woman_girl: family_woman_girl,
    family_woman_girl_boy: family_woman_girl_boy,
    family_woman_boy_boy: family_woman_boy_boy,
    family_woman_girl_girl: family_woman_girl_girl,
    family_man_boy: family_man_boy,
    family_man_girl: family_man_girl,
    family_man_girl_boy: family_man_girl_boy,
    family_man_boy_boy: family_man_boy_boy,
    family_man_girl_girl: family_man_girl_girl,
    womans_clothes: womans_clothes,
    shirt: shirt,
    tshirt: tshirt,
    jeans: jeans,
    necktie: necktie,
    dress: dress,
    bikini: bikini,
    kimono: kimono,
    high_heel: high_heel,
    sandal: sandal,
    boot: boot,
    mans_shoe: mans_shoe,
    shoe: shoe,
    athletic_shoe: athletic_shoe,
    womans_hat: womans_hat,
    tophat: tophat,
    mortar_board: mortar_board,
    crown: crown,
    rescue_worker_helmet: rescue_worker_helmet,
    school_satchel: school_satchel,
    pouch: pouch,
    purse: purse,
    handbag: handbag,
    briefcase: briefcase,
    eyeglasses: eyeglasses,
    dark_sunglasses: dark_sunglasses,
    closed_umbrella: closed_umbrella,
    open_umbrella: open_umbrella,
    dog: dog,
    cat: cat,
    mouse: mouse,
    hamster: hamster,
    rabbit: rabbit,
    fox_face: fox_face,
    bear: bear,
    panda_face: panda_face,
    koala: koala,
    tiger: tiger,
    lion: lion,
    cow: cow,
    pig: pig,
    pig_nose: pig_nose,
    frog: frog,
    monkey_face: monkey_face,
    see_no_evil: see_no_evil,
    hear_no_evil: hear_no_evil,
    speak_no_evil: speak_no_evil,
    monkey: monkey,
    chicken: chicken,
    penguin: penguin,
    bird: bird,
    baby_chick: baby_chick,
    hatching_chick: hatching_chick,
    hatched_chick: hatched_chick,
    duck: duck,
    eagle: eagle,
    owl: owl,
    bat: bat,
    wolf: wolf,
    boar: boar,
    horse: horse,
    unicorn: unicorn,
    bee: bee,
    honeybee: honeybee,
    bug: bug,
    butterfly: butterfly,
    snail: snail,
    shell: shell,
    beetle: beetle,
    ant: ant,
    spider: spider,
    spider_web: spider_web,
    turtle: turtle,
    snake: snake,
    lizard: lizard,
    scorpion: scorpion,
    crab: crab,
    squid: squid,
    octopus: octopus,
    shrimp: shrimp,
    tropical_fish: tropical_fish,
    fish: fish,
    blowfish: blowfish,
    dolphin: dolphin,
    flipper: flipper,
    shark: shark,
    whale: whale,
    whale2: whale2,
    crocodile: crocodile,
    leopard: leopard,
    tiger2: tiger2,
    water_buffalo: water_buffalo,
    ox: ox,
    cow2: cow2,
    deer: deer,
    dromedary_camel: dromedary_camel,
    camel: camel,
    elephant: elephant,
    rhinoceros: rhinoceros,
    gorilla: gorilla,
    racehorse: racehorse,
    pig2: pig2,
    goat: goat,
    ram: ram,
    sheep: sheep,
    dog2: dog2,
    poodle: poodle,
    cat2: cat2,
    rooster: rooster,
    turkey: turkey,
    dove: dove,
    rabbit2: rabbit2,
    mouse2: mouse2,
    rat: rat,
    chipmunk: chipmunk,
    feet: feet,
    paw_prints: paw_prints,
    dragon: dragon,
    dragon_face: dragon_face,
    cactus: cactus,
    christmas_tree: christmas_tree,
    evergreen_tree: evergreen_tree,
    deciduous_tree: deciduous_tree,
    palm_tree: palm_tree,
    seedling: seedling,
    herb: herb,
    shamrock: shamrock,
    four_leaf_clover: four_leaf_clover,
    bamboo: bamboo,
    tanabata_tree: tanabata_tree,
    leaves: leaves,
    fallen_leaf: fallen_leaf,
    maple_leaf: maple_leaf,
    mushroom: mushroom,
    ear_of_rice: ear_of_rice,
    bouquet: bouquet,
    tulip: tulip,
    rose: rose,
    wilted_flower: wilted_flower,
    sunflower: sunflower,
    blossom: blossom,
    cherry_blossom: cherry_blossom,
    hibiscus: hibiscus,
    earth_americas: earth_americas,
    earth_africa: earth_africa,
    earth_asia: earth_asia,
    full_moon: full_moon,
    waning_gibbous_moon: waning_gibbous_moon,
    last_quarter_moon: last_quarter_moon,
    waning_crescent_moon: waning_crescent_moon,
    new_moon: new_moon,
    waxing_crescent_moon: waxing_crescent_moon,
    first_quarter_moon: first_quarter_moon,
    moon: moon,
    waxing_gibbous_moon: waxing_gibbous_moon,
    new_moon_with_face: new_moon_with_face,
    full_moon_with_face: full_moon_with_face,
    sun_with_face: sun_with_face,
    first_quarter_moon_with_face: first_quarter_moon_with_face,
    last_quarter_moon_with_face: last_quarter_moon_with_face,
    crescent_moon: crescent_moon,
    dizzy: dizzy,
    star: star$1,
    star2: star2,
    sparkles: sparkles,
    zap: zap,
    fire: fire,
    boom: boom,
    collision: collision,
    comet: comet,
    sunny: sunny,
    sun_behind_small_cloud: sun_behind_small_cloud,
    partly_sunny: partly_sunny,
    sun_behind_large_cloud: sun_behind_large_cloud,
    sun_behind_rain_cloud: sun_behind_rain_cloud,
    rainbow: rainbow,
    cloud: cloud,
    cloud_with_rain: cloud_with_rain,
    cloud_with_lightning_and_rain: cloud_with_lightning_and_rain,
    cloud_with_lightning: cloud_with_lightning,
    cloud_with_snow: cloud_with_snow,
    snowman_with_snow: snowman_with_snow,
    snowman: snowman,
    snowflake: snowflake,
    wind_face: wind_face,
    dash: dash$1,
    tornado: tornado,
    fog: fog,
    ocean: ocean,
    droplet: droplet,
    sweat_drops: sweat_drops,
    umbrella: umbrella,
    green_apple: green_apple,
    apple: apple,
    pear: pear,
    tangerine: tangerine,
    orange: orange,
    mandarin: mandarin,
    lemon: lemon,
    banana: banana,
    watermelon: watermelon,
    grapes: grapes,
    strawberry: strawberry,
    melon: melon,
    cherries: cherries,
    peach: peach,
    pineapple: pineapple,
    kiwi_fruit: kiwi_fruit,
    avocado: avocado,
    tomato: tomato,
    eggplant: eggplant,
    cucumber: cucumber,
    carrot: carrot,
    corn: corn,
    hot_pepper: hot_pepper,
    potato: potato,
    sweet_potato: sweet_potato,
    chestnut: chestnut,
    peanuts: peanuts,
    honey_pot: honey_pot,
    croissant: croissant,
    bread: bread,
    baguette_bread: baguette_bread,
    cheese: cheese,
    egg: egg,
    fried_egg: fried_egg,
    bacon: bacon,
    pancakes: pancakes,
    fried_shrimp: fried_shrimp,
    poultry_leg: poultry_leg,
    meat_on_bone: meat_on_bone,
    pizza: pizza,
    hotdog: hotdog,
    hamburger: hamburger,
    fries: fries,
    stuffed_flatbread: stuffed_flatbread,
    taco: taco,
    burrito: burrito,
    green_salad: green_salad,
    shallow_pan_of_food: shallow_pan_of_food,
    spaghetti: spaghetti,
    ramen: ramen,
    stew: stew,
    fish_cake: fish_cake,
    sushi: sushi,
    bento: bento,
    curry: curry,
    rice: rice,
    rice_ball: rice_ball,
    rice_cracker: rice_cracker,
    oden: oden,
    dango: dango,
    shaved_ice: shaved_ice,
    ice_cream: ice_cream,
    icecream: icecream,
    cake: cake,
    birthday: birthday,
    custard: custard,
    lollipop: lollipop,
    candy: candy,
    chocolate_bar: chocolate_bar,
    popcorn: popcorn,
    doughnut: doughnut,
    cookie: cookie,
    milk_glass: milk_glass,
    baby_bottle: baby_bottle,
    coffee: coffee,
    tea: tea,
    sake: sake,
    beer: beer,
    beers: beers,
    clinking_glasses: clinking_glasses,
    wine_glass: wine_glass,
    tumbler_glass: tumbler_glass,
    cocktail: cocktail,
    tropical_drink: tropical_drink,
    champagne: champagne,
    spoon: spoon,
    fork_and_knife: fork_and_knife,
    plate_with_cutlery: plate_with_cutlery,
    soccer: soccer,
    basketball: basketball,
    football: football,
    baseball: baseball,
    tennis: tennis,
    volleyball: volleyball,
    rugby_football: rugby_football,
    ping_pong: ping_pong,
    badminton: badminton,
    goal_net: goal_net,
    ice_hockey: ice_hockey,
    field_hockey: field_hockey,
    cricket: cricket,
    golf: golf,
    bow_and_arrow: bow_and_arrow,
    fishing_pole_and_fish: fishing_pole_and_fish,
    boxing_glove: boxing_glove,
    martial_arts_uniform: martial_arts_uniform,
    ice_skate: ice_skate,
    ski: ski,
    skier: skier,
    snowboarder: snowboarder,
    weight_lifting_woman: weight_lifting_woman,
    weight_lifting_man: weight_lifting_man,
    person_fencing: person_fencing,
    women_wrestling: women_wrestling,
    men_wrestling: men_wrestling,
    woman_cartwheeling: woman_cartwheeling,
    man_cartwheeling: man_cartwheeling,
    basketball_woman: basketball_woman,
    basketball_man: basketball_man,
    woman_playing_handball: woman_playing_handball,
    man_playing_handball: man_playing_handball,
    golfing_woman: golfing_woman,
    golfing_man: golfing_man,
    surfing_woman: surfing_woman,
    surfing_man: surfing_man,
    surfer: surfer,
    swimming_woman: swimming_woman,
    swimming_man: swimming_man,
    swimmer: swimmer,
    woman_playing_water_polo: woman_playing_water_polo,
    man_playing_water_polo: man_playing_water_polo,
    rowing_woman: rowing_woman,
    rowing_man: rowing_man,
    rowboat: rowboat,
    horse_racing: horse_racing,
    biking_woman: biking_woman,
    biking_man: biking_man,
    bicyclist: bicyclist,
    mountain_biking_woman: mountain_biking_woman,
    mountain_biking_man: mountain_biking_man,
    mountain_bicyclist: mountain_bicyclist,
    running_shirt_with_sash: running_shirt_with_sash,
    medal_sports: medal_sports,
    medal_military: medal_military,
    trophy: trophy,
    rosette: rosette,
    reminder_ribbon: reminder_ribbon,
    ticket: ticket,
    tickets: tickets,
    circus_tent: circus_tent,
    woman_juggling: woman_juggling,
    man_juggling: man_juggling,
    performing_arts: performing_arts,
    art: art,
    clapper: clapper,
    microphone: microphone,
    headphones: headphones,
    musical_score: musical_score,
    musical_keyboard: musical_keyboard,
    drum: drum,
    saxophone: saxophone,
    trumpet: trumpet,
    guitar: guitar,
    violin: violin,
    game_die: game_die,
    dart: dart,
    bowling: bowling,
    video_game: video_game,
    slot_machine: slot_machine,
    car: car,
    red_car: red_car,
    taxi: taxi,
    blue_car: blue_car,
    bus: bus,
    trolleybus: trolleybus,
    racing_car: racing_car,
    police_car: police_car,
    ambulance: ambulance,
    fire_engine: fire_engine,
    minibus: minibus,
    truck: truck,
    articulated_lorry: articulated_lorry,
    tractor: tractor,
    kick_scooter: kick_scooter,
    bike: bike,
    motor_scooter: motor_scooter,
    motorcycle: motorcycle,
    rotating_light: rotating_light,
    oncoming_police_car: oncoming_police_car,
    oncoming_bus: oncoming_bus,
    oncoming_automobile: oncoming_automobile,
    oncoming_taxi: oncoming_taxi,
    aerial_tramway: aerial_tramway,
    mountain_cableway: mountain_cableway,
    suspension_railway: suspension_railway,
    railway_car: railway_car,
    train: train,
    mountain_railway: mountain_railway,
    monorail: monorail,
    bullettrain_side: bullettrain_side,
    bullettrain_front: bullettrain_front,
    light_rail: light_rail,
    steam_locomotive: steam_locomotive,
    train2: train2,
    metro: metro,
    tram: tram,
    station: station,
    helicopter: helicopter,
    small_airplane: small_airplane,
    airplane: airplane,
    flight_departure: flight_departure,
    flight_arrival: flight_arrival,
    rocket: rocket,
    artificial_satellite: artificial_satellite,
    seat: seat,
    canoe: canoe,
    boat: boat,
    sailboat: sailboat,
    motor_boat: motor_boat,
    speedboat: speedboat,
    passenger_ship: passenger_ship,
    ferry: ferry,
    ship: ship,
    anchor: anchor,
    construction: construction,
    fuelpump: fuelpump,
    busstop: busstop,
    vertical_traffic_light: vertical_traffic_light,
    traffic_light: traffic_light,
    world_map: world_map,
    moyai: moyai,
    statue_of_liberty: statue_of_liberty,
    fountain: fountain,
    tokyo_tower: tokyo_tower,
    european_castle: european_castle,
    japanese_castle: japanese_castle,
    stadium: stadium,
    ferris_wheel: ferris_wheel,
    roller_coaster: roller_coaster,
    carousel_horse: carousel_horse,
    parasol_on_ground: parasol_on_ground,
    beach_umbrella: beach_umbrella,
    desert_island: desert_island,
    mountain: mountain,
    mountain_snow: mountain_snow,
    mount_fuji: mount_fuji,
    volcano: volcano,
    desert: desert,
    camping: camping,
    tent: tent,
    railway_track: railway_track,
    motorway: motorway,
    building_construction: building_construction,
    factory: factory,
    house: house,
    house_with_garden: house_with_garden,
    houses: houses,
    derelict_house: derelict_house,
    office: office,
    department_store: department_store,
    post_office: post_office,
    european_post_office: european_post_office,
    hospital: hospital,
    bank: bank,
    hotel: hotel,
    convenience_store: convenience_store,
    school: school,
    love_hotel: love_hotel,
    wedding: wedding,
    classical_building: classical_building,
    church: church,
    mosque: mosque,
    synagogue: synagogue,
    kaaba: kaaba,
    shinto_shrine: shinto_shrine,
    japan: japan,
    rice_scene: rice_scene,
    national_park: national_park,
    sunrise: sunrise,
    sunrise_over_mountains: sunrise_over_mountains,
    stars: stars,
    sparkler: sparkler,
    fireworks: fireworks,
    city_sunrise: city_sunrise,
    city_sunset: city_sunset,
    cityscape: cityscape,
    night_with_stars: night_with_stars,
    milky_way: milky_way,
    bridge_at_night: bridge_at_night,
    foggy: foggy,
    watch: watch,
    iphone: iphone,
    calling: calling,
    computer: computer,
    keyboard: keyboard,
    desktop_computer: desktop_computer,
    printer: printer,
    computer_mouse: computer_mouse,
    trackball: trackball,
    joystick: joystick,
    clamp: clamp,
    minidisc: minidisc,
    floppy_disk: floppy_disk,
    cd: cd,
    dvd: dvd,
    vhs: vhs,
    camera: camera,
    camera_flash: camera_flash,
    video_camera: video_camera,
    movie_camera: movie_camera,
    film_projector: film_projector,
    film_strip: film_strip,
    telephone_receiver: telephone_receiver,
    phone: phone$1,
    telephone: telephone,
    pager: pager,
    fax: fax,
    tv: tv,
    radio: radio,
    studio_microphone: studio_microphone,
    level_slider: level_slider,
    control_knobs: control_knobs,
    stopwatch: stopwatch,
    timer_clock: timer_clock,
    alarm_clock: alarm_clock,
    mantelpiece_clock: mantelpiece_clock,
    hourglass: hourglass,
    hourglass_flowing_sand: hourglass_flowing_sand,
    satellite: satellite,
    battery: battery,
    electric_plug: electric_plug,
    bulb: bulb,
    flashlight: flashlight,
    candle: candle,
    wastebasket: wastebasket,
    oil_drum: oil_drum,
    money_with_wings: money_with_wings,
    dollar: dollar$1,
    yen: yen$1,
    euro: euro$1,
    pound: pound$1,
    moneybag: moneybag,
    credit_card: credit_card,
    gem: gem,
    balance_scale: balance_scale,
    wrench: wrench,
    hammer: hammer,
    hammer_and_pick: hammer_and_pick,
    hammer_and_wrench: hammer_and_wrench,
    pick: pick,
    nut_and_bolt: nut_and_bolt,
    gear: gear,
    chains: chains,
    gun: gun,
    bomb: bomb,
    hocho: hocho,
    knife: knife,
    dagger: dagger$1,
    crossed_swords: crossed_swords,
    shield: shield,
    smoking: smoking,
    coffin: coffin,
    funeral_urn: funeral_urn,
    amphora: amphora,
    crystal_ball: crystal_ball,
    prayer_beads: prayer_beads,
    barber: barber,
    alembic: alembic,
    telescope: telescope,
    microscope: microscope,
    hole: hole,
    pill: pill,
    syringe: syringe,
    thermometer: thermometer,
    toilet: toilet,
    potable_water: potable_water,
    shower: shower,
    bathtub: bathtub,
    bath: bath,
    bellhop_bell: bellhop_bell,
    key: key,
    old_key: old_key,
    door: door,
    couch_and_lamp: couch_and_lamp,
    bed: bed,
    sleeping_bed: sleeping_bed,
    framed_picture: framed_picture,
    shopping: shopping,
    shopping_cart: shopping_cart,
    gift: gift,
    balloon: balloon,
    flags: flags,
    ribbon: ribbon,
    confetti_ball: confetti_ball,
    tada: tada,
    dolls: dolls,
    izakaya_lantern: izakaya_lantern,
    lantern: lantern,
    wind_chime: wind_chime,
    email: email,
    envelope: envelope,
    envelope_with_arrow: envelope_with_arrow,
    incoming_envelope: incoming_envelope,
    love_letter: love_letter,
    inbox_tray: inbox_tray,
    outbox_tray: outbox_tray,
    label: label,
    mailbox_closed: mailbox_closed,
    mailbox: mailbox,
    mailbox_with_mail: mailbox_with_mail,
    mailbox_with_no_mail: mailbox_with_no_mail,
    postbox: postbox,
    postal_horn: postal_horn,
    scroll: scroll,
    page_with_curl: page_with_curl,
    page_facing_up: page_facing_up,
    bookmark_tabs: bookmark_tabs,
    bar_chart: bar_chart,
    chart_with_upwards_trend: chart_with_upwards_trend,
    chart_with_downwards_trend: chart_with_downwards_trend,
    spiral_notepad: spiral_notepad,
    spiral_calendar: spiral_calendar,
    calendar: calendar,
    date: date,
    card_index: card_index,
    card_file_box: card_file_box,
    ballot_box: ballot_box,
    file_cabinet: file_cabinet,
    clipboard: clipboard,
    file_folder: file_folder,
    open_file_folder: open_file_folder,
    card_index_dividers: card_index_dividers,
    newspaper_roll: newspaper_roll,
    newspaper: newspaper,
    notebook: notebook,
    notebook_with_decorative_cover: notebook_with_decorative_cover,
    ledger: ledger,
    closed_book: closed_book,
    green_book: green_book,
    blue_book: blue_book,
    orange_book: orange_book,
    books: books,
    book: book,
    open_book: open_book,
    bookmark: bookmark,
    link: link$1,
    paperclip: paperclip,
    paperclips: paperclips,
    triangular_ruler: triangular_ruler,
    straight_ruler: straight_ruler,
    pushpin: pushpin,
    round_pushpin: round_pushpin,
    scissors: scissors,
    pen: pen,
    fountain_pen: fountain_pen,
    black_nib: black_nib,
    paintbrush: paintbrush,
    crayon: crayon,
    memo: memo,
    pencil: pencil,
    pencil2: pencil2,
    mag: mag,
    mag_right: mag_right,
    lock_with_ink_pen: lock_with_ink_pen,
    closed_lock_with_key: closed_lock_with_key,
    lock: lock,
    unlock: unlock,
    heart: heart,
    yellow_heart: yellow_heart,
    green_heart: green_heart,
    blue_heart: blue_heart,
    purple_heart: purple_heart,
    black_heart: black_heart,
    broken_heart: broken_heart,
    heavy_heart_exclamation: heavy_heart_exclamation,
    two_hearts: two_hearts,
    revolving_hearts: revolving_hearts,
    heartbeat: heartbeat,
    heartpulse: heartpulse,
    sparkling_heart: sparkling_heart,
    cupid: cupid,
    gift_heart: gift_heart,
    heart_decoration: heart_decoration,
    peace_symbol: peace_symbol,
    latin_cross: latin_cross,
    star_and_crescent: star_and_crescent,
    om: om,
    wheel_of_dharma: wheel_of_dharma,
    star_of_david: star_of_david,
    six_pointed_star: six_pointed_star,
    menorah: menorah,
    yin_yang: yin_yang,
    orthodox_cross: orthodox_cross,
    place_of_worship: place_of_worship,
    ophiuchus: ophiuchus,
    aries: aries,
    taurus: taurus,
    gemini: gemini,
    cancer: cancer,
    leo: leo,
    virgo: virgo,
    libra: libra,
    scorpius: scorpius,
    sagittarius: sagittarius,
    capricorn: capricorn,
    aquarius: aquarius,
    pisces: pisces,
    id: id,
    atom_symbol: atom_symbol,
    accept: accept,
    radioactive: radioactive,
    biohazard: biohazard,
    mobile_phone_off: mobile_phone_off,
    vibration_mode: vibration_mode,
    eight_pointed_black_star: eight_pointed_black_star,
    vs: vs,
    white_flower: white_flower,
    ideograph_advantage: ideograph_advantage,
    secret: secret,
    congratulations: congratulations,
    u6e80: u6e80,
    a: a,
    b: b,
    ab: ab,
    cl: cl,
    o2: o2,
    sos: sos,
    x: x,
    o: o,
    stop_sign: stop_sign,
    no_entry: no_entry,
    name_badge: name_badge,
    no_entry_sign: no_entry_sign,
    anger: anger,
    hotsprings: hotsprings,
    no_pedestrians: no_pedestrians,
    do_not_litter: do_not_litter,
    no_bicycles: no_bicycles,
    underage: underage,
    no_mobile_phones: no_mobile_phones,
    no_smoking: no_smoking,
    exclamation: exclamation,
    heavy_exclamation_mark: heavy_exclamation_mark,
    grey_exclamation: grey_exclamation,
    question: question,
    grey_question: grey_question,
    bangbang: bangbang,
    interrobang: interrobang,
    low_brightness: low_brightness,
    high_brightness: high_brightness,
    part_alternation_mark: part_alternation_mark,
    warning: warning,
    children_crossing: children_crossing,
    trident: trident,
    fleur_de_lis: fleur_de_lis,
    beginner: beginner,
    recycle: recycle,
    white_check_mark: white_check_mark,
    chart: chart,
    sparkle: sparkle,
    eight_spoked_asterisk: eight_spoked_asterisk,
    negative_squared_cross_mark: negative_squared_cross_mark,
    globe_with_meridians: globe_with_meridians,
    diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside,
    m: m,
    cyclone: cyclone,
    zzz: zzz,
    atm: atm,
    wc: wc,
    wheelchair: wheelchair,
    parking: parking,
    sa: sa,
    passport_control: passport_control,
    customs: customs,
    baggage_claim: baggage_claim,
    left_luggage: left_luggage,
    mens: mens,
    womens: womens,
    baby_symbol: baby_symbol,
    restroom: restroom,
    put_litter_in_its_place: put_litter_in_its_place,
    cinema: cinema,
    signal_strength: signal_strength,
    koko: koko,
    symbols: symbols,
    information_source: information_source,
    abc: abc,
    abcd: abcd,
    capital_abcd: capital_abcd,
    ng: ng,
    ok: ok,
    up: up,
    cool: cool,
    free: free,
    zero: zero$1,
    one: one,
    two: two,
    three: three,
    four: four,
    five: five,
    six: six,
    seven: seven,
    eight: eight,
    nine: nine,
    keycap_ten: keycap_ten,
    hash: hash,
    asterisk: asterisk,
    arrow_forward: arrow_forward,
    pause_button: pause_button,
    play_or_pause_button: play_or_pause_button,
    stop_button: stop_button,
    record_button: record_button,
    next_track_button: next_track_button,
    previous_track_button: previous_track_button,
    fast_forward: fast_forward,
    rewind: rewind,
    arrow_double_up: arrow_double_up,
    arrow_double_down: arrow_double_down,
    arrow_backward: arrow_backward,
    arrow_up_small: arrow_up_small,
    arrow_down_small: arrow_down_small,
    arrow_right: arrow_right,
    arrow_left: arrow_left,
    arrow_up: arrow_up,
    arrow_down: arrow_down,
    arrow_upper_right: arrow_upper_right,
    arrow_lower_right: arrow_lower_right,
    arrow_lower_left: arrow_lower_left,
    arrow_upper_left: arrow_upper_left,
    arrow_up_down: arrow_up_down,
    left_right_arrow: left_right_arrow,
    arrow_right_hook: arrow_right_hook,
    leftwards_arrow_with_hook: leftwards_arrow_with_hook,
    arrow_heading_up: arrow_heading_up,
    arrow_heading_down: arrow_heading_down,
    twisted_rightwards_arrows: twisted_rightwards_arrows,
    repeat: repeat,
    repeat_one: repeat_one,
    arrows_counterclockwise: arrows_counterclockwise,
    arrows_clockwise: arrows_clockwise,
    musical_note: musical_note,
    notes: notes,
    heavy_plus_sign: heavy_plus_sign,
    heavy_minus_sign: heavy_minus_sign,
    heavy_division_sign: heavy_division_sign,
    heavy_multiplication_x: heavy_multiplication_x,
    heavy_dollar_sign: heavy_dollar_sign,
    currency_exchange: currency_exchange,
    tm: tm,
    copyright: copyright,
    registered: registered,
    wavy_dash: wavy_dash,
    curly_loop: curly_loop,
    loop: loop,
    end: end,
    back: back,
    on: on,
    top: top$1,
    soon: soon,
    heavy_check_mark: heavy_check_mark,
    ballot_box_with_check: ballot_box_with_check,
    radio_button: radio_button,
    white_circle: white_circle,
    black_circle: black_circle,
    red_circle: red_circle,
    large_blue_circle: large_blue_circle,
    small_red_triangle: small_red_triangle,
    small_red_triangle_down: small_red_triangle_down,
    small_orange_diamond: small_orange_diamond,
    small_blue_diamond: small_blue_diamond,
    large_orange_diamond: large_orange_diamond,
    large_blue_diamond: large_blue_diamond,
    white_square_button: white_square_button,
    black_square_button: black_square_button,
    black_small_square: black_small_square,
    white_small_square: white_small_square,
    black_medium_small_square: black_medium_small_square,
    white_medium_small_square: white_medium_small_square,
    black_medium_square: black_medium_square,
    white_medium_square: white_medium_square,
    black_large_square: black_large_square,
    white_large_square: white_large_square,
    speaker: speaker,
    mute: mute,
    sound: sound,
    loud_sound: loud_sound,
    bell: bell,
    no_bell: no_bell,
    mega: mega,
    loudspeaker: loudspeaker,
    eye_speech_bubble: eye_speech_bubble,
    speech_balloon: speech_balloon,
    thought_balloon: thought_balloon,
    right_anger_bubble: right_anger_bubble,
    spades: spades$1,
    clubs: clubs$1,
    hearts: hearts$1,
    diamonds: diamonds,
    black_joker: black_joker,
    flower_playing_cards: flower_playing_cards,
    mahjong: mahjong,
    clock1: clock1,
    clock2: clock2,
    clock3: clock3,
    clock4: clock4,
    clock5: clock5,
    clock6: clock6,
    clock7: clock7,
    clock8: clock8,
    clock9: clock9,
    clock10: clock10,
    clock11: clock11,
    clock12: clock12,
    clock130: clock130,
    clock230: clock230,
    clock330: clock330,
    clock430: clock430,
    clock530: clock530,
    clock630: clock630,
    clock730: clock730,
    clock830: clock830,
    clock930: clock930,
    clock1030: clock1030,
    clock1130: clock1130,
    clock1230: clock1230,
    white_flag: white_flag,
    black_flag: black_flag,
    checkered_flag: checkered_flag,
    triangular_flag_on_post: triangular_flag_on_post,
    rainbow_flag: rainbow_flag,
    afghanistan: afghanistan,
    aland_islands: aland_islands,
    albania: albania,
    algeria: algeria,
    american_samoa: american_samoa,
    andorra: andorra,
    angola: angola,
    anguilla: anguilla,
    antarctica: antarctica,
    antigua_barbuda: antigua_barbuda,
    argentina: argentina,
    armenia: armenia,
    aruba: aruba,
    australia: australia,
    austria: austria,
    azerbaijan: azerbaijan,
    bahamas: bahamas,
    bahrain: bahrain,
    bangladesh: bangladesh,
    barbados: barbados,
    belarus: belarus,
    belgium: belgium,
    belize: belize,
    benin: benin,
    bermuda: bermuda,
    bhutan: bhutan,
    bolivia: bolivia,
    caribbean_netherlands: caribbean_netherlands,
    bosnia_herzegovina: bosnia_herzegovina,
    botswana: botswana,
    brazil: brazil,
    british_indian_ocean_territory: british_indian_ocean_territory,
    british_virgin_islands: british_virgin_islands,
    brunei: brunei,
    bulgaria: bulgaria,
    burkina_faso: burkina_faso,
    burundi: burundi,
    cape_verde: cape_verde,
    cambodia: cambodia,
    cameroon: cameroon,
    canada: canada,
    canary_islands: canary_islands,
    cayman_islands: cayman_islands,
    central_african_republic: central_african_republic,
    chad: chad,
    chile: chile,
    cn: cn,
    christmas_island: christmas_island,
    cocos_islands: cocos_islands,
    colombia: colombia,
    comoros: comoros,
    congo_brazzaville: congo_brazzaville,
    congo_kinshasa: congo_kinshasa,
    cook_islands: cook_islands,
    costa_rica: costa_rica,
    cote_divoire: cote_divoire,
    croatia: croatia,
    cuba: cuba,
    curacao: curacao,
    cyprus: cyprus,
    czech_republic: czech_republic,
    denmark: denmark,
    djibouti: djibouti,
    dominica: dominica,
    dominican_republic: dominican_republic,
    ecuador: ecuador,
    egypt: egypt,
    el_salvador: el_salvador,
    equatorial_guinea: equatorial_guinea,
    eritrea: eritrea,
    estonia: estonia,
    ethiopia: ethiopia,
    eu: eu,
    european_union: european_union,
    falkland_islands: falkland_islands,
    faroe_islands: faroe_islands,
    fiji: fiji,
    finland: finland,
    fr: fr,
    french_guiana: french_guiana,
    french_polynesia: french_polynesia,
    french_southern_territories: french_southern_territories,
    gabon: gabon,
    gambia: gambia,
    georgia: georgia,
    de: de,
    ghana: ghana,
    gibraltar: gibraltar,
    greece: greece,
    greenland: greenland,
    grenada: grenada,
    guadeloupe: guadeloupe,
    guam: guam,
    guatemala: guatemala,
    guernsey: guernsey,
    guinea: guinea,
    guinea_bissau: guinea_bissau,
    guyana: guyana,
    haiti: haiti,
    honduras: honduras,
    hong_kong: hong_kong,
    hungary: hungary,
    iceland: iceland,
    india: india,
    indonesia: indonesia,
    iran: iran,
    iraq: iraq,
    ireland: ireland,
    isle_of_man: isle_of_man,
    israel: israel,
    it: it$1,
    jamaica: jamaica,
    jp: jp,
    crossed_flags: crossed_flags,
    jersey: jersey,
    jordan: jordan,
    kazakhstan: kazakhstan,
    kenya: kenya,
    kiribati: kiribati,
    kosovo: kosovo,
    kuwait: kuwait,
    kyrgyzstan: kyrgyzstan,
    laos: laos,
    latvia: latvia,
    lebanon: lebanon,
    lesotho: lesotho,
    liberia: liberia,
    libya: libya,
    liechtenstein: liechtenstein,
    lithuania: lithuania,
    luxembourg: luxembourg,
    macau: macau,
    macedonia: macedonia,
    madagascar: madagascar,
    malawi: malawi,
    malaysia: malaysia,
    maldives: maldives,
    mali: mali,
    malta: malta,
    marshall_islands: marshall_islands,
    martinique: martinique,
    mauritania: mauritania,
    mauritius: mauritius,
    mayotte: mayotte,
    mexico: mexico,
    micronesia: micronesia,
    moldova: moldova,
    monaco: monaco,
    mongolia: mongolia,
    montenegro: montenegro,
    montserrat: montserrat,
    morocco: morocco,
    mozambique: mozambique,
    myanmar: myanmar,
    namibia: namibia,
    nauru: nauru,
    nepal: nepal,
    netherlands: netherlands,
    new_caledonia: new_caledonia,
    new_zealand: new_zealand,
    nicaragua: nicaragua,
    niger: niger,
    nigeria: nigeria,
    niue: niue,
    norfolk_island: norfolk_island,
    northern_mariana_islands: northern_mariana_islands,
    north_korea: north_korea,
    norway: norway,
    oman: oman,
    pakistan: pakistan,
    palau: palau,
    palestinian_territories: palestinian_territories,
    panama: panama,
    papua_new_guinea: papua_new_guinea,
    paraguay: paraguay,
    peru: peru,
    philippines: philippines,
    pitcairn_islands: pitcairn_islands,
    poland: poland,
    portugal: portugal,
    puerto_rico: puerto_rico,
    qatar: qatar,
    reunion: reunion,
    romania: romania,
    ru: ru,
    rwanda: rwanda,
    st_barthelemy: st_barthelemy,
    st_helena: st_helena,
    st_kitts_nevis: st_kitts_nevis,
    st_lucia: st_lucia,
    st_pierre_miquelon: st_pierre_miquelon,
    st_vincent_grenadines: st_vincent_grenadines,
    samoa: samoa,
    san_marino: san_marino,
    sao_tome_principe: sao_tome_principe,
    saudi_arabia: saudi_arabia,
    senegal: senegal,
    serbia: serbia,
    seychelles: seychelles,
    sierra_leone: sierra_leone,
    singapore: singapore,
    sint_maarten: sint_maarten,
    slovakia: slovakia,
    slovenia: slovenia,
    solomon_islands: solomon_islands,
    somalia: somalia,
    south_africa: south_africa,
    south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands,
    kr: kr,
    south_sudan: south_sudan,
    es: es,
    sri_lanka: sri_lanka,
    sudan: sudan,
    suriname: suriname,
    swaziland: swaziland,
    sweden: sweden,
    switzerland: switzerland,
    syria: syria,
    taiwan: taiwan,
    tajikistan: tajikistan,
    tanzania: tanzania,
    thailand: thailand,
    timor_leste: timor_leste,
    togo: togo,
    tokelau: tokelau,
    tonga: tonga,
    trinidad_tobago: trinidad_tobago,
    tunisia: tunisia,
    tr: tr,
    turkmenistan: turkmenistan,
    turks_caicos_islands: turks_caicos_islands,
    tuvalu: tuvalu,
    uganda: uganda,
    ukraine: ukraine,
    united_arab_emirates: united_arab_emirates,
    gb: gb,
    uk: uk,
    us: us,
    us_virgin_islands: us_virgin_islands,
    uruguay: uruguay,
    uzbekistan: uzbekistan,
    vanuatu: vanuatu,
    vatican_city: vatican_city,
    venezuela: venezuela,
    vietnam: vietnam,
    wallis_futuna: wallis_futuna,
    western_sahara: western_sahara,
    yemen: yemen,
    zambia: zambia,
    zimbabwe: zimbabwe,
    'default': full
  }); // Emoticons -> Emoji mapping.

  var shortcuts = {
    angry: ['>:(', '>:-('],
    blush: [':")', ':-")'],
    broken_heart: ['</3', '<\\3'],
    // :\ and :-\ not used because of conflict with markdown escaping
    confused: [':/', ':-/'],
    // twemoji shows question
    cry: [":'(", ":'-(", ':,(', ':,-('],
    frowning: [':(', ':-('],
    heart: ['<3'],
    imp: [']:(', ']:-('],
    innocent: ['o:)', 'O:)', 'o:-)', 'O:-)', '0:)', '0:-)'],
    joy: [":')", ":'-)", ':,)', ':,-)', ":'D", ":'-D", ':,D', ':,-D'],
    kissing: [':*', ':-*'],
    laughing: ['x-)', 'X-)'],
    neutral_face: [':|', ':-|'],
    open_mouth: [':o', ':-o', ':O', ':-O'],
    rage: [':@', ':-@'],
    smile: [':D', ':-D'],
    smiley: [':)', ':-)'],
    smiling_imp: [']:)', ']:-)'],
    sob: [":,'(", ":,'-(", ';(', ';-('],
    stuck_out_tongue: [':P', ':-P'],
    sunglasses: ['8-)', 'B-)'],
    sweat: [',:(', ',:-('],
    sweat_smile: [',:)', ',:-)'],
    unamused: [':s', ':-S', ':z', ':-Z', ':$', ':-$'],
    wink: [';)', ';-)']
  };

  var render = function emoji_html(tokens, idx
  /*, options, env */
  ) {
    return tokens[idx].content;
  }; // Emojies & shortcuts replacement logic.


  var replace = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {
    var arrayReplaceAt = md.utils.arrayReplaceAt,
        ucm = md.utils.lib.ucmicro,
        ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join('|'));

    function splitTextToken(text, level, Token) {
      var token,
          last_pos = 0,
          nodes = [];
      text.replace(replaceRE, function (match, offset, src) {
        var emoji_name; // Validate emoji name

        if (shortcuts.hasOwnProperty(match)) {
          // replace shortcut with full name
          emoji_name = shortcuts[match]; // Don't allow letters before any shortcut (as in no ":/" in http://)

          if (offset > 0 && !ZPCc.test(src[offset - 1])) {
            return;
          } // Don't allow letters after any shortcut


          if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {
            return;
          }
        } else {
          emoji_name = match.slice(1, -1);
        } // Add new tokens to pending list


        if (offset > last_pos) {
          token = new Token('text', '', 0);
          token.content = text.slice(last_pos, offset);
          nodes.push(token);
        }

        token = new Token('emoji', '', 0);
        token.markup = emoji_name;
        token.content = emojies[emoji_name];
        nodes.push(token);
        last_pos = offset + match.length;
      });

      if (last_pos < text.length) {
        token = new Token('text', '', 0);
        token.content = text.slice(last_pos);
        nodes.push(token);
      }

      return nodes;
    }

    return function emoji_replace(state) {
      var i,
          j,
          l,
          tokens,
          token,
          blockTokens = state.tokens,
          autolinkLevel = 0;

      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== 'inline') {
          continue;
        }

        tokens = blockTokens[j].children; // We scan from the end, to keep position when new tags added.
        // Use reversed logic in links start/end match

        for (i = tokens.length - 1; i >= 0; i--) {
          token = tokens[i];

          if (token.type === 'link_open' || token.type === 'link_close') {
            if (token.info === 'auto') {
              autolinkLevel -= token.nesting;
            }
          }

          if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {
            // replace current node
            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, splitTextToken(token.content, token.level, state.Token));
          }
        }
      }
    };
  }; // Convert input options to more useable format


  function quoteRE(str) {
    return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
  }

  var normalize_opts = function normalize_opts(options) {
    var emojies = options.defs,
        shortcuts; // Filter emojies by whitelist, if needed

    if (options.enabled.length) {
      emojies = Object.keys(emojies).reduce(function (acc, key) {
        if (options.enabled.indexOf(key) >= 0) {
          acc[key] = emojies[key];
        }

        return acc;
      }, {});
    } // Flatten shortcuts to simple object: { alias: emoji_name }


    shortcuts = Object.keys(options.shortcuts).reduce(function (acc, key) {
      // Skip aliases for filtered emojies, to reduce regexp
      if (!emojies[key]) {
        return acc;
      }

      if (Array.isArray(options.shortcuts[key])) {
        options.shortcuts[key].forEach(function (alias) {
          acc[alias] = key;
        });
        return acc;
      }

      acc[options.shortcuts[key]] = key;
      return acc;
    }, {}); // Compile regexp

    var names = Object.keys(emojies).map(function (name) {
      return ':' + name + ':';
    }).concat(Object.keys(shortcuts)).sort().reverse().map(function (name) {
      return quoteRE(name);
    }).join('|');
    var scanRE = RegExp(names);
    var replaceRE = RegExp(names, 'g');
    return {
      defs: emojies,
      shortcuts: shortcuts,
      scanRE: scanRE,
      replaceRE: replaceRE
    };
  };

  var emojies_defs = getCjsExportFromNamespace(full$1);

  var markdownItEmoji = function emoji_plugin(md, options) {
    var defaults = {
      defs: emojies_defs,
      shortcuts: shortcuts,
      enabled: []
    };
    var opts = normalize_opts(md.utils.assign({}, defaults, options || {}));
    md.renderer.rules.emoji = render;
    md.core.ruler.push('emoji', replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));
  }; //


  var md = new markdownIt();
  md.use(markdownItEmoji);
  var script = {
    props: {
      input: String
    },
    computed: {
      compiledMarkdown: function compiledMarkdown() {
        return md.render(this.input);
      }
    }
  };

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "";
  styleInject(css_248z);

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    const options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    let hook;

    if (moduleIdentifier) {
      // server build
      hook = function (context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function (context) {
        style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        const originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        const existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }
  /* script */


  var __vue_script__ = script;
  /* template */

  var __vue_render__ = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      domProps: {
        "innerHTML": _vm._s(_vm.compiledMarkdown)
      }
    });
  };

  var __vue_staticRenderFns__ = [];
  /* style */

  var __vue_inject_styles__ = undefined;
  /* scoped */

  var __vue_scope_id__ = undefined;
  /* module identifier */

  var __vue_module_identifier__ = undefined;
  /* functional template */

  var __vue_is_functional_template__ = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__ = normalizeComponent({
    render: __vue_render__,
    staticRenderFns: __vue_staticRenderFns__
  }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);
  /**!
   * Sortable 1.10.2
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */


  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var version = "1.10.2";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !!
      /*@__PURE__*/
      navigator.userAgent.match(pattern);
    }
  }

  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };

  function on$1(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));

    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }

    return false;
  }

  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }

  function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }

        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }

    return null;
  }

  var R_SPACE = /\s+/g;

  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function matrix(el, selfOnly) {
    var appliedTransforms = '';

    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');

        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */

      } while (!selfOnly && (el = el.parentNode));
    }

    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }

  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;

    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */


  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;

    if (el !== window && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }

    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */

        } while (container = container.parentNode);
      }
    }

    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d;

      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }

    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */


  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
        elSideVal = getRect(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
          visible = void 0;

      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }

      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }

    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */


  function getChild(el, childNum, options) {
    var currentChild = 0,
        i = 0,
        children = el.children;

    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }

        currentChild++;
      }

      i++;
    }

    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */


  function lastChild(el, selector) {
    var last = el.lastElementChild;

    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }

    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */


    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }

    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */


  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
        offsetTop = 0,
        winScroller = getWindowScrollingElement();

    if (el) {
      do {
        var elMatrix = matrix(el),
            scaleX = elMatrix.a,
            scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }

    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */


  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }

    return -1;
  }

  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;

    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);

        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */

    } while (elem = elem.parentNode);

    return getWindowScrollingElement();
  }

  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }

  var _throttleTimeout;

  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
            _this = this;

        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }

  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }

  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }

  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;

    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
        animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });

          var fromRect = _objectSpread({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);

            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }

          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;

        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }

        var animating = false,
            animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
              target = state.target,
              fromRect = target.fromRect,
              toRect = getRect(target),
              prevFromRect = target.prevFromRect,
              prevToRect = target.prevToRect,
              animatingRect = state.rect,
              targetMatrix = matrix(target, true);

          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }

          target.toRect = toRect;

          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate


          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;

            if (!time) {
              time = _this.options.animation;
            }

            _this.animate(target, animatingRect, toRect, time);
          }

          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);

        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }

        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
              scaleX = elMatrix && elMatrix.a,
              scaleY = elMatrix && elMatrix.d,
              translateX = (currentRect.left - toRect.left) / (scaleX || 1),
              translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }

  function repaint(target) {
    return target.offsetWidth;
  }

  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }

      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;

      this.eventCanceled = false;

      evt.cancel = function () {
        _this.eventCanceled = true;
      };

      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined


        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });

      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);

        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;

        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
        rootEl = _ref.rootEl,
        name = _ref.name,
        targetEl = _ref.targetEl,
        cloneEl = _ref.cloneEl,
        toEl = _ref.toEl,
        fromEl = _ref.fromEl,
        oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        oldDraggableIndex = _ref.oldDraggableIndex,
        newDraggableIndex = _ref.newDraggableIndex,
        originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

    var allEventProperties = _objectSpread({}, extraEventProperties, PluginManager.getEventProperties(name, sortable));

    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }

    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        originalEvent = _ref.evt,
        data = _objectWithoutProperties(_ref, ["evt"]);

    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };

  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }

  var dragEl,
      parentEl,
      ghostEl,
      rootEl,
      nextEl,
      lastDownEl,
      cloneEl,
      cloneHidden,
      oldIndex,
      newIndex,
      oldDraggableIndex,
      newDraggableIndex,
      activeGroup,
      putSortable,
      awaitingDragStarted = false,
      ignoreNextClick = false,
      sortables = [],
      tapEvt,
      touchEvt,
      lastDx,
      lastDy,
      tapDistanceLeft,
      tapDistanceTop,
      moved,
      lastTarget,
      lastDirection,
      pastFirstInvertThresh = false,
      isCircumstantialInvert = false,
      targetMoveDistance,
      // For positioning ghost absolutely
  ghostRelativeParent,
      ghostRelativeParentInitialScroll = [],
      // (left, top)
  _silent = false,
      savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
      PositionGhostAbsolutely = IOS,
      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
      // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
      supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }

    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }

    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },

  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      if (lastChild(sortable)) return;
      var rect = getRect(sortable),
          threshold = sortable[expando].options.emptyInsertThreshold,
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (threshold && insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
      _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
      _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


  if (documentExists) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }

  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;

      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

      if (nearest) {
        // Create imitation event
        var event = {};

        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }

        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;

        nearest[expando]._onDragOver(event);
      }
    }
  };

  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }

    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable;

    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events


    if (options.supportPointer) {
      on$1(el, 'pointerdown', this._onTapStart);
    } else {
      on$1(el, 'mousedown', this._onTapStart);
      on$1(el, 'touchstart', this._onTapStart);
    }

    if (this.nativeDraggable) {
      on$1(el, 'dragover', this);
      on$1(el, 'dragenter', this);
    }

    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;

      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
          filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });

            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove


          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item


          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on$1(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on$1(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on$1(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on$1(ownerDocument, 'mouseup', _this._onDrop);
        on$1(ownerDocument, 'touchend', _this._onDrop);
        on$1(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag


          on$1(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on$1(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on$1(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on$1(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on$1(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on$1(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
    /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;

      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on$1(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on$1(document, 'touchmove', this._onTouchMove);
        } else {
          on$1(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on$1(dragEl, 'dragend', this);
        on$1(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });

        if (this.nativeDraggable) {
          on$1(document, 'dragover', _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            ghostMatrix = ghostEl && matrix(ghostEl, true),
            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }

          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
            rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
            options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    fallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent('setupClone', this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        this._hideClone();

        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround


      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on$1(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on$1(document, 'selectstart', _this);
      moved = true;

      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target = evt.target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          canSort = options.sort,
          fromSortable = putSortable || activeSortable,
          vertical,
          _this = this,
          completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state


      function capture() {
        dragOverEvent('dragOverAnimationCapture');

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)


      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation


          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element


        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback


        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted


      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;

      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent('revert');

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // assign target only if condition is true


          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            el.appendChild(dragEl);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
              targetBeforeFirstSwap,
              differentLevel = dragEl.parentNode !== el,
              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
              side1 = vertical ? 'top' : 'left',
              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }

          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert


          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
              after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)


            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, 'user-select', '');
      }

      css(dragEl, 'transform', '');

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event


              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another


              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });

                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (rootEl.contains(dragEl) && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.cancelable && evt.preventDefault();
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }

    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }

  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }

  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
        targetLength = vertical ? targetRect.height : targetRect.width,
        targetS1 = vertical ? targetRect.top : targetRect.left,
        targetS2 = vertical ? targetRect.bottom : targetRect.right,
        invert = false;

    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }

        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }

    invert = invert || invertSwap;

    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }

    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */


  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }

  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  if (documentExists) {
    on$1(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils


  Sortable.utils = {
    on: on$1,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */


  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }

      if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */


  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = version;
  var autoScrolls = [],
      scrollEl,
      scrollRootEl,
      scrolling = false,
      lastAutoScrollX,
      lastAutoScrollY,
      touchEvt$1,
      pointerElemChangedInterval;

  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }

    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;

        if (this.sortable.nativeDraggable) {
          on$1(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on$1(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on$1(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on$1(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent; // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }

        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;

        var x = (evt.touches ? evt.touches[0] : evt).clientX,
            y = (evt.touches ? evt.touches[0] : evt).clientY,
            elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);

          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }

              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }

          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }

  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }

  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }

  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
        scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }

    var layersOut = 0;
    var currentParent = scrollEl;

    do {
      var el = currentParent,
          rect = getRect(el),
          top = rect.top,
          bottom = rect.bottom,
          left = rect.left,
          right = rect.right,
          width = rect.width,
          height = rect.height,
          canScrollX = void 0,
          canScrollY = void 0,
          scrollWidth = el.scrollWidth,
          scrollHeight = el.scrollHeight,
          elCSS = css(el),
          scrollPosX = el.scrollLeft,
          scrollPosY = el.scrollTop;

      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }

      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }

      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);

        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }

      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        dragEl = _ref.dragEl,
        activeSortable = _ref.activeSortable,
        dispatchSortableEvent = _ref.dispatchSortableEvent,
        hideGhostForTarget = _ref.hideGhostForTarget,
        unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();

    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };

  function Revert() {}

  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
          putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();

      if (putSortable) {
        putSortable.captureAnimationState();
      }

      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }

      this.sortable.animateAll();

      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };

  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });

  function Remove() {}

  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
          putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };

  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);
  var vuedraggable_common = createCommonjsModule(function (module) {
    module.exports =
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true
        });
        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
          return value[key];
        }.bind(null, key));
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = "fb15");
      /******/
    }(
    /************************************************************************/

    /******/
    {
      /***/
      "02f4":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("4588");

        var defined = __webpack_require__("be13"); // true  -> String#at
        // false -> String#codePointAt


        module.exports = function (TO_STRING) {
          return function (that, pos) {
            var s = String(defined(that));
            var i = toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
          };
        };
        /***/

      },

      /***/
      "0390":
      /***/
      function (module, exports, __webpack_require__) {
        var at = __webpack_require__("02f4")(true); // `AdvanceStringIndex` abstract operation
        // https://tc39.github.io/ecma262/#sec-advancestringindex


        module.exports = function (S, index, unicode) {
          return index + (unicode ? at(S, index).length : 1);
        };
        /***/

      },

      /***/
      "07e3":
      /***/
      function (module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;

        module.exports = function (it, key) {
          return hasOwnProperty.call(it, key);
        };
        /***/

      },

      /***/
      "0bfb":
      /***/
      function (module, exports, __webpack_require__) {
        // 21.2.5.3 get RegExp.prototype.flags
        var anObject = __webpack_require__("cb7c");

        module.exports = function () {
          var that = anObject(this);
          var result = '';
          if (that.global) result += 'g';
          if (that.ignoreCase) result += 'i';
          if (that.multiline) result += 'm';
          if (that.unicode) result += 'u';
          if (that.sticky) result += 'y';
          return result;
        };
        /***/

      },

      /***/
      "0fc9":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("3a38");

        var max = Math.max;
        var min = Math.min;

        module.exports = function (index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };
        /***/

      },

      /***/
      "1654":
      /***/
      function (module, exports, __webpack_require__) {
        var $at = __webpack_require__("71c1")(true); // 21.1.3.27 String.prototype[@@iterator]()


        __webpack_require__("30f1")(String, 'String', function (iterated) {
          this._t = String(iterated); // target

          this._i = 0; // next index
          // 21.1.5.2.1 %StringIteratorPrototype%.next()
        }, function () {
          var O = this._t;
          var index = this._i;
          var point;
          if (index >= O.length) return {
            value: undefined,
            done: true
          };
          point = $at(O, index);
          this._i += point.length;
          return {
            value: point,
            done: false
          };
        });
        /***/

      },

      /***/
      "1691":
      /***/
      function (module, exports) {
        // IE 8- don't enum bug keys
        module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
        /***/
      },

      /***/
      "1af6":
      /***/
      function (module, exports, __webpack_require__) {
        // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
        var $export = __webpack_require__("63b6");

        $export($export.S, 'Array', {
          isArray: __webpack_require__("9003")
        });
        /***/
      },

      /***/
      "1bc3":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = __webpack_require__("f772"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string


        module.exports = function (it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
          if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          throw TypeError("Can't convert object to primitive value");
        };
        /***/

      },

      /***/
      "1ec9":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("f772");

        var document = __webpack_require__("e53d").document; // typeof document.createElement is 'object' in old IE


        var is = isObject(document) && isObject(document.createElement);

        module.exports = function (it) {
          return is ? document.createElement(it) : {};
        };
        /***/

      },

      /***/
      "20fd":
      /***/
      function (module, exports, __webpack_require__) {
        var $defineProperty = __webpack_require__("d9f6");

        var createDesc = __webpack_require__("aebd");

        module.exports = function (object, index, value) {
          if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
        };
        /***/

      },

      /***/
      "214f":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("b0c5");

        var redefine = __webpack_require__("2aba");

        var hide = __webpack_require__("32e9");

        var fails = __webpack_require__("79e5");

        var defined = __webpack_require__("be13");

        var wks = __webpack_require__("2b4c");

        var regexpExec = __webpack_require__("520a");

        var SPECIES = wks('species');
        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
          // #replace needs built-in support for named groups.
          // #match works fine because it just return the exec results, even if it has
          // a "grops" property.
          var re = /./;

          re.exec = function () {
            var result = [];
            result.groups = {
              a: '7'
            };
            return result;
          };

          return ''.replace(re, '$<a>') !== '7';
        });

        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
          // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
          var re = /(?:)/;
          var originalExec = re.exec;

          re.exec = function () {
            return originalExec.apply(this, arguments);
          };

          var result = 'ab'.split(re);
          return result.length === 2 && result[0] === 'a' && result[1] === 'b';
        }();

        module.exports = function (KEY, length, exec) {
          var SYMBOL = wks(KEY);
          var DELEGATES_TO_SYMBOL = !fails(function () {
            // String methods call symbol-named RegEp methods
            var O = {};

            O[SYMBOL] = function () {
              return 7;
            };

            return ''[KEY](O) != 7;
          });
          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
            // Symbol-named RegExp methods call .exec
            var execCalled = false;
            var re = /a/;

            re.exec = function () {
              execCalled = true;
              return null;
            };

            if (KEY === 'split') {
              // RegExp[@@split] doesn't call the regex's exec method, but first creates
              // a new one. We need to return the patched regex when creating the new one.
              re.constructor = {};

              re.constructor[SPECIES] = function () {
                return re;
              };
            }

            re[SYMBOL]('');
            return !execCalled;
          }) : undefined;

          if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
            var nativeRegExpMethod = /./[SYMBOL];
            var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
              if (regexp.exec === regexpExec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  // The native String method already delegates to @@method (this
                  // polyfilled function), leasing to infinite recursion.
                  // We avoid it by directly calling the native @@method method.
                  return {
                    done: true,
                    value: nativeRegExpMethod.call(regexp, str, arg2)
                  };
                }

                return {
                  done: true,
                  value: nativeMethod.call(str, regexp, arg2)
                };
              }

              return {
                done: false
              };
            });
            var strfn = fns[0];
            var rxfn = fns[1];
            redefine(String.prototype, KEY, strfn);
            hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
            // 21.2.5.11 RegExp.prototype[@@split](string, limit)
            ? function (string, arg) {
              return rxfn.call(string, this, arg);
            } // 21.2.5.6 RegExp.prototype[@@match](string)
            // 21.2.5.9 RegExp.prototype[@@search](string)
            : function (string) {
              return rxfn.call(string, this);
            });
          }
        };
        /***/

      },

      /***/
      "230e":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("d3f4");

        var document = __webpack_require__("7726").document; // typeof document.createElement is 'object' in old IE


        var is = isObject(document) && isObject(document.createElement);

        module.exports = function (it) {
          return is ? document.createElement(it) : {};
        };
        /***/

      },

      /***/
      "23c6":
      /***/
      function (module, exports, __webpack_require__) {
        // getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = __webpack_require__("2d95");

        var TAG = __webpack_require__("2b4c")('toStringTag'); // ES3 wrong here


        var ARG = cof(function () {
          return arguments;
        }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (e) {
            /* empty */
          }
        };

        module.exports = function (it) {
          var O, T, B;
          return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
          : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
          : ARG ? cof(O) // ES3 arguments fallback
          : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };
        /***/

      },

      /***/
      "241e":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.13 ToObject(argument)
        var defined = __webpack_require__("25eb");

        module.exports = function (it) {
          return Object(defined(it));
        };
        /***/

      },

      /***/
      "25eb":
      /***/
      function (module, exports) {
        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };
        /***/

      },

      /***/
      "294c":
      /***/
      function (module, exports) {
        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };
        /***/

      },

      /***/
      "2aba":
      /***/
      function (module, exports, __webpack_require__) {
        var global = __webpack_require__("7726");

        var hide = __webpack_require__("32e9");

        var has = __webpack_require__("69a8");

        var SRC = __webpack_require__("ca5a")('src');

        var $toString = __webpack_require__("fa5b");

        var TO_STRING = 'toString';
        var TPL = ('' + $toString).split(TO_STRING);

        __webpack_require__("8378").inspectSource = function (it) {
          return $toString.call(it);
        };

        (module.exports = function (O, key, val, safe) {
          var isFunction = typeof val == 'function';
          if (isFunction) has(val, 'name') || hide(val, 'name', key);
          if (O[key] === val) return;
          if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

          if (O === global) {
            O[key] = val;
          } else if (!safe) {
            delete O[key];
            hide(O, key, val);
          } else if (O[key]) {
            O[key] = val;
          } else {
            hide(O, key, val);
          } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

        })(Function.prototype, TO_STRING, function toString() {
          return typeof this == 'function' && this[SRC] || $toString.call(this);
        });
        /***/
      },

      /***/
      "2b4c":
      /***/
      function (module, exports, __webpack_require__) {
        var store = __webpack_require__("5537")('wks');

        var uid = __webpack_require__("ca5a");

        var Symbol = __webpack_require__("7726").Symbol;

        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
          return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;
        /***/
      },

      /***/
      "2d00":
      /***/
      function (module, exports) {
        module.exports = false;
        /***/
      },

      /***/
      "2d95":
      /***/
      function (module, exports) {
        var toString = {}.toString;

        module.exports = function (it) {
          return toString.call(it).slice(8, -1);
        };
        /***/

      },

      /***/
      "2fdb":
      /***/
      function (module, exports, __webpack_require__) {
        // 21.1.3.7 String.prototype.includes(searchString, position = 0)
        var $export = __webpack_require__("5ca1");

        var context = __webpack_require__("d2c8");

        var INCLUDES = 'includes';
        $export($export.P + $export.F * __webpack_require__("5147")(INCLUDES), 'String', {
          includes: function includes(searchString
          /* , position = 0 */
          ) {
            return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
          }
        });
        /***/
      },

      /***/
      "30f1":
      /***/
      function (module, exports, __webpack_require__) {
        var LIBRARY = __webpack_require__("b8e3");

        var $export = __webpack_require__("63b6");

        var redefine = __webpack_require__("9138");

        var hide = __webpack_require__("35e8");

        var Iterators = __webpack_require__("481b");

        var $iterCreate = __webpack_require__("8f60");

        var setToStringTag = __webpack_require__("45f2");

        var getPrototypeOf = __webpack_require__("53e2");

        var ITERATOR = __webpack_require__("5168")('iterator');

        var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

        var FF_ITERATOR = '@@iterator';
        var KEYS = 'keys';
        var VALUES = 'values';

        var returnThis = function () {
          return this;
        };

        module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
          $iterCreate(Constructor, NAME, next);

          var getMethod = function (kind) {
            if (!BUGGY && kind in proto) return proto[kind];

            switch (kind) {
              case KEYS:
                return function keys() {
                  return new Constructor(this, kind);
                };

              case VALUES:
                return function values() {
                  return new Constructor(this, kind);
                };
            }

            return function entries() {
              return new Constructor(this, kind);
            };
          };

          var TAG = NAME + ' Iterator';
          var DEF_VALUES = DEFAULT == VALUES;
          var VALUES_BUG = false;
          var proto = Base.prototype;
          var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
          var $default = $native || getMethod(DEFAULT);
          var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
          var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
          var methods, key, IteratorPrototype; // Fix native

          if ($anyNative) {
            IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

            if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
              // Set @@toStringTag to native iterators
              setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

              if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
            }
          } // fix Array#{values, @@iterator}.name in V8 / FF


          if (DEF_VALUES && $native && $native.name !== VALUES) {
            VALUES_BUG = true;

            $default = function values() {
              return $native.call(this);
            };
          } // Define iterator


          if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
            hide(proto, ITERATOR, $default);
          } // Plug for library


          Iterators[NAME] = $default;
          Iterators[TAG] = returnThis;

          if (DEFAULT) {
            methods = {
              values: DEF_VALUES ? $default : getMethod(VALUES),
              keys: IS_SET ? $default : getMethod(KEYS),
              entries: $entries
            };
            if (FORCED) for (key in methods) {
              if (!(key in proto)) redefine(proto, key, methods[key]);
            } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
          }

          return methods;
        };
        /***/

      },

      /***/
      "32a6":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.14 Object.keys(O)
        var toObject = __webpack_require__("241e");

        var $keys = __webpack_require__("c3a1");

        __webpack_require__("ce7e")('keys', function () {
          return function keys(it) {
            return $keys(toObject(it));
          };
        });
        /***/

      },

      /***/
      "32e9":
      /***/
      function (module, exports, __webpack_require__) {
        var dP = __webpack_require__("86cc");

        var createDesc = __webpack_require__("4630");

        module.exports = __webpack_require__("9e1e") ? function (object, key, value) {
          return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
          object[key] = value;
          return object;
        };
        /***/
      },

      /***/
      "32fc":
      /***/
      function (module, exports, __webpack_require__) {
        var document = __webpack_require__("e53d").document;

        module.exports = document && document.documentElement;
        /***/
      },

      /***/
      "335c":
      /***/
      function (module, exports, __webpack_require__) {
        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = __webpack_require__("6b4c"); // eslint-disable-next-line no-prototype-builtins


        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
          return cof(it) == 'String' ? it.split('') : Object(it);
        };
        /***/
      },

      /***/
      "355d":
      /***/
      function (module, exports) {
        exports.f = {}.propertyIsEnumerable;
        /***/
      },

      /***/
      "35e8":
      /***/
      function (module, exports, __webpack_require__) {
        var dP = __webpack_require__("d9f6");

        var createDesc = __webpack_require__("aebd");

        module.exports = __webpack_require__("8e60") ? function (object, key, value) {
          return dP.f(object, key, createDesc(1, value));
        } : function (object, key, value) {
          object[key] = value;
          return object;
        };
        /***/
      },

      /***/
      "36c3":
      /***/
      function (module, exports, __webpack_require__) {
        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = __webpack_require__("335c");

        var defined = __webpack_require__("25eb");

        module.exports = function (it) {
          return IObject(defined(it));
        };
        /***/

      },

      /***/
      "3702":
      /***/
      function (module, exports, __webpack_require__) {
        // check on default Array iterator
        var Iterators = __webpack_require__("481b");

        var ITERATOR = __webpack_require__("5168")('iterator');

        var ArrayProto = Array.prototype;

        module.exports = function (it) {
          return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
        };
        /***/

      },

      /***/
      "3a38":
      /***/
      function (module, exports) {
        // 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;

        module.exports = function (it) {
          return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };
        /***/

      },

      /***/
      "40c3":
      /***/
      function (module, exports, __webpack_require__) {
        // getting tag from 19.1.3.6 Object.prototype.toString()
        var cof = __webpack_require__("6b4c");

        var TAG = __webpack_require__("5168")('toStringTag'); // ES3 wrong here


        var ARG = cof(function () {
          return arguments;
        }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (e) {
            /* empty */
          }
        };

        module.exports = function (it) {
          var O, T, B;
          return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
          : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
          : ARG ? cof(O) // ES3 arguments fallback
          : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
        };
        /***/

      },

      /***/
      "4588":
      /***/
      function (module, exports) {
        // 7.1.4 ToInteger
        var ceil = Math.ceil;
        var floor = Math.floor;

        module.exports = function (it) {
          return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
        };
        /***/

      },

      /***/
      "45f2":
      /***/
      function (module, exports, __webpack_require__) {
        var def = __webpack_require__("d9f6").f;

        var has = __webpack_require__("07e3");

        var TAG = __webpack_require__("5168")('toStringTag');

        module.exports = function (it, tag, stat) {
          if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
            configurable: true,
            value: tag
          });
        };
        /***/

      },

      /***/
      "4630":
      /***/
      function (module, exports) {
        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };
        /***/

      },

      /***/
      "469f":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("6c1c");

        __webpack_require__("1654");

        module.exports = __webpack_require__("7d7b");
        /***/
      },

      /***/
      "481b":
      /***/
      function (module, exports) {
        module.exports = {};
        /***/
      },

      /***/
      "4aa6":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("dc62");
        /***/
      },

      /***/
      "4bf8":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.13 ToObject(argument)
        var defined = __webpack_require__("be13");

        module.exports = function (it) {
          return Object(defined(it));
        };
        /***/

      },

      /***/
      "4ee1":
      /***/
      function (module, exports, __webpack_require__) {
        var ITERATOR = __webpack_require__("5168")('iterator');

        var SAFE_CLOSING = false;

        try {
          var riter = [7][ITERATOR]();

          riter['return'] = function () {
            SAFE_CLOSING = true;
          }; // eslint-disable-next-line no-throw-literal


          Array.from(riter, function () {
            throw 2;
          });
        } catch (e) {
          /* empty */
        }

        module.exports = function (exec, skipClosing) {
          if (!skipClosing && !SAFE_CLOSING) return false;
          var safe = false;

          try {
            var arr = [7];
            var iter = arr[ITERATOR]();

            iter.next = function () {
              return {
                done: safe = true
              };
            };

            arr[ITERATOR] = function () {
              return iter;
            };

            exec(arr);
          } catch (e) {
            /* empty */
          }

          return safe;
        };
        /***/

      },

      /***/
      "50ed":
      /***/
      function (module, exports) {
        module.exports = function (done, value) {
          return {
            value: value,
            done: !!done
          };
        };
        /***/

      },

      /***/
      "5147":
      /***/
      function (module, exports, __webpack_require__) {
        var MATCH = __webpack_require__("2b4c")('match');

        module.exports = function (KEY) {
          var re = /./;

          try {
            '/./'[KEY](re);
          } catch (e) {
            try {
              re[MATCH] = false;
              return !'/./'[KEY](re);
            } catch (f) {
              /* empty */
            }
          }

          return true;
        };
        /***/

      },

      /***/
      "5168":
      /***/
      function (module, exports, __webpack_require__) {
        var store = __webpack_require__("dbdb")('wks');

        var uid = __webpack_require__("62a0");

        var Symbol = __webpack_require__("e53d").Symbol;

        var USE_SYMBOL = typeof Symbol == 'function';

        var $exports = module.exports = function (name) {
          return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
        };

        $exports.store = store;
        /***/
      },

      /***/
      "5176":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("51b6");
        /***/
      },

      /***/
      "51b6":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("a3c3");

        module.exports = __webpack_require__("584a").Object.assign;
        /***/
      },

      /***/
      "520a":
      /***/
      function (module, exports, __webpack_require__) {
        var regexpFlags = __webpack_require__("0bfb");

        var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
        // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
        // which loads this file before patching the method.

        var nativeReplace = String.prototype.replace;
        var patchedExec = nativeExec;
        var LAST_INDEX = 'lastIndex';

        var UPDATES_LAST_INDEX_WRONG = function () {
          var re1 = /a/,
              re2 = /b*/g;
          nativeExec.call(re1, 'a');
          nativeExec.call(re2, 'a');
          return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
        }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


        var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

        if (PATCH) {
          patchedExec = function exec(str) {
            var re = this;
            var lastIndex, reCopy, match, i;

            if (NPCG_INCLUDED) {
              reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
            }

            if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
            match = nativeExec.call(re, str);

            if (UPDATES_LAST_INDEX_WRONG && match) {
              re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
            }

            if (NPCG_INCLUDED && match && match.length > 1) {
              // Fix browsers whose `exec` methods don't consistently return `undefined`
              // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
              // eslint-disable-next-line no-loop-func
              nativeReplace.call(match[0], reCopy, function () {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === undefined) match[i] = undefined;
                }
              });
            }

            return match;
          };
        }

        module.exports = patchedExec;
        /***/
      },

      /***/
      "53e2":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
        var has = __webpack_require__("07e3");

        var toObject = __webpack_require__("241e");

        var IE_PROTO = __webpack_require__("5559")('IE_PROTO');

        var ObjectProto = Object.prototype;

        module.exports = Object.getPrototypeOf || function (O) {
          O = toObject(O);
          if (has(O, IE_PROTO)) return O[IE_PROTO];

          if (typeof O.constructor == 'function' && O instanceof O.constructor) {
            return O.constructor.prototype;
          }

          return O instanceof Object ? ObjectProto : null;
        };
        /***/

      },

      /***/
      "549b":
      /***/
      function (module, exports, __webpack_require__) {
        var ctx = __webpack_require__("d864");

        var $export = __webpack_require__("63b6");

        var toObject = __webpack_require__("241e");

        var call = __webpack_require__("b0dc");

        var isArrayIter = __webpack_require__("3702");

        var toLength = __webpack_require__("b447");

        var createProperty = __webpack_require__("20fd");

        var getIterFn = __webpack_require__("7cd6");

        $export($export.S + $export.F * !__webpack_require__("4ee1")(function (iter) {}), 'Array', {
          // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
          from: function from(arrayLike
          /* , mapfn = undefined, thisArg = undefined */
          ) {
            var O = toObject(arrayLike);
            var C = typeof this == 'function' ? this : Array;
            var aLen = arguments.length;
            var mapfn = aLen > 1 ? arguments[1] : undefined;
            var mapping = mapfn !== undefined;
            var index = 0;
            var iterFn = getIterFn(O);
            var length, result, step, iterator;
            if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

            if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
              for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
              }
            } else {
              length = toLength(O.length);

              for (result = new C(length); length > index; index++) {
                createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
              }
            }

            result.length = index;
            return result;
          }
        });
        /***/
      },

      /***/
      "54a1":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("6c1c");

        __webpack_require__("1654");

        module.exports = __webpack_require__("95d5");
        /***/
      },

      /***/
      "5537":
      /***/
      function (module, exports, __webpack_require__) {
        var core = __webpack_require__("8378");

        var global = __webpack_require__("7726");

        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});
        (module.exports = function (key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: core.version,
          mode: __webpack_require__("2d00") ? 'pure' : 'global',
          copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
        });
        /***/
      },

      /***/
      "5559":
      /***/
      function (module, exports, __webpack_require__) {
        var shared = __webpack_require__("dbdb")('keys');

        var uid = __webpack_require__("62a0");

        module.exports = function (key) {
          return shared[key] || (shared[key] = uid(key));
        };
        /***/

      },

      /***/
      "584a":
      /***/
      function (module, exports) {
        var core = module.exports = {
          version: '2.6.5'
        };
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "5b4e":
      /***/
      function (module, exports, __webpack_require__) {
        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = __webpack_require__("36c3");

        var toLength = __webpack_require__("b447");

        var toAbsoluteIndex = __webpack_require__("0fc9");

        module.exports = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare

            if (IS_INCLUDES && el != el) while (length > index) {
              value = O[index++]; // eslint-disable-next-line no-self-compare

              if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
          };
        };
        /***/

      },

      /***/
      "5ca1":
      /***/
      function (module, exports, __webpack_require__) {
        var global = __webpack_require__("7726");

        var core = __webpack_require__("8378");

        var hide = __webpack_require__("32e9");

        var redefine = __webpack_require__("2aba");

        var ctx = __webpack_require__("9b43");

        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
          var IS_FORCED = type & $export.F;
          var IS_GLOBAL = type & $export.G;
          var IS_STATIC = type & $export.S;
          var IS_PROTO = type & $export.P;
          var IS_BIND = type & $export.B;
          var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
          var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
          var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
          var key, own, out, exp;
          if (IS_GLOBAL) source = name;

          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

            out = (own ? target : source)[key]; // bind timers to global for call from export context

            exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

            if (target) redefine(target, key, out, type & $export.U); // export

            if (exports[key] != out) hide(exports, key, exp);
            if (IS_PROTO && expProto[key] != out) expProto[key] = out;
          }
        };

        global.core = core; // type bitmap

        $export.F = 1; // forced

        $export.G = 2; // global

        $export.S = 4; // static

        $export.P = 8; // proto

        $export.B = 16; // bind

        $export.W = 32; // wrap

        $export.U = 64; // safe

        $export.R = 128; // real proto method for `library`

        module.exports = $export;
        /***/
      },

      /***/
      "5d73":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("469f");
        /***/
      },

      /***/
      "5f1b":
      /***/
      function (module, exports, __webpack_require__) {
        var classof = __webpack_require__("23c6");

        var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
        // https://tc39.github.io/ecma262/#sec-regexpexec

        module.exports = function (R, S) {
          var exec = R.exec;

          if (typeof exec === 'function') {
            var result = exec.call(R, S);

            if (typeof result !== 'object') {
              throw new TypeError('RegExp exec method returned something other than an Object or null');
            }

            return result;
          }

          if (classof(R) !== 'RegExp') {
            throw new TypeError('RegExp#exec called on incompatible receiver');
          }

          return builtinExec.call(R, S);
        };
        /***/

      },

      /***/
      "626a":
      /***/
      function (module, exports, __webpack_require__) {
        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        var cof = __webpack_require__("2d95"); // eslint-disable-next-line no-prototype-builtins


        module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
          return cof(it) == 'String' ? it.split('') : Object(it);
        };
        /***/
      },

      /***/
      "62a0":
      /***/
      function (module, exports) {
        var id = 0;
        var px = Math.random();

        module.exports = function (key) {
          return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };
        /***/

      },

      /***/
      "63b6":
      /***/
      function (module, exports, __webpack_require__) {
        var global = __webpack_require__("e53d");

        var core = __webpack_require__("584a");

        var ctx = __webpack_require__("d864");

        var hide = __webpack_require__("35e8");

        var has = __webpack_require__("07e3");

        var PROTOTYPE = 'prototype';

        var $export = function (type, name, source) {
          var IS_FORCED = type & $export.F;
          var IS_GLOBAL = type & $export.G;
          var IS_STATIC = type & $export.S;
          var IS_PROTO = type & $export.P;
          var IS_BIND = type & $export.B;
          var IS_WRAP = type & $export.W;
          var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
          var expProto = exports[PROTOTYPE];
          var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
          var key, own, out;
          if (IS_GLOBAL) source = name;

          for (key in source) {
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined;
            if (own && has(exports, key)) continue; // export native or passed

            out = own ? target[key] : source[key]; // prevent global pollution for namespaces

            exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
            : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
            : IS_WRAP && target[key] == out ? function (C) {
              var F = function (a, b, c) {
                if (this instanceof C) {
                  switch (arguments.length) {
                    case 0:
                      return new C();

                    case 1:
                      return new C(a);

                    case 2:
                      return new C(a, b);
                  }

                  return new C(a, b, c);
                }

                return C.apply(this, arguments);
              };

              F[PROTOTYPE] = C[PROTOTYPE];
              return F; // make static versions for prototype methods
            }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

            if (IS_PROTO) {
              (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

              if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
            }
          }
        }; // type bitmap


        $export.F = 1; // forced

        $export.G = 2; // global

        $export.S = 4; // static

        $export.P = 8; // proto

        $export.B = 16; // bind

        $export.W = 32; // wrap

        $export.U = 64; // safe

        $export.R = 128; // real proto method for `library`

        module.exports = $export;
        /***/
      },

      /***/
      "6762":
      /***/
      function (module, exports, __webpack_require__) {
        // https://github.com/tc39/Array.prototype.includes
        var $export = __webpack_require__("5ca1");

        var $includes = __webpack_require__("c366")(true);

        $export($export.P, 'Array', {
          includes: function includes(el
          /* , fromIndex = 0 */
          ) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
          }
        });

        __webpack_require__("9c6c")('includes');
        /***/

      },

      /***/
      "6821":
      /***/
      function (module, exports, __webpack_require__) {
        // to indexed object, toObject with fallback for non-array-like ES3 strings
        var IObject = __webpack_require__("626a");

        var defined = __webpack_require__("be13");

        module.exports = function (it) {
          return IObject(defined(it));
        };
        /***/

      },

      /***/
      "69a8":
      /***/
      function (module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;

        module.exports = function (it, key) {
          return hasOwnProperty.call(it, key);
        };
        /***/

      },

      /***/
      "6a99":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.1 ToPrimitive(input [, PreferredType])
        var isObject = __webpack_require__("d3f4"); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
        // and the second argument - flag - preferred type is a string


        module.exports = function (it, S) {
          if (!isObject(it)) return it;
          var fn, val;
          if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
          if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
          throw TypeError("Can't convert object to primitive value");
        };
        /***/

      },

      /***/
      "6b4c":
      /***/
      function (module, exports) {
        var toString = {}.toString;

        module.exports = function (it) {
          return toString.call(it).slice(8, -1);
        };
        /***/

      },

      /***/
      "6c1c":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("c367");

        var global = __webpack_require__("e53d");

        var hide = __webpack_require__("35e8");

        var Iterators = __webpack_require__("481b");

        var TO_STRING_TAG = __webpack_require__("5168")('toStringTag');

        var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

        for (var i = 0; i < DOMIterables.length; i++) {
          var NAME = DOMIterables[i];
          var Collection = global[NAME];
          var proto = Collection && Collection.prototype;
          if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
          Iterators[NAME] = Iterators.Array;
        }
        /***/

      },

      /***/
      "71c1":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("3a38");

        var defined = __webpack_require__("25eb"); // true  -> String#at
        // false -> String#codePointAt


        module.exports = function (TO_STRING) {
          return function (that, pos) {
            var s = String(defined(that));
            var i = toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
          };
        };
        /***/

      },

      /***/
      "7726":
      /***/
      function (module, exports) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
        : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "774e":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("d2d5");
        /***/
      },

      /***/
      "77f1":
      /***/
      function (module, exports, __webpack_require__) {
        var toInteger = __webpack_require__("4588");

        var max = Math.max;
        var min = Math.min;

        module.exports = function (index, length) {
          index = toInteger(index);
          return index < 0 ? max(index + length, 0) : min(index, length);
        };
        /***/

      },

      /***/
      "794b":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = !__webpack_require__("8e60") && !__webpack_require__("294c")(function () {
          return Object.defineProperty(__webpack_require__("1ec9")('div'), 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "79aa":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          if (typeof it != 'function') throw TypeError(it + ' is not a function!');
          return it;
        };
        /***/

      },

      /***/
      "79e5":
      /***/
      function (module, exports) {
        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (e) {
            return true;
          }
        };
        /***/

      },

      /***/
      "7cd6":
      /***/
      function (module, exports, __webpack_require__) {
        var classof = __webpack_require__("40c3");

        var ITERATOR = __webpack_require__("5168")('iterator');

        var Iterators = __webpack_require__("481b");

        module.exports = __webpack_require__("584a").getIteratorMethod = function (it) {
          if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
        };
        /***/

      },

      /***/
      "7d7b":
      /***/
      function (module, exports, __webpack_require__) {
        var anObject = __webpack_require__("e4ae");

        var get = __webpack_require__("7cd6");

        module.exports = __webpack_require__("584a").getIterator = function (it) {
          var iterFn = get(it);
          if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
          return anObject(iterFn.call(it));
        };
        /***/

      },

      /***/
      "7e90":
      /***/
      function (module, exports, __webpack_require__) {
        var dP = __webpack_require__("d9f6");

        var anObject = __webpack_require__("e4ae");

        var getKeys = __webpack_require__("c3a1");

        module.exports = __webpack_require__("8e60") ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys = getKeys(Properties);
          var length = keys.length;
          var i = 0;
          var P;

          while (length > i) dP.f(O, P = keys[i++], Properties[P]);

          return O;
        };
        /***/
      },

      /***/
      "8378":
      /***/
      function (module, exports) {
        var core = module.exports = {
          version: '2.6.5'
        };
        if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "8436":
      /***/
      function (module, exports) {
        module.exports = function () {
          /* empty */
        };
        /***/

      },

      /***/
      "86cc":
      /***/
      function (module, exports, __webpack_require__) {
        var anObject = __webpack_require__("cb7c");

        var IE8_DOM_DEFINE = __webpack_require__("c69a");

        var toPrimitive = __webpack_require__("6a99");

        var dP = Object.defineProperty;
        exports.f = __webpack_require__("9e1e") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPrimitive(P, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE) try {
            return dP(O, P, Attributes);
          } catch (e) {
            /* empty */
          }
          if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
          if ('value' in Attributes) O[P] = Attributes.value;
          return O;
        };
        /***/
      },

      /***/
      "8aae":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("32a6");

        module.exports = __webpack_require__("584a").Object.keys;
        /***/
      },

      /***/
      "8e60":
      /***/
      function (module, exports, __webpack_require__) {
        // Thank's IE8 for his funny defineProperty
        module.exports = !__webpack_require__("294c")(function () {
          return Object.defineProperty({}, 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "8f60":
      /***/
      function (module, exports, __webpack_require__) {
        var create = __webpack_require__("a159");

        var descriptor = __webpack_require__("aebd");

        var setToStringTag = __webpack_require__("45f2");

        var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

        __webpack_require__("35e8")(IteratorPrototype, __webpack_require__("5168")('iterator'), function () {
          return this;
        });

        module.exports = function (Constructor, NAME, next) {
          Constructor.prototype = create(IteratorPrototype, {
            next: descriptor(1, next)
          });
          setToStringTag(Constructor, NAME + ' Iterator');
        };
        /***/

      },

      /***/
      "9003":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.2.2 IsArray(argument)
        var cof = __webpack_require__("6b4c");

        module.exports = Array.isArray || function isArray(arg) {
          return cof(arg) == 'Array';
        };
        /***/

      },

      /***/
      "9138":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("35e8");
        /***/
      },

      /***/
      "9306":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.1 Object.assign(target, source, ...)
        var getKeys = __webpack_require__("c3a1");

        var gOPS = __webpack_require__("9aa9");

        var pIE = __webpack_require__("355d");

        var toObject = __webpack_require__("241e");

        var IObject = __webpack_require__("335c");

        var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

        module.exports = !$assign || __webpack_require__("294c")(function () {
          var A = {};
          var B = {}; // eslint-disable-next-line no-undef

          var S = Symbol();
          var K = 'abcdefghijklmnopqrst';
          A[S] = 7;
          K.split('').forEach(function (k) {
            B[k] = k;
          });
          return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
        }) ? function assign(target, source) {
          // eslint-disable-line no-unused-vars
          var T = toObject(target);
          var aLen = arguments.length;
          var index = 1;
          var getSymbols = gOPS.f;
          var isEnum = pIE.f;

          while (aLen > index) {
            var S = IObject(arguments[index++]);
            var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
            var length = keys.length;
            var j = 0;
            var key;

            while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
          }

          return T;
        } : $assign;
        /***/
      },

      /***/
      "9427":
      /***/
      function (module, exports, __webpack_require__) {
        var $export = __webpack_require__("63b6"); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


        $export($export.S, 'Object', {
          create: __webpack_require__("a159")
        });
        /***/
      },

      /***/
      "95d5":
      /***/
      function (module, exports, __webpack_require__) {
        var classof = __webpack_require__("40c3");

        var ITERATOR = __webpack_require__("5168")('iterator');

        var Iterators = __webpack_require__("481b");

        module.exports = __webpack_require__("584a").isIterable = function (it) {
          var O = Object(it);
          return O[ITERATOR] !== undefined || '@@iterator' in O // eslint-disable-next-line no-prototype-builtins
          || Iterators.hasOwnProperty(classof(O));
        };
        /***/

      },

      /***/
      "9aa9":
      /***/
      function (module, exports) {
        exports.f = Object.getOwnPropertySymbols;
        /***/
      },

      /***/
      "9b43":
      /***/
      function (module, exports, __webpack_require__) {
        // optional / simple context binding
        var aFunction = __webpack_require__("d8e8");

        module.exports = function (fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;

          switch (length) {
            case 1:
              return function (a) {
                return fn.call(that, a);
              };

            case 2:
              return function (a, b) {
                return fn.call(that, a, b);
              };

            case 3:
              return function (a, b, c) {
                return fn.call(that, a, b, c);
              };
          }

          return function ()
          /* ...args */
          {
            return fn.apply(that, arguments);
          };
        };
        /***/

      },

      /***/
      "9c6c":
      /***/
      function (module, exports, __webpack_require__) {
        // 22.1.3.31 Array.prototype[@@unscopables]
        var UNSCOPABLES = __webpack_require__("2b4c")('unscopables');

        var ArrayProto = Array.prototype;
        if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__("32e9")(ArrayProto, UNSCOPABLES, {});

        module.exports = function (key) {
          ArrayProto[UNSCOPABLES][key] = true;
        };
        /***/

      },

      /***/
      "9def":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.15 ToLength
        var toInteger = __webpack_require__("4588");

        var min = Math.min;

        module.exports = function (it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };
        /***/

      },

      /***/
      "9e1e":
      /***/
      function (module, exports, __webpack_require__) {
        // Thank's IE8 for his funny defineProperty
        module.exports = !__webpack_require__("79e5")(function () {
          return Object.defineProperty({}, 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "a159":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
        var anObject = __webpack_require__("e4ae");

        var dPs = __webpack_require__("7e90");

        var enumBugKeys = __webpack_require__("1691");

        var IE_PROTO = __webpack_require__("5559")('IE_PROTO');

        var Empty = function () {
          /* empty */
        };

        var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

        var createDict = function () {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = __webpack_require__("1ec9")('iframe');

          var i = enumBugKeys.length;
          var lt = '<';
          var gt = '>';
          var iframeDocument;
          iframe.style.display = 'none';

          __webpack_require__("32fc").appendChild(iframe);

          iframe.src = 'javascript:'; // eslint-disable-line no-script-url
          // createDict = iframe.contentWindow.Object;
          // html.removeChild(iframe);

          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
          iframeDocument.close();
          createDict = iframeDocument.F;

          while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];

          return createDict();
        };

        module.exports = Object.create || function create(O, Properties) {
          var result;

          if (O !== null) {
            Empty[PROTOTYPE] = anObject(O);
            result = new Empty();
            Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

            result[IE_PROTO] = O;
          } else result = createDict();

          return Properties === undefined ? result : dPs(result, Properties);
        };
        /***/

      },

      /***/
      "a352":
      /***/
      function (module, exports) {
        module.exports = Sortable;
        /***/
      },

      /***/
      "a3c3":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.3.1 Object.assign(target, source)
        var $export = __webpack_require__("63b6");

        $export($export.S + $export.F, 'Object', {
          assign: __webpack_require__("9306")
        });
        /***/
      },

      /***/
      "a481":
      /***/
      function (module, exports, __webpack_require__) {
        var anObject = __webpack_require__("cb7c");

        var toObject = __webpack_require__("4bf8");

        var toLength = __webpack_require__("9def");

        var toInteger = __webpack_require__("4588");

        var advanceStringIndex = __webpack_require__("0390");

        var regExpExec = __webpack_require__("5f1b");

        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;
        var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

        var maybeToString = function (it) {
          return it === undefined ? it : String(it);
        }; // @@replace logic


        __webpack_require__("214f")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
          return [// `String.prototype.replace` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.replace
          function replace(searchValue, replaceValue) {
            var O = defined(this);
            var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
            return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
          }, // `RegExp.prototype[@@replace]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
          function (regexp, replaceValue) {
            var res = maybeCallNative($replace, regexp, this, replaceValue);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === 'function';
            if (!functionalReplace) replaceValue = String(replaceValue);
            var global = rx.global;

            if (global) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }

            var results = [];

            while (true) {
              var result = regExpExec(rx, S);
              if (result === null) break;
              results.push(result);
              if (!global) break;
              var matchStr = String(result[0]);
              if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }

            var accumulatedResult = '';
            var nextSourcePosition = 0;

            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = String(result[0]);
              var position = max(min(toInteger(result.index), S.length), 0);
              var captures = []; // NOTE: This is equivalent to
              //   captures = result.slice(1).map(maybeToString)
              // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
              // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
              // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

              for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));

              var namedCaptures = result.groups;

              if (functionalReplace) {
                var replacerArgs = [matched].concat(captures, position, S);
                if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                var replacement = String(replaceValue.apply(undefined, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
              }

              if (position >= nextSourcePosition) {
                accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                nextSourcePosition = position + matched.length;
              }
            }

            return accumulatedResult + S.slice(nextSourcePosition);
          }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

          function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
            var tailPos = position + matched.length;
            var m = captures.length;
            var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

            if (namedCaptures !== undefined) {
              namedCaptures = toObject(namedCaptures);
              symbols = SUBSTITUTION_SYMBOLS;
            }

            return $replace.call(replacement, symbols, function (match, ch) {
              var capture;

              switch (ch.charAt(0)) {
                case '$':
                  return '$';

                case '&':
                  return matched;

                case '`':
                  return str.slice(0, position);

                case "'":
                  return str.slice(tailPos);

                case '<':
                  capture = namedCaptures[ch.slice(1, -1)];
                  break;

                default:
                  // \d\d?
                  var n = +ch;
                  if (n === 0) return match;

                  if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                    return match;
                  }

                  capture = captures[n - 1];
              }

              return capture === undefined ? '' : capture;
            });
          }
        });
        /***/

      },

      /***/
      "a4bb":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("8aae");
        /***/
      },

      /***/
      "a745":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("f410");
        /***/
      },

      /***/
      "aae3":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.2.8 IsRegExp(argument)
        var isObject = __webpack_require__("d3f4");

        var cof = __webpack_require__("2d95");

        var MATCH = __webpack_require__("2b4c")('match');

        module.exports = function (it) {
          var isRegExp;
          return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
        };
        /***/

      },

      /***/
      "aebd":
      /***/
      function (module, exports) {
        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };
        /***/

      },

      /***/
      "b0c5":
      /***/
      function (module, exports, __webpack_require__) {
        var regexpExec = __webpack_require__("520a");

        __webpack_require__("5ca1")({
          target: 'RegExp',
          proto: true,
          forced: regexpExec !== /./.exec
        }, {
          exec: regexpExec
        });
        /***/

      },

      /***/
      "b0dc":
      /***/
      function (module, exports, __webpack_require__) {
        // call something on iterator step with safe closing on error
        var anObject = __webpack_require__("e4ae");

        module.exports = function (iterator, fn, value, entries) {
          try {
            return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
          } catch (e) {
            var ret = iterator['return'];
            if (ret !== undefined) anObject(ret.call(iterator));
            throw e;
          }
        };
        /***/

      },

      /***/
      "b447":
      /***/
      function (module, exports, __webpack_require__) {
        // 7.1.15 ToLength
        var toInteger = __webpack_require__("3a38");

        var min = Math.min;

        module.exports = function (it) {
          return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
        };
        /***/

      },

      /***/
      "b8e3":
      /***/
      function (module, exports) {
        module.exports = true;
        /***/
      },

      /***/
      "be13":
      /***/
      function (module, exports) {
        // 7.2.1 RequireObjectCoercible(argument)
        module.exports = function (it) {
          if (it == undefined) throw TypeError("Can't call method on  " + it);
          return it;
        };
        /***/

      },

      /***/
      "c366":
      /***/
      function (module, exports, __webpack_require__) {
        // false -> Array#indexOf
        // true  -> Array#includes
        var toIObject = __webpack_require__("6821");

        var toLength = __webpack_require__("9def");

        var toAbsoluteIndex = __webpack_require__("77f1");

        module.exports = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare

            if (IS_INCLUDES && el != el) while (length > index) {
              value = O[index++]; // eslint-disable-next-line no-self-compare

              if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
          };
        };
        /***/

      },

      /***/
      "c367":
      /***/
      function (module, exports, __webpack_require__) {
        var addToUnscopables = __webpack_require__("8436");

        var step = __webpack_require__("50ed");

        var Iterators = __webpack_require__("481b");

        var toIObject = __webpack_require__("36c3"); // 22.1.3.4 Array.prototype.entries()
        // 22.1.3.13 Array.prototype.keys()
        // 22.1.3.29 Array.prototype.values()
        // 22.1.3.30 Array.prototype[@@iterator]()


        module.exports = __webpack_require__("30f1")(Array, 'Array', function (iterated, kind) {
          this._t = toIObject(iterated); // target

          this._i = 0; // next index

          this._k = kind; // kind
          // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
        }, function () {
          var O = this._t;
          var kind = this._k;
          var index = this._i++;

          if (!O || index >= O.length) {
            this._t = undefined;
            return step(1);
          }

          if (kind == 'keys') return step(0, index);
          if (kind == 'values') return step(0, O[index]);
          return step(0, [index, O[index]]);
        }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

        Iterators.Arguments = Iterators.Array;
        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');
        /***/
      },

      /***/
      "c3a1":
      /***/
      function (module, exports, __webpack_require__) {
        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
        var $keys = __webpack_require__("e6f3");

        var enumBugKeys = __webpack_require__("1691");

        module.exports = Object.keys || function keys(O) {
          return $keys(O, enumBugKeys);
        };
        /***/

      },

      /***/
      "c649":
      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        /* WEBPACK VAR INJECTION */
        (function (global) {
          /* harmony export (binding) */
          __webpack_require__.d(__webpack_exports__, "c", function () {
            return insertNodeAt;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "a", function () {
            return camelize;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "b", function () {
            return console;
          });
          /* harmony export (binding) */


          __webpack_require__.d(__webpack_exports__, "d", function () {
            return removeNode;
          });
          /* harmony import */


          var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a481");
          /* harmony import */


          var F_source_Vue_Draggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("4aa6");
          /* harmony import */


          var F_source_Vue_Draggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/
          __webpack_require__.n(F_source_Vue_Draggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1__);

          function getConsole() {
            if (typeof window !== "undefined") {
              return window.console;
            }

            return global.console;
          }

          var console = getConsole();

          function cached(fn) {
            var cache = F_source_Vue_Draggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1___default()(null);
            return function cachedFn(str) {
              var hit = cache[str];
              return hit || (cache[str] = fn(str));
            };
          }

          var regex = /-(\w)/g;
          var camelize = cached(function (str) {
            return str.replace(regex, function (_, c) {
              return c ? c.toUpperCase() : "";
            });
          });

          function removeNode(node) {
            if (node.parentElement !== null) {
              node.parentElement.removeChild(node);
            }
          }

          function insertNodeAt(fatherNode, node, position) {
            var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;
            fatherNode.insertBefore(node, refNode);
          }
          /* WEBPACK VAR INJECTION */

        }).call(this, __webpack_require__("c8ba"));
        /***/
      },

      /***/
      "c69a":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = !__webpack_require__("9e1e") && !__webpack_require__("79e5")(function () {
          return Object.defineProperty(__webpack_require__("230e")('div'), 'a', {
            get: function () {
              return 7;
            }
          }).a != 7;
        });
        /***/
      },

      /***/
      "c8ba":
      /***/
      function (module, exports) {
        var g; // This works in non-strict mode

        g = function () {
          return this;
        }();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function("return this")();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        } // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}


        module.exports = g;
        /***/
      },

      /***/
      "c8bb":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("54a1");
        /***/
      },

      /***/
      "ca5a":
      /***/
      function (module, exports) {
        var id = 0;
        var px = Math.random();

        module.exports = function (key) {
          return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
        };
        /***/

      },

      /***/
      "cb7c":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("d3f4");

        module.exports = function (it) {
          if (!isObject(it)) throw TypeError(it + ' is not an object!');
          return it;
        };
        /***/

      },

      /***/
      "ce7e":
      /***/
      function (module, exports, __webpack_require__) {
        // most Object methods by ES6 should accept primitives
        var $export = __webpack_require__("63b6");

        var core = __webpack_require__("584a");

        var fails = __webpack_require__("294c");

        module.exports = function (KEY, exec) {
          var fn = (core.Object || {})[KEY] || Object[KEY];
          var exp = {};
          exp[KEY] = exec(fn);
          $export($export.S + $export.F * fails(function () {
            fn(1);
          }), 'Object', exp);
        };
        /***/

      },

      /***/
      "d2c8":
      /***/
      function (module, exports, __webpack_require__) {
        // helper for String#{startsWith, endsWith, includes}
        var isRegExp = __webpack_require__("aae3");

        var defined = __webpack_require__("be13");

        module.exports = function (that, searchString, NAME) {
          if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
          return String(defined(that));
        };
        /***/

      },

      /***/
      "d2d5":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("1654");

        __webpack_require__("549b");

        module.exports = __webpack_require__("584a").Array.from;
        /***/
      },

      /***/
      "d3f4":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          return typeof it === 'object' ? it !== null : typeof it === 'function';
        };
        /***/

      },

      /***/
      "d864":
      /***/
      function (module, exports, __webpack_require__) {
        // optional / simple context binding
        var aFunction = __webpack_require__("79aa");

        module.exports = function (fn, that, length) {
          aFunction(fn);
          if (that === undefined) return fn;

          switch (length) {
            case 1:
              return function (a) {
                return fn.call(that, a);
              };

            case 2:
              return function (a, b) {
                return fn.call(that, a, b);
              };

            case 3:
              return function (a, b, c) {
                return fn.call(that, a, b, c);
              };
          }

          return function ()
          /* ...args */
          {
            return fn.apply(that, arguments);
          };
        };
        /***/

      },

      /***/
      "d8e8":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          if (typeof it != 'function') throw TypeError(it + ' is not a function!');
          return it;
        };
        /***/

      },

      /***/
      "d9f6":
      /***/
      function (module, exports, __webpack_require__) {
        var anObject = __webpack_require__("e4ae");

        var IE8_DOM_DEFINE = __webpack_require__("794b");

        var toPrimitive = __webpack_require__("1bc3");

        var dP = Object.defineProperty;
        exports.f = __webpack_require__("8e60") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPrimitive(P, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE) try {
            return dP(O, P, Attributes);
          } catch (e) {
            /* empty */
          }
          if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
          if ('value' in Attributes) O[P] = Attributes.value;
          return O;
        };
        /***/
      },

      /***/
      "dbdb":
      /***/
      function (module, exports, __webpack_require__) {
        var core = __webpack_require__("584a");

        var global = __webpack_require__("e53d");

        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || (global[SHARED] = {});
        (module.exports = function (key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: core.version,
          mode: __webpack_require__("b8e3") ? 'pure' : 'global',
          copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
        });
        /***/
      },

      /***/
      "dc62":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("9427");

        var $Object = __webpack_require__("584a").Object;

        module.exports = function create(P, D) {
          return $Object.create(P, D);
        };
        /***/

      },

      /***/
      "e4ae":
      /***/
      function (module, exports, __webpack_require__) {
        var isObject = __webpack_require__("f772");

        module.exports = function (it) {
          if (!isObject(it)) throw TypeError(it + ' is not an object!');
          return it;
        };
        /***/

      },

      /***/
      "e53d":
      /***/
      function (module, exports) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
        : Function('return this')();
        if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

        /***/
      },

      /***/
      "e6f3":
      /***/
      function (module, exports, __webpack_require__) {
        var has = __webpack_require__("07e3");

        var toIObject = __webpack_require__("36c3");

        var arrayIndexOf = __webpack_require__("5b4e")(false);

        var IE_PROTO = __webpack_require__("5559")('IE_PROTO');

        module.exports = function (object, names) {
          var O = toIObject(object);
          var i = 0;
          var result = [];
          var key;

          for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // Don't enum bug & hidden keys


          while (names.length > i) if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }

          return result;
        };
        /***/

      },

      /***/
      "f410":
      /***/
      function (module, exports, __webpack_require__) {
        __webpack_require__("1af6");

        module.exports = __webpack_require__("584a").Array.isArray;
        /***/
      },

      /***/
      "f559":
      /***/
      function (module, exports, __webpack_require__) {
        // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
        var $export = __webpack_require__("5ca1");

        var toLength = __webpack_require__("9def");

        var context = __webpack_require__("d2c8");

        var STARTS_WITH = 'startsWith';
        var $startsWith = ''[STARTS_WITH];
        $export($export.P + $export.F * __webpack_require__("5147")(STARTS_WITH), 'String', {
          startsWith: function startsWith(searchString
          /* , position = 0 */
          ) {
            var that = context(this, searchString, STARTS_WITH);
            var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
            var search = String(searchString);
            return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
          }
        });
        /***/
      },

      /***/
      "f772":
      /***/
      function (module, exports) {
        module.exports = function (it) {
          return typeof it === 'object' ? it !== null : typeof it === 'function';
        };
        /***/

      },

      /***/
      "fa5b":
      /***/
      function (module, exports, __webpack_require__) {
        module.exports = __webpack_require__("5537")('native-function-to-string', Function.toString);
        /***/
      },

      /***/
      "fb15":
      /***/
      function (module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
        // This file is imported into lib/wc client bundles.


        if (typeof window !== 'undefined') {
          var setPublicPath_i;

          if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))) {
            __webpack_require__.p = setPublicPath_i[1]; // eslint-disable-line
          }
        } // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/object/assign.js


        var object_assign = __webpack_require__("5176");

        var assign_default =
        /*#__PURE__*/
        __webpack_require__.n(object_assign); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js


        var es6_string_starts_with = __webpack_require__("f559"); // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/object/keys.js


        var keys = __webpack_require__("a4bb");

        var keys_default =
        /*#__PURE__*/
        __webpack_require__.n(keys); // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js


        var is_array = __webpack_require__("a745");

        var is_array_default =
        /*#__PURE__*/
        __webpack_require__.n(is_array); // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithHoles.js


        function _arrayWithHoles(arr) {
          if (is_array_default()(arr)) return arr;
        } // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/get-iterator.js


        var get_iterator = __webpack_require__("5d73");

        var get_iterator_default =
        /*#__PURE__*/
        __webpack_require__.n(get_iterator); // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArrayLimit.js


        function _iterableToArrayLimit(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;

          try {
            for (var _i = get_iterator_default()(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);

              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }

          return _arr;
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableRest.js


        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js


        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
        } // EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js


        var es7_array_includes = __webpack_require__("6762"); // EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js


        var es6_string_includes = __webpack_require__("2fdb"); // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithoutHoles.js


        function _arrayWithoutHoles(arr) {
          if (is_array_default()(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
        } // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/array/from.js


        var from = __webpack_require__("774e");

        var from_default =
        /*#__PURE__*/
        __webpack_require__.n(from); // EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/is-iterable.js


        var is_iterable = __webpack_require__("c8bb");

        var is_iterable_default =
        /*#__PURE__*/
        __webpack_require__.n(is_iterable); // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArray.js


        function _iterableToArray(iter) {
          if (is_iterable_default()(Object(iter)) || Object.prototype.toString.call(iter) === "[object Arguments]") return from_default()(iter);
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableSpread.js


        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        } // CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js


        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
        } // EXTERNAL MODULE: external {"commonjs":"sortablejs","commonjs2":"sortablejs","amd":"sortablejs","root":"Sortable"}


        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_ = __webpack_require__("a352");

        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default =
        /*#__PURE__*/
        __webpack_require__.n(external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_); // EXTERNAL MODULE: ./src/util/helper.js


        var helper = __webpack_require__("c649"); // CONCATENATED MODULE: ./src/vuedraggable.js


        function buildAttribute(object, propName, value) {
          if (value === undefined) {
            return object;
          }

          object = object || {};
          object[propName] = value;
          return object;
        }

        function computeVmIndex(vnodes, element) {
          return vnodes.map(function (elt) {
            return elt.elm;
          }).indexOf(element);
        }

        function _computeIndexes(slots, children, isTransition, footerOffset) {
          if (!slots) {
            return [];
          }

          var elmFromNodes = slots.map(function (elt) {
            return elt.elm;
          });
          var footerIndex = children.length - footerOffset;

          var rawIndexes = _toConsumableArray(children).map(function (elt, idx) {
            return idx >= footerIndex ? elmFromNodes.length : elmFromNodes.indexOf(elt);
          });

          return isTransition ? rawIndexes.filter(function (ind) {
            return ind !== -1;
          }) : rawIndexes;
        }

        function emit(evtName, evtData) {
          var _this = this;

          this.$nextTick(function () {
            return _this.$emit(evtName.toLowerCase(), evtData);
          });
        }

        function delegateAndEmit(evtName) {
          var _this2 = this;

          return function (evtData) {
            if (_this2.realList !== null) {
              _this2["onDrag" + evtName](evtData);
            }

            emit.call(_this2, evtName, evtData);
          };
        }

        function isTransitionName(name) {
          return ["transition-group", "TransitionGroup"].includes(name);
        }

        function vuedraggable_isTransition(slots) {
          if (!slots || slots.length !== 1) {
            return false;
          }

          var _slots = _slicedToArray(slots, 1),
              componentOptions = _slots[0].componentOptions;

          if (!componentOptions) {
            return false;
          }

          return isTransitionName(componentOptions.tag);
        }

        function getSlot(slot, scopedSlot, key) {
          return slot[key] || (scopedSlot[key] ? scopedSlot[key]() : undefined);
        }

        function computeChildrenAndOffsets(children, slot, scopedSlot) {
          var headerOffset = 0;
          var footerOffset = 0;
          var header = getSlot(slot, scopedSlot, "header");

          if (header) {
            headerOffset = header.length;
            children = children ? [].concat(_toConsumableArray(header), _toConsumableArray(children)) : _toConsumableArray(header);
          }

          var footer = getSlot(slot, scopedSlot, "footer");

          if (footer) {
            footerOffset = footer.length;
            children = children ? [].concat(_toConsumableArray(children), _toConsumableArray(footer)) : _toConsumableArray(footer);
          }

          return {
            children: children,
            headerOffset: headerOffset,
            footerOffset: footerOffset
          };
        }

        function getComponentAttributes($attrs, componentData) {
          var attributes = null;

          var update = function update(name, value) {
            attributes = buildAttribute(attributes, name, value);
          };

          var attrs = keys_default()($attrs).filter(function (key) {
            return key === "id" || key.startsWith("data-");
          }).reduce(function (res, key) {
            res[key] = $attrs[key];
            return res;
          }, {});
          update("attrs", attrs);

          if (!componentData) {
            return attributes;
          }

          var on = componentData.on,
              props = componentData.props,
              componentDataAttrs = componentData.attrs;
          update("on", on);
          update("props", props);
          assign_default()(attributes.attrs, componentDataAttrs);
          return attributes;
        }

        var eventsListened = ["Start", "Add", "Remove", "Update", "End"];
        var eventsToEmit = ["Choose", "Unchoose", "Sort", "Filter", "Clone"];
        var readonlyProperties = ["Move"].concat(eventsListened, eventsToEmit).map(function (evt) {
          return "on" + evt;
        });
        var draggingElement = null;
        var vuedraggable_props = {
          options: Object,
          list: {
            type: Array,
            required: false,
            default: null
          },
          value: {
            type: Array,
            required: false,
            default: null
          },
          noTransitionOnDrag: {
            type: Boolean,
            default: false
          },
          clone: {
            type: Function,
            default: function _default(original) {
              return original;
            }
          },
          element: {
            type: String,
            default: "div"
          },
          tag: {
            type: String,
            default: null
          },
          move: {
            type: Function,
            default: null
          },
          componentData: {
            type: Object,
            required: false,
            default: null
          }
        };
        var draggableComponent = {
          name: "draggable",
          inheritAttrs: false,
          props: vuedraggable_props,
          data: function data() {
            return {
              transitionMode: false,
              noneFunctionalComponentMode: false
            };
          },
          render: function render(h) {
            var slots = this.$slots.default;
            this.transitionMode = vuedraggable_isTransition(slots);

            var _computeChildrenAndOf = computeChildrenAndOffsets(slots, this.$slots, this.$scopedSlots),
                children = _computeChildrenAndOf.children,
                headerOffset = _computeChildrenAndOf.headerOffset,
                footerOffset = _computeChildrenAndOf.footerOffset;

            this.headerOffset = headerOffset;
            this.footerOffset = footerOffset;
            var attributes = getComponentAttributes(this.$attrs, this.componentData);
            return h(this.getTag(), attributes, children);
          },
          created: function created() {
            if (this.list !== null && this.value !== null) {
              helper["b"
              /* console */
              ].error("Value and list props are mutually exclusive! Please set one or another.");
            }

            if (this.element !== "div") {
              helper["b"
              /* console */
              ].warn("Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props");
            }

            if (this.options !== undefined) {
              helper["b"
              /* console */
              ].warn("Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props");
            }
          },
          mounted: function mounted() {
            var _this3 = this;

            this.noneFunctionalComponentMode = this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() && !this.getIsFunctional();

            if (this.noneFunctionalComponentMode && this.transitionMode) {
              throw new Error("Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ".concat(this.getTag()));
            }

            var optionsAdded = {};
            eventsListened.forEach(function (elt) {
              optionsAdded["on" + elt] = delegateAndEmit.call(_this3, elt);
            });
            eventsToEmit.forEach(function (elt) {
              optionsAdded["on" + elt] = emit.bind(_this3, elt);
            });
            var attributes = keys_default()(this.$attrs).reduce(function (res, key) {
              res[Object(helper["a"
              /* camelize */
              ])(key)] = _this3.$attrs[key];
              return res;
            }, {});
            var options = assign_default()({}, this.options, attributes, optionsAdded, {
              onMove: function onMove(evt, originalEvent) {
                return _this3.onDragMove(evt, originalEvent);
              }
            });
            !("draggable" in options) && (options.draggable = ">*");
            this._sortable = new external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default.a(this.rootContainer, options);
            this.computeIndexes();
          },
          beforeDestroy: function beforeDestroy() {
            if (this._sortable !== undefined) this._sortable.destroy();
          },
          computed: {
            rootContainer: function rootContainer() {
              return this.transitionMode ? this.$el.children[0] : this.$el;
            },
            realList: function realList() {
              return this.list ? this.list : this.value;
            }
          },
          watch: {
            options: {
              handler: function handler(newOptionValue) {
                this.updateOptions(newOptionValue);
              },
              deep: true
            },
            $attrs: {
              handler: function handler(newOptionValue) {
                this.updateOptions(newOptionValue);
              },
              deep: true
            },
            realList: function realList() {
              this.computeIndexes();
            }
          },
          methods: {
            getIsFunctional: function getIsFunctional() {
              var fnOptions = this._vnode.fnOptions;
              return fnOptions && fnOptions.functional;
            },
            getTag: function getTag() {
              return this.tag || this.element;
            },
            updateOptions: function updateOptions(newOptionValue) {
              for (var property in newOptionValue) {
                var value = Object(helper["a"
                /* camelize */
                ])(property);

                if (readonlyProperties.indexOf(value) === -1) {
                  this._sortable.option(value, newOptionValue[property]);
                }
              }
            },
            getChildrenNodes: function getChildrenNodes() {
              if (this.noneFunctionalComponentMode) {
                return this.$children[0].$slots.default;
              }

              var rawNodes = this.$slots.default;
              return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;
            },
            computeIndexes: function computeIndexes() {
              var _this4 = this;

              this.$nextTick(function () {
                _this4.visibleIndexes = _computeIndexes(_this4.getChildrenNodes(), _this4.rootContainer.children, _this4.transitionMode, _this4.footerOffset);
              });
            },
            getUnderlyingVm: function getUnderlyingVm(htmlElt) {
              var index = computeVmIndex(this.getChildrenNodes() || [], htmlElt);

              if (index === -1) {
                //Edge case during move callback: related element might be
                //an element different from collection
                return null;
              }

              var element = this.realList[index];
              return {
                index: index,
                element: element
              };
            },
            getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(_ref) {
              var vue = _ref.__vue__;

              if (!vue || !vue.$options || !isTransitionName(vue.$options._componentTag)) {
                if (!("realList" in vue) && vue.$children.length === 1 && "realList" in vue.$children[0]) return vue.$children[0];
                return vue;
              }

              return vue.$parent;
            },
            emitChanges: function emitChanges(evt) {
              var _this5 = this;

              this.$nextTick(function () {
                _this5.$emit("change", evt);
              });
            },
            alterList: function alterList(onList) {
              if (this.list) {
                onList(this.list);
                return;
              }

              var newList = _toConsumableArray(this.value);

              onList(newList);
              this.$emit("input", newList);
            },
            spliceList: function spliceList() {
              var _arguments = arguments;

              var spliceList = function spliceList(list) {
                return list.splice.apply(list, _toConsumableArray(_arguments));
              };

              this.alterList(spliceList);
            },
            updatePosition: function updatePosition(oldIndex, newIndex) {
              var updatePosition = function updatePosition(list) {
                return list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);
              };

              this.alterList(updatePosition);
            },
            getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref2) {
              var to = _ref2.to,
                  related = _ref2.related;
              var component = this.getUnderlyingPotencialDraggableComponent(to);

              if (!component) {
                return {
                  component: component
                };
              }

              var list = component.realList;
              var context = {
                list: list,
                component: component
              };

              if (to !== related && list && component.getUnderlyingVm) {
                var destination = component.getUnderlyingVm(related);

                if (destination) {
                  return assign_default()(destination, context);
                }
              }

              return context;
            },
            getVmIndex: function getVmIndex(domIndex) {
              var indexes = this.visibleIndexes;
              var numberIndexes = indexes.length;
              return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];
            },
            getComponent: function getComponent() {
              return this.$slots.default[0].componentInstance;
            },
            resetTransitionData: function resetTransitionData(index) {
              if (!this.noTransitionOnDrag || !this.transitionMode) {
                return;
              }

              var nodes = this.getChildrenNodes();
              nodes[index].data = null;
              var transitionContainer = this.getComponent();
              transitionContainer.children = [];
              transitionContainer.kept = undefined;
            },
            onDragStart: function onDragStart(evt) {
              this.context = this.getUnderlyingVm(evt.item);
              evt.item._underlying_vm_ = this.clone(this.context.element);
              draggingElement = evt.item;
            },
            onDragAdd: function onDragAdd(evt) {
              var element = evt.item._underlying_vm_;

              if (element === undefined) {
                return;
              }

              Object(helper["d"
              /* removeNode */
              ])(evt.item);
              var newIndex = this.getVmIndex(evt.newIndex);
              this.spliceList(newIndex, 0, element);
              this.computeIndexes();
              var added = {
                element: element,
                newIndex: newIndex
              };
              this.emitChanges({
                added: added
              });
            },
            onDragRemove: function onDragRemove(evt) {
              Object(helper["c"
              /* insertNodeAt */
              ])(this.rootContainer, evt.item, evt.oldIndex);

              if (evt.pullMode === "clone") {
                Object(helper["d"
                /* removeNode */
                ])(evt.clone);
                return;
              }

              var oldIndex = this.context.index;
              this.spliceList(oldIndex, 1);
              var removed = {
                element: this.context.element,
                oldIndex: oldIndex
              };
              this.resetTransitionData(oldIndex);
              this.emitChanges({
                removed: removed
              });
            },
            onDragUpdate: function onDragUpdate(evt) {
              Object(helper["d"
              /* removeNode */
              ])(evt.item);
              Object(helper["c"
              /* insertNodeAt */
              ])(evt.from, evt.item, evt.oldIndex);
              var oldIndex = this.context.index;
              var newIndex = this.getVmIndex(evt.newIndex);
              this.updatePosition(oldIndex, newIndex);
              var moved = {
                element: this.context.element,
                oldIndex: oldIndex,
                newIndex: newIndex
              };
              this.emitChanges({
                moved: moved
              });
            },
            updateProperty: function updateProperty(evt, propertyName) {
              evt.hasOwnProperty(propertyName) && (evt[propertyName] += this.headerOffset);
            },
            computeFutureIndex: function computeFutureIndex(relatedContext, evt) {
              if (!relatedContext.element) {
                return 0;
              }

              var domChildren = _toConsumableArray(evt.to.children).filter(function (el) {
                return el.style["display"] !== "none";
              });

              var currentDOMIndex = domChildren.indexOf(evt.related);
              var currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);
              var draggedInList = domChildren.indexOf(draggingElement) !== -1;
              return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;
            },
            onDragMove: function onDragMove(evt, originalEvent) {
              var onMove = this.move;

              if (!onMove || !this.realList) {
                return true;
              }

              var relatedContext = this.getRelatedContextFromMoveEvent(evt);
              var draggedContext = this.context;
              var futureIndex = this.computeFutureIndex(relatedContext, evt);
              assign_default()(draggedContext, {
                futureIndex: futureIndex
              });
              var sendEvt = assign_default()({}, evt, {
                relatedContext: relatedContext,
                draggedContext: draggedContext
              });
              return onMove(sendEvt, originalEvent);
            },
            onDragEnd: function onDragEnd() {
              this.computeIndexes();
              draggingElement = null;
            }
          }
        };

        if (typeof window !== "undefined" && "Vue" in window) {
          window.Vue.component("draggable", draggableComponent);
        }
        /* harmony default export */


        var vuedraggable = draggableComponent; // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

        /* harmony default export */

        var entry_lib = __webpack_exports__["default"] = vuedraggable;
        /***/
      }
      /******/

    })["default"];
  });
  var draggable = unwrapExports(vuedraggable_common);

  function isStartWith(line, chara) {
    return line.trim().indexOf(chara) === 0;
  }

  function isHeading(line) {
    return isStartWith(line, "#");
  }

  function isList(line) {
    return isStartWith(line, "-") || isStartWith(line, "*");
  }

  function removeMarkup(line, chara) {
    return line.trim().replace(chara, "").trim();
  }

  function compileKanban(input) {
    var lines = input.split(/[\r|\n|\r\n]/);
    var output = [];
    var cards = [];
    lines.forEach(function (line) {
      if (isHeading(line)) {
        cards = [];
        output.push({
          name: removeMarkup(line, "#"),
          cards: cards
        });
      } else if (isList(line)) {
        cards.push(removeMarkup(removeMarkup(line, "-"), "*"));
      }
    });
    return output;
  }

  function cardsToString(cards) {
    return cards.map(toList).join("\n");
  }

  function toList(card) {
    return "- " + card;
  }

  function serializeKanban(data) {
    return data.map(function (item) {
      return "# ".concat(item.name, "\n").concat(cardsToString(item.cards));
    }).join("\n\n") + "\n";
  } //


  var md$1 = new markdownIt();
  var script$1 = {
    props: {
      input: String
    },
    data: function data() {
      return {
        compiled: [],
        editingText: "",
        editing: false,
        editingCol: 0,
        editingIndex: 0
      };
    },
    watch: {
      input: function input() {
        this.compiled = compileKanban(this.input);
      }
    },
    computed: {
      output: function output() {
        this.compiled.join();
      }
    },
    components: {
      draggable: draggable
    },
    mounted: function mounted() {
      this.compiled = compileKanban(this.input);
    },
    methods: {
      onEnd: function onEnd() {
        this.$emit("change", serializeKanban(this.compiled));
      },
      startEditing: function startEditing(col, row) {
        var _this = this;

        var oldData = this.compiled[col].cards[row];
        this.editingCol = col;
        this.editingIndex = row;
        this.editingText = oldData;
        this.editing = true;
        this.$nextTick(function () {
          var el = _this.$el.querySelector(".kanban__row__input");

          if (el) {
            el.focus();
          }
        });
      },
      endEditing: function endEditing(col, row) {
        this.editing = false;

        if (this.editingText === "") {
          // this.$nextTick(()=>{
          this.removeTask(col, row); // })
        } else {
          this.$set(this.compiled[col].cards, row, this.editingText);
          this.$emit("change", serializeKanban(this.compiled));
        }
      },
      endEditingAndNew: function endEditingAndNew(col, row) {
        var _this2 = this;

        this.endEditing(col, row);
        this.$nextTick(function () {
          _this2.addTask(col);
        });
      },
      addTask: function addTask(col) {
        this.compiled[col].cards.push("");
        this.startEditing(col, this.compiled[col].cards.length - 1);
      },
      removeTask: function removeTask(col, row) {
        var oldData = this.compiled[col].cards[row];
        this.$delete(this.compiled[col].cards, row);
        this.$emit("change", serializeKanban(this.compiled));
      },
      editTitle: function editTitle(col) {
        var listName = window.prompt("リスト名を変更", this.compiled[col].name);

        if (listName) {
          this.compiled[col].name = listName;
          this.$emit("change", serializeKanban(this.compiled));
        }
      }
    }
  };
  var css_248z$1 = ".draggable--max{flex:1}.kanban{display:flex;margin:0 -.5rem}.kanban__col{flex:1;margin:.5rem;padding:.5rem;background:#f5f5f5;text-align:center;position:relative}.kanban__col-title{font-size:.8rem;font-weight:900;color:#888;cursor:pointer}.kanban__row:hover>.kanban__row__remove{display:block}.kanban__col__add{position:absolute;top:6px;right:8px;width:20px;height:20px;background:#fff;border-radius:2px;color:#a5e487;cursor:pointer}.kanban__row__remove{display:none;position:absolute;top:8px;right:4px;width:20px;height:20px;background:rgba(255,255,255,.9);border-radius:2px;color:#888;cursor:pointer;text-align:center;line-height:20px}.kanban__row{margin:.5rem 0;padding:.5rem;text-align:left;background:#fff;box-shadow:0 2px 5px 0 rgba(0,0,0,.16),0 2px 10px 0 rgba(0,0,0,.12);cursor:pointer;border-radius:2px;line-height:1.6rem;word-break:break-all;position:relative}.kanban__row__input{font-size:1rem;font-family:inherit;width:100%}.kanban__row__label{min-height:1.5rem}.kanban__wrapper{min-height:10rem;display:flex;flex-direction:column}";
  styleInject(css_248z$1);
  /* script */

  var __vue_script__$1 = script$1;
  /* template */

  var __vue_render__$1 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      staticClass: "kanban"
    }, _vm._l(_vm.compiled, function (col, colIndex) {
      return _c('div', {
        key: colIndex,
        staticClass: "kanban__col"
      }, [_c('div', {
        staticClass: "kanban__col__add",
        on: {
          "click": function click($event) {
            return _vm.addTask(colIndex);
          }
        }
      }, [_vm._v("+")]), _vm._v(" "), _c('div', {
        staticClass: "kanban__col-title",
        on: {
          "dblclick": function dblclick($event) {
            return _vm.editTitle(colIndex);
          }
        }
      }, [_vm._v(_vm._s(col.name))]), _vm._v(" "), _c('div', {
        staticClass: "kanban__wrapper"
      }, [_c('draggable', {
        staticClass: "draggable--max",
        attrs: {
          "options": {
            group: 'everykanban'
          }
        },
        on: {
          "change": _vm.onEnd
        },
        model: {
          value: col.cards,
          callback: function callback($$v) {
            _vm.$set(col, "cards", $$v);
          },
          expression: "col.cards"
        }
      }, _vm._l(col.cards, function (card, index) {
        return _c('div', {
          key: index,
          staticClass: "kanban__row",
          attrs: {
            "track-by": "index"
          },
          on: {
            "dblclick": function dblclick($event) {
              return _vm.startEditing(colIndex, index);
            }
          }
        }, [_c('div', {
          staticClass: "kanban__row__remove",
          on: {
            "click": function click($event) {
              return _vm.removeTask(colIndex, index);
            }
          }
        }, [_vm._v("×")]), _vm._v(" "), !(_vm.editing && _vm.editingCol === colIndex && _vm.editingIndex === index) ? _c('div', {
          staticClass: "kanban__row__label",
          domProps: {
            "textContent": _vm._s(card)
          }
        }) : _vm._e(), _vm._v(" "), _vm.editing && _vm.editingCol === colIndex && _vm.editingIndex === index ? _c('form', {
          staticStyle: {
            "margin": "0"
          },
          on: {
            "submit": function submit($event) {
              $event.preventDefault();
              return _vm.endEditingAndNew(colIndex, index);
            }
          }
        }, [_c('input', {
          directives: [{
            name: "model",
            rawName: "v-model",
            value: _vm.editingText,
            expression: "editingText"
          }],
          staticClass: "kanban__row__input",
          domProps: {
            "value": _vm.editingText
          },
          on: {
            "blur": function blur($event) {
              return _vm.endEditing(colIndex, index);
            },
            "input": function input($event) {
              if ($event.target.composing) {
                return;
              }

              _vm.editingText = $event.target.value;
            }
          }
        })]) : _vm._e()]);
      }), 0)], 1)]);
    }), 0);
  };

  var __vue_staticRenderFns__$1 = [];
  /* style */

  var __vue_inject_styles__$1 = undefined;
  /* scoped */

  var __vue_scope_id__$1 = undefined;
  /* module identifier */

  var __vue_module_identifier__$1 = undefined;
  /* functional template */

  var __vue_is_functional_template__$1 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$1 = normalizeComponent({
    render: __vue_render__$1,
    staticRenderFns: __vue_staticRenderFns__$1
  }, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);

  var holiday_jp = createCommonjsModule(function (module) {
    (function () {
      var holiday_jp =
      /******/
      function (modules) {
        // webpackBootstrap

        /******/
        // The module cache

        /******/
        var installedModules = {};
        /******/

        /******/
        // The require function

        /******/

        function __webpack_require__(moduleId) {
          /******/

          /******/
          // Check if module is in cache

          /******/
          if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
          }
          /******/
          // Create a new module (and put it into the cache)

          /******/


          var module = installedModules[moduleId] = {
            /******/
            i: moduleId,

            /******/
            l: false,

            /******/
            exports: {}
            /******/

          };
          /******/

          /******/
          // Execute the module function

          /******/

          modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
          /******/

          /******/
          // Flag the module as loaded

          /******/

          module.l = true;
          /******/

          /******/
          // Return the exports of the module

          /******/

          return module.exports;
          /******/
        }
        /******/

        /******/

        /******/
        // expose the modules object (__webpack_modules__)

        /******/


        __webpack_require__.m = modules;
        /******/

        /******/
        // expose the module cache

        /******/

        __webpack_require__.c = installedModules;
        /******/

        /******/
        // define getter function for harmony exports

        /******/

        __webpack_require__.d = function (exports, name, getter) {
          /******/
          if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
              enumerable: true,
              get: getter
            });
            /******/
          }
          /******/

        };
        /******/

        /******/
        // define __esModule on exports

        /******/


        __webpack_require__.r = function (exports) {
          /******/
          if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/
            Object.defineProperty(exports, Symbol.toStringTag, {
              value: 'Module'
            });
            /******/
          }
          /******/


          Object.defineProperty(exports, '__esModule', {
            value: true
          });
          /******/
        };
        /******/

        /******/
        // create a fake namespace object

        /******/
        // mode & 1: value is a module id, require it

        /******/
        // mode & 2: merge all properties of value into the ns

        /******/
        // mode & 4: return value when already ns object

        /******/
        // mode & 8|1: behave like require

        /******/


        __webpack_require__.t = function (value, mode) {
          /******/
          if (mode & 1) value = __webpack_require__(value);
          /******/

          if (mode & 8) return value;
          /******/

          if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
          /******/

          var ns = Object.create(null);
          /******/

          __webpack_require__.r(ns);
          /******/


          Object.defineProperty(ns, 'default', {
            enumerable: true,
            value: value
          });
          /******/

          if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
          /******/

          return ns;
          /******/
        };
        /******/

        /******/
        // getDefaultExport function for compatibility with non-harmony modules

        /******/


        __webpack_require__.n = function (module) {
          /******/
          var getter = module && module.__esModule ?
          /******/
          function getDefault() {
            return module['default'];
          } :
          /******/
          function getModuleExports() {
            return module;
          };
          /******/

          __webpack_require__.d(getter, 'a', getter);
          /******/


          return getter;
          /******/
        };
        /******/

        /******/
        // Object.prototype.hasOwnProperty.call

        /******/


        __webpack_require__.o = function (object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/

        /******/
        // __webpack_public_path__

        /******/


        __webpack_require__.p = "";
        /******/

        /******/

        /******/
        // Load entry module and return exports

        /******/

        return __webpack_require__(__webpack_require__.s = "./lib/holiday_jp.js");
        /******/
      }(
      /************************************************************************/

      /******/
      {
        /***/
        "./lib/holiday_jp.js":
        /*!***************************!*\
          !*** ./lib/holiday_jp.js ***!
          \***************************/

        /*! no static exports found */

        /***/
        function (module, exports, __webpack_require__) {
          eval("var package_info = __webpack_require__(/*! ./../package.json */ \"./package.json\");\nvar holidays = __webpack_require__(/*! ./holidays */ \"./lib/holidays.js\");\n\nfunction format(date) {\n  var year = date.getFullYear();\n  var month = ('0' + (date.getMonth() + 1)).slice(-2);\n  var day = ('0' + (date.getDate())).slice(-2);\n  return (year + '-' + month + '-' + day);\n}\n\nvar holiday_jp = {\n  VERSION: package_info.version,\n  between: function(start, last) {\n    var selected = [];\n    var d;\n    start = new Date(format(start));\n    last = new Date(format(last));\n    Object.keys(holidays).forEach(function (date) {\n      d = new Date(holidays[date]['date']);\n      if (start <= d && d <= last) {\n        holidays[date]['date'] = d;\n        selected.push(holidays[date]);\n      }\n    });\n    return selected;\n  },\n\n  isHoliday: function(date) {\n    if (date instanceof Date) {\n      date = format(date);\n    }\n    if (holidays[date]) {\n      return true;\n    }\n    return false;\n  }\n};\n\nmodule.exports = holiday_jp;\n\n\n//# sourceURL=webpack:///./lib/holiday_jp.js?");
          /***/
        },

        /***/
        "./lib/holidays.js":
        /*!*************************!*\
          !*** ./lib/holidays.js ***!
          \*************************/

        /*! no static exports found */

        /***/
        function (module, exports) {
          eval("// Generated from holidays.yml at 2019-02-17 19:24:18;\nvar holidays = {};\nholidays['1970-01-01'] = {\n  'date': '1970-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1970-01-15'] = {\n  'date': '1970-01-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1970-02-11'] = {\n  'date': '1970-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1970-03-21'] = {\n  'date': '1970-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1970-04-29'] = {\n  'date': '1970-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1970-05-03'] = {\n  'date': '1970-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1970-05-05'] = {\n  'date': '1970-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1970-09-15'] = {\n  'date': '1970-09-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1970-09-23'] = {\n  'date': '1970-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1970-10-10'] = {\n  'date': '1970-10-10',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1970-11-03'] = {\n  'date': '1970-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1970-11-23'] = {\n  'date': '1970-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1971-01-01'] = {\n  'date': '1971-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1971-01-15'] = {\n  'date': '1971-01-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1971-02-11'] = {\n  'date': '1971-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1971-03-21'] = {\n  'date': '1971-03-21',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1971-04-29'] = {\n  'date': '1971-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1971-05-03'] = {\n  'date': '1971-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1971-05-05'] = {\n  'date': '1971-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1971-09-15'] = {\n  'date': '1971-09-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1971-09-24'] = {\n  'date': '1971-09-24',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1971-10-10'] = {\n  'date': '1971-10-10',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1971-11-03'] = {\n  'date': '1971-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1971-11-23'] = {\n  'date': '1971-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1972-01-01'] = {\n  'date': '1972-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1972-01-15'] = {\n  'date': '1972-01-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1972-02-11'] = {\n  'date': '1972-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1972-03-20'] = {\n  'date': '1972-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1972-04-29'] = {\n  'date': '1972-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1972-05-03'] = {\n  'date': '1972-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1972-05-05'] = {\n  'date': '1972-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1972-09-15'] = {\n  'date': '1972-09-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1972-09-23'] = {\n  'date': '1972-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1972-10-10'] = {\n  'date': '1972-10-10',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1972-11-03'] = {\n  'date': '1972-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1972-11-23'] = {\n  'date': '1972-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1973-01-01'] = {\n  'date': '1973-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1973-01-15'] = {\n  'date': '1973-01-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1973-02-11'] = {\n  'date': '1973-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1973-03-21'] = {\n  'date': '1973-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1973-04-29'] = {\n  'date': '1973-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1973-04-30'] = {\n  'date': '1973-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1973-05-03'] = {\n  'date': '1973-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1973-05-05'] = {\n  'date': '1973-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1973-09-15'] = {\n  'date': '1973-09-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1973-09-23'] = {\n  'date': '1973-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1973-09-24'] = {\n  'date': '1973-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1973-10-10'] = {\n  'date': '1973-10-10',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1973-11-03'] = {\n  'date': '1973-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1973-11-23'] = {\n  'date': '1973-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1974-01-01'] = {\n  'date': '1974-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1974-01-15'] = {\n  'date': '1974-01-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1974-02-11'] = {\n  'date': '1974-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1974-03-21'] = {\n  'date': '1974-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1974-04-29'] = {\n  'date': '1974-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1974-05-03'] = {\n  'date': '1974-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1974-05-05'] = {\n  'date': '1974-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1974-05-06'] = {\n  'date': '1974-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1974-09-15'] = {\n  'date': '1974-09-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1974-09-16'] = {\n  'date': '1974-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1974-09-23'] = {\n  'date': '1974-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1974-10-10'] = {\n  'date': '1974-10-10',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1974-11-03'] = {\n  'date': '1974-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1974-11-04'] = {\n  'date': '1974-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1974-11-23'] = {\n  'date': '1974-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1975-01-01'] = {\n  'date': '1975-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1975-01-15'] = {\n  'date': '1975-01-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1975-02-11'] = {\n  'date': '1975-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1975-03-21'] = {\n  'date': '1975-03-21',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1975-04-29'] = {\n  'date': '1975-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1975-05-03'] = {\n  'date': '1975-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1975-05-05'] = {\n  'date': '1975-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1975-09-15'] = {\n  'date': '1975-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1975-09-24'] = {\n  'date': '1975-09-24',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1975-10-10'] = {\n  'date': '1975-10-10',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1975-11-03'] = {\n  'date': '1975-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1975-11-23'] = {\n  'date': '1975-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1975-11-24'] = {\n  'date': '1975-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1976-01-01'] = {\n  'date': '1976-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1976-01-15'] = {\n  'date': '1976-01-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1976-02-11'] = {\n  'date': '1976-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1976-03-20'] = {\n  'date': '1976-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1976-04-29'] = {\n  'date': '1976-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1976-05-03'] = {\n  'date': '1976-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1976-05-05'] = {\n  'date': '1976-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1976-09-15'] = {\n  'date': '1976-09-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1976-09-23'] = {\n  'date': '1976-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1976-10-10'] = {\n  'date': '1976-10-10',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1976-10-11'] = {\n  'date': '1976-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1976-11-03'] = {\n  'date': '1976-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1976-11-23'] = {\n  'date': '1976-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1977-01-01'] = {\n  'date': '1977-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1977-01-15'] = {\n  'date': '1977-01-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1977-02-11'] = {\n  'date': '1977-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1977-03-21'] = {\n  'date': '1977-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1977-04-29'] = {\n  'date': '1977-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1977-05-03'] = {\n  'date': '1977-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1977-05-05'] = {\n  'date': '1977-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1977-09-15'] = {\n  'date': '1977-09-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1977-09-23'] = {\n  'date': '1977-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1977-10-10'] = {\n  'date': '1977-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1977-11-03'] = {\n  'date': '1977-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1977-11-23'] = {\n  'date': '1977-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1978-01-01'] = {\n  'date': '1978-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1978-01-02'] = {\n  'date': '1978-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1978-01-15'] = {\n  'date': '1978-01-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1978-01-16'] = {\n  'date': '1978-01-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1978-02-11'] = {\n  'date': '1978-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1978-03-21'] = {\n  'date': '1978-03-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1978-04-29'] = {\n  'date': '1978-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1978-05-03'] = {\n  'date': '1978-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1978-05-05'] = {\n  'date': '1978-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1978-09-15'] = {\n  'date': '1978-09-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1978-09-23'] = {\n  'date': '1978-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1978-10-10'] = {\n  'date': '1978-10-10',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1978-11-03'] = {\n  'date': '1978-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1978-11-23'] = {\n  'date': '1978-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1979-01-01'] = {\n  'date': '1979-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1979-01-15'] = {\n  'date': '1979-01-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1979-02-11'] = {\n  'date': '1979-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1979-02-12'] = {\n  'date': '1979-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1979-03-21'] = {\n  'date': '1979-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1979-04-29'] = {\n  'date': '1979-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1979-04-30'] = {\n  'date': '1979-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1979-05-03'] = {\n  'date': '1979-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1979-05-05'] = {\n  'date': '1979-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1979-09-15'] = {\n  'date': '1979-09-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1979-09-24'] = {\n  'date': '1979-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1979-10-10'] = {\n  'date': '1979-10-10',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1979-11-03'] = {\n  'date': '1979-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1979-11-23'] = {\n  'date': '1979-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1980-01-01'] = {\n  'date': '1980-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1980-01-15'] = {\n  'date': '1980-01-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1980-02-11'] = {\n  'date': '1980-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1980-03-20'] = {\n  'date': '1980-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1980-04-29'] = {\n  'date': '1980-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1980-05-03'] = {\n  'date': '1980-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1980-05-05'] = {\n  'date': '1980-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1980-09-15'] = {\n  'date': '1980-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1980-09-23'] = {\n  'date': '1980-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1980-10-10'] = {\n  'date': '1980-10-10',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1980-11-03'] = {\n  'date': '1980-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1980-11-23'] = {\n  'date': '1980-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1980-11-24'] = {\n  'date': '1980-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1981-01-01'] = {\n  'date': '1981-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1981-01-15'] = {\n  'date': '1981-01-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1981-02-11'] = {\n  'date': '1981-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1981-03-21'] = {\n  'date': '1981-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1981-04-29'] = {\n  'date': '1981-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1981-05-03'] = {\n  'date': '1981-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1981-05-04'] = {\n  'date': '1981-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1981-05-05'] = {\n  'date': '1981-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1981-09-15'] = {\n  'date': '1981-09-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1981-09-23'] = {\n  'date': '1981-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1981-10-10'] = {\n  'date': '1981-10-10',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1981-11-03'] = {\n  'date': '1981-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1981-11-23'] = {\n  'date': '1981-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1982-01-01'] = {\n  'date': '1982-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1982-01-15'] = {\n  'date': '1982-01-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1982-02-11'] = {\n  'date': '1982-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1982-03-21'] = {\n  'date': '1982-03-21',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1982-03-22'] = {\n  'date': '1982-03-22',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1982-04-29'] = {\n  'date': '1982-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1982-05-03'] = {\n  'date': '1982-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1982-05-05'] = {\n  'date': '1982-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1982-09-15'] = {\n  'date': '1982-09-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1982-09-23'] = {\n  'date': '1982-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1982-10-10'] = {\n  'date': '1982-10-10',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1982-10-11'] = {\n  'date': '1982-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1982-11-03'] = {\n  'date': '1982-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1982-11-23'] = {\n  'date': '1982-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1983-01-01'] = {\n  'date': '1983-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1983-01-15'] = {\n  'date': '1983-01-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1983-02-11'] = {\n  'date': '1983-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1983-03-21'] = {\n  'date': '1983-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1983-04-29'] = {\n  'date': '1983-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1983-05-03'] = {\n  'date': '1983-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1983-05-05'] = {\n  'date': '1983-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1983-09-15'] = {\n  'date': '1983-09-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1983-09-23'] = {\n  'date': '1983-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1983-10-10'] = {\n  'date': '1983-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1983-11-03'] = {\n  'date': '1983-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1983-11-23'] = {\n  'date': '1983-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1984-01-01'] = {\n  'date': '1984-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1984-01-02'] = {\n  'date': '1984-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1984-01-15'] = {\n  'date': '1984-01-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1984-01-16'] = {\n  'date': '1984-01-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1984-02-11'] = {\n  'date': '1984-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1984-03-20'] = {\n  'date': '1984-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1984-04-29'] = {\n  'date': '1984-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1984-04-30'] = {\n  'date': '1984-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1984-05-03'] = {\n  'date': '1984-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1984-05-05'] = {\n  'date': '1984-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1984-09-15'] = {\n  'date': '1984-09-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1984-09-23'] = {\n  'date': '1984-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1984-09-24'] = {\n  'date': '1984-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1984-10-10'] = {\n  'date': '1984-10-10',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1984-11-03'] = {\n  'date': '1984-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1984-11-23'] = {\n  'date': '1984-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1985-01-01'] = {\n  'date': '1985-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1985-01-15'] = {\n  'date': '1985-01-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1985-02-11'] = {\n  'date': '1985-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1985-03-21'] = {\n  'date': '1985-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1985-04-29'] = {\n  'date': '1985-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1985-05-03'] = {\n  'date': '1985-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1985-05-05'] = {\n  'date': '1985-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1985-05-06'] = {\n  'date': '1985-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1985-09-15'] = {\n  'date': '1985-09-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1985-09-16'] = {\n  'date': '1985-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1985-09-23'] = {\n  'date': '1985-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1985-10-10'] = {\n  'date': '1985-10-10',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1985-11-03'] = {\n  'date': '1985-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1985-11-04'] = {\n  'date': '1985-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1985-11-23'] = {\n  'date': '1985-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1986-01-01'] = {\n  'date': '1986-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1986-01-15'] = {\n  'date': '1986-01-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1986-02-11'] = {\n  'date': '1986-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1986-03-21'] = {\n  'date': '1986-03-21',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1986-04-29'] = {\n  'date': '1986-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1986-05-03'] = {\n  'date': '1986-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1986-05-05'] = {\n  'date': '1986-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1986-09-15'] = {\n  'date': '1986-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1986-09-23'] = {\n  'date': '1986-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1986-10-10'] = {\n  'date': '1986-10-10',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1986-11-03'] = {\n  'date': '1986-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1986-11-23'] = {\n  'date': '1986-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1986-11-24'] = {\n  'date': '1986-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1987-01-01'] = {\n  'date': '1987-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1987-01-15'] = {\n  'date': '1987-01-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1987-02-11'] = {\n  'date': '1987-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1987-03-21'] = {\n  'date': '1987-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1987-04-29'] = {\n  'date': '1987-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1987-05-03'] = {\n  'date': '1987-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1987-05-04'] = {\n  'date': '1987-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1987-05-05'] = {\n  'date': '1987-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1987-09-15'] = {\n  'date': '1987-09-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1987-09-23'] = {\n  'date': '1987-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1987-10-10'] = {\n  'date': '1987-10-10',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1987-11-03'] = {\n  'date': '1987-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1987-11-23'] = {\n  'date': '1987-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1988-01-01'] = {\n  'date': '1988-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1988-01-15'] = {\n  'date': '1988-01-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1988-02-11'] = {\n  'date': '1988-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1988-03-20'] = {\n  'date': '1988-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1988-03-21'] = {\n  'date': '1988-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1988-04-29'] = {\n  'date': '1988-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1988-05-03'] = {\n  'date': '1988-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1988-05-04'] = {\n  'date': '1988-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1988-05-05'] = {\n  'date': '1988-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1988-09-15'] = {\n  'date': '1988-09-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1988-09-23'] = {\n  'date': '1988-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1988-10-10'] = {\n  'date': '1988-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1988-11-03'] = {\n  'date': '1988-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1988-11-23'] = {\n  'date': '1988-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1989-01-01'] = {\n  'date': '1989-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1989-01-02'] = {\n  'date': '1989-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1989-01-15'] = {\n  'date': '1989-01-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1989-01-16'] = {\n  'date': '1989-01-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1989-02-11'] = {\n  'date': '1989-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1989-02-24'] = {\n  'date': '1989-02-24',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和天皇の大喪の礼',\n  'name_en': \"The Funeral Ceremony of Emperor Showa.\"\n};\nholidays['1989-03-21'] = {\n  'date': '1989-03-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1989-04-29'] = {\n  'date': '1989-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1989-05-03'] = {\n  'date': '1989-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1989-05-04'] = {\n  'date': '1989-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1989-05-05'] = {\n  'date': '1989-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1989-09-15'] = {\n  'date': '1989-09-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1989-09-23'] = {\n  'date': '1989-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1989-10-10'] = {\n  'date': '1989-10-10',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1989-11-03'] = {\n  'date': '1989-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1989-11-23'] = {\n  'date': '1989-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1989-12-23'] = {\n  'date': '1989-12-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1990-01-01'] = {\n  'date': '1990-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1990-01-15'] = {\n  'date': '1990-01-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1990-02-11'] = {\n  'date': '1990-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1990-02-12'] = {\n  'date': '1990-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1990-03-21'] = {\n  'date': '1990-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1990-04-29'] = {\n  'date': '1990-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1990-04-30'] = {\n  'date': '1990-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1990-05-03'] = {\n  'date': '1990-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1990-05-04'] = {\n  'date': '1990-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1990-05-05'] = {\n  'date': '1990-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1990-09-15'] = {\n  'date': '1990-09-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1990-09-23'] = {\n  'date': '1990-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1990-09-24'] = {\n  'date': '1990-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1990-10-10'] = {\n  'date': '1990-10-10',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1990-11-03'] = {\n  'date': '1990-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1990-11-12'] = {\n  'date': '1990-11-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '即位礼正殿の儀',\n  'name_en': \"The Ceremony of the Enthronement of His Majesty the Emperor (at the Seiden)\"\n};\nholidays['1990-11-23'] = {\n  'date': '1990-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1990-12-23'] = {\n  'date': '1990-12-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1990-12-24'] = {\n  'date': '1990-12-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1991-01-01'] = {\n  'date': '1991-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1991-01-15'] = {\n  'date': '1991-01-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1991-02-11'] = {\n  'date': '1991-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1991-03-21'] = {\n  'date': '1991-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1991-04-29'] = {\n  'date': '1991-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1991-05-03'] = {\n  'date': '1991-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1991-05-04'] = {\n  'date': '1991-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1991-05-05'] = {\n  'date': '1991-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1991-05-06'] = {\n  'date': '1991-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1991-09-15'] = {\n  'date': '1991-09-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1991-09-16'] = {\n  'date': '1991-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1991-09-23'] = {\n  'date': '1991-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1991-10-10'] = {\n  'date': '1991-10-10',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1991-11-03'] = {\n  'date': '1991-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1991-11-04'] = {\n  'date': '1991-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1991-11-23'] = {\n  'date': '1991-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1991-12-23'] = {\n  'date': '1991-12-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1992-01-01'] = {\n  'date': '1992-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1992-01-15'] = {\n  'date': '1992-01-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1992-02-11'] = {\n  'date': '1992-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1992-03-20'] = {\n  'date': '1992-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1992-04-29'] = {\n  'date': '1992-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1992-05-03'] = {\n  'date': '1992-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1992-05-04'] = {\n  'date': '1992-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1992-05-05'] = {\n  'date': '1992-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1992-09-15'] = {\n  'date': '1992-09-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1992-09-23'] = {\n  'date': '1992-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1992-10-10'] = {\n  'date': '1992-10-10',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1992-11-03'] = {\n  'date': '1992-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1992-11-23'] = {\n  'date': '1992-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1992-12-23'] = {\n  'date': '1992-12-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1993-01-01'] = {\n  'date': '1993-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1993-01-15'] = {\n  'date': '1993-01-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1993-02-11'] = {\n  'date': '1993-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1993-03-20'] = {\n  'date': '1993-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1993-04-29'] = {\n  'date': '1993-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1993-05-03'] = {\n  'date': '1993-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1993-05-04'] = {\n  'date': '1993-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1993-05-05'] = {\n  'date': '1993-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1993-06-09'] = {\n  'date': '1993-06-09',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '皇太子徳仁親王の結婚の儀',\n  'name_en': \"The Rite of Wedding of HIH Crown Prince Naruhito\"\n};\nholidays['1993-09-15'] = {\n  'date': '1993-09-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1993-09-23'] = {\n  'date': '1993-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1993-10-10'] = {\n  'date': '1993-10-10',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1993-10-11'] = {\n  'date': '1993-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1993-11-03'] = {\n  'date': '1993-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1993-11-23'] = {\n  'date': '1993-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1993-12-23'] = {\n  'date': '1993-12-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1994-01-01'] = {\n  'date': '1994-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1994-01-15'] = {\n  'date': '1994-01-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1994-02-11'] = {\n  'date': '1994-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1994-03-21'] = {\n  'date': '1994-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1994-04-29'] = {\n  'date': '1994-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1994-05-03'] = {\n  'date': '1994-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1994-05-04'] = {\n  'date': '1994-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1994-05-05'] = {\n  'date': '1994-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1994-09-15'] = {\n  'date': '1994-09-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1994-09-23'] = {\n  'date': '1994-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1994-10-10'] = {\n  'date': '1994-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1994-11-03'] = {\n  'date': '1994-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1994-11-23'] = {\n  'date': '1994-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1994-12-23'] = {\n  'date': '1994-12-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1995-01-01'] = {\n  'date': '1995-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1995-01-02'] = {\n  'date': '1995-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1995-01-15'] = {\n  'date': '1995-01-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1995-01-16'] = {\n  'date': '1995-01-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1995-02-11'] = {\n  'date': '1995-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1995-03-21'] = {\n  'date': '1995-03-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1995-04-29'] = {\n  'date': '1995-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1995-05-03'] = {\n  'date': '1995-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1995-05-04'] = {\n  'date': '1995-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1995-05-05'] = {\n  'date': '1995-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1995-09-15'] = {\n  'date': '1995-09-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1995-09-23'] = {\n  'date': '1995-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1995-10-10'] = {\n  'date': '1995-10-10',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1995-11-03'] = {\n  'date': '1995-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1995-11-23'] = {\n  'date': '1995-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1995-12-23'] = {\n  'date': '1995-12-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1996-01-01'] = {\n  'date': '1996-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1996-01-15'] = {\n  'date': '1996-01-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1996-02-11'] = {\n  'date': '1996-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1996-02-12'] = {\n  'date': '1996-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1996-03-20'] = {\n  'date': '1996-03-20',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1996-04-29'] = {\n  'date': '1996-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1996-05-03'] = {\n  'date': '1996-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1996-05-04'] = {\n  'date': '1996-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1996-05-05'] = {\n  'date': '1996-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1996-05-06'] = {\n  'date': '1996-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1996-07-20'] = {\n  'date': '1996-07-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['1996-09-15'] = {\n  'date': '1996-09-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1996-09-16'] = {\n  'date': '1996-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1996-09-23'] = {\n  'date': '1996-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1996-10-10'] = {\n  'date': '1996-10-10',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1996-11-03'] = {\n  'date': '1996-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1996-11-04'] = {\n  'date': '1996-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1996-11-23'] = {\n  'date': '1996-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1996-12-23'] = {\n  'date': '1996-12-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1997-01-01'] = {\n  'date': '1997-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1997-01-15'] = {\n  'date': '1997-01-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1997-02-11'] = {\n  'date': '1997-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1997-03-20'] = {\n  'date': '1997-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1997-04-29'] = {\n  'date': '1997-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1997-05-03'] = {\n  'date': '1997-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1997-05-05'] = {\n  'date': '1997-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1997-07-20'] = {\n  'date': '1997-07-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['1997-07-21'] = {\n  'date': '1997-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1997-09-15'] = {\n  'date': '1997-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1997-09-23'] = {\n  'date': '1997-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1997-10-10'] = {\n  'date': '1997-10-10',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1997-11-03'] = {\n  'date': '1997-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1997-11-23'] = {\n  'date': '1997-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1997-11-24'] = {\n  'date': '1997-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1997-12-23'] = {\n  'date': '1997-12-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1998-01-01'] = {\n  'date': '1998-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1998-01-15'] = {\n  'date': '1998-01-15',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1998-02-11'] = {\n  'date': '1998-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1998-03-21'] = {\n  'date': '1998-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1998-04-29'] = {\n  'date': '1998-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1998-05-03'] = {\n  'date': '1998-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1998-05-04'] = {\n  'date': '1998-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1998-05-05'] = {\n  'date': '1998-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1998-07-20'] = {\n  'date': '1998-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['1998-09-15'] = {\n  'date': '1998-09-15',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1998-09-23'] = {\n  'date': '1998-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1998-10-10'] = {\n  'date': '1998-10-10',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1998-11-03'] = {\n  'date': '1998-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1998-11-23'] = {\n  'date': '1998-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1998-12-23'] = {\n  'date': '1998-12-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['1999-01-01'] = {\n  'date': '1999-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['1999-01-15'] = {\n  'date': '1999-01-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['1999-02-11'] = {\n  'date': '1999-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['1999-03-21'] = {\n  'date': '1999-03-21',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['1999-03-22'] = {\n  'date': '1999-03-22',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1999-04-29'] = {\n  'date': '1999-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['1999-05-03'] = {\n  'date': '1999-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['1999-05-04'] = {\n  'date': '1999-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['1999-05-05'] = {\n  'date': '1999-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['1999-07-20'] = {\n  'date': '1999-07-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['1999-09-15'] = {\n  'date': '1999-09-15',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['1999-09-23'] = {\n  'date': '1999-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['1999-10-10'] = {\n  'date': '1999-10-10',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['1999-10-11'] = {\n  'date': '1999-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['1999-11-03'] = {\n  'date': '1999-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['1999-11-23'] = {\n  'date': '1999-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['1999-12-23'] = {\n  'date': '1999-12-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2000-01-01'] = {\n  'date': '2000-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2000-01-10'] = {\n  'date': '2000-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2000-02-11'] = {\n  'date': '2000-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2000-03-20'] = {\n  'date': '2000-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2000-04-29'] = {\n  'date': '2000-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2000-05-03'] = {\n  'date': '2000-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2000-05-04'] = {\n  'date': '2000-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2000-05-05'] = {\n  'date': '2000-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2000-07-20'] = {\n  'date': '2000-07-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2000-09-15'] = {\n  'date': '2000-09-15',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2000-09-23'] = {\n  'date': '2000-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2000-10-09'] = {\n  'date': '2000-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2000-11-03'] = {\n  'date': '2000-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2000-11-23'] = {\n  'date': '2000-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2000-12-23'] = {\n  'date': '2000-12-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2001-01-01'] = {\n  'date': '2001-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2001-01-08'] = {\n  'date': '2001-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2001-02-11'] = {\n  'date': '2001-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2001-02-12'] = {\n  'date': '2001-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2001-03-20'] = {\n  'date': '2001-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2001-04-29'] = {\n  'date': '2001-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2001-04-30'] = {\n  'date': '2001-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2001-05-03'] = {\n  'date': '2001-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2001-05-04'] = {\n  'date': '2001-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2001-05-05'] = {\n  'date': '2001-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2001-07-20'] = {\n  'date': '2001-07-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2001-09-15'] = {\n  'date': '2001-09-15',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2001-09-23'] = {\n  'date': '2001-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2001-09-24'] = {\n  'date': '2001-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2001-10-08'] = {\n  'date': '2001-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2001-11-03'] = {\n  'date': '2001-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2001-11-23'] = {\n  'date': '2001-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2001-12-23'] = {\n  'date': '2001-12-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2001-12-24'] = {\n  'date': '2001-12-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2002-01-01'] = {\n  'date': '2002-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2002-01-14'] = {\n  'date': '2002-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2002-02-11'] = {\n  'date': '2002-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2002-03-21'] = {\n  'date': '2002-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2002-04-29'] = {\n  'date': '2002-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2002-05-03'] = {\n  'date': '2002-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2002-05-04'] = {\n  'date': '2002-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2002-05-05'] = {\n  'date': '2002-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2002-05-06'] = {\n  'date': '2002-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2002-07-20'] = {\n  'date': '2002-07-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2002-09-15'] = {\n  'date': '2002-09-15',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2002-09-16'] = {\n  'date': '2002-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2002-09-23'] = {\n  'date': '2002-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2002-10-14'] = {\n  'date': '2002-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2002-11-03'] = {\n  'date': '2002-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2002-11-04'] = {\n  'date': '2002-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2002-11-23'] = {\n  'date': '2002-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2002-12-23'] = {\n  'date': '2002-12-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2003-01-01'] = {\n  'date': '2003-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2003-01-13'] = {\n  'date': '2003-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2003-02-11'] = {\n  'date': '2003-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2003-03-21'] = {\n  'date': '2003-03-21',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2003-04-29'] = {\n  'date': '2003-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2003-05-03'] = {\n  'date': '2003-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2003-05-05'] = {\n  'date': '2003-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2003-07-21'] = {\n  'date': '2003-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2003-09-15'] = {\n  'date': '2003-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2003-09-23'] = {\n  'date': '2003-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2003-10-13'] = {\n  'date': '2003-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2003-11-03'] = {\n  'date': '2003-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2003-11-23'] = {\n  'date': '2003-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2003-11-24'] = {\n  'date': '2003-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2003-12-23'] = {\n  'date': '2003-12-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2004-01-01'] = {\n  'date': '2004-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2004-01-12'] = {\n  'date': '2004-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2004-02-11'] = {\n  'date': '2004-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2004-03-20'] = {\n  'date': '2004-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2004-04-29'] = {\n  'date': '2004-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2004-05-03'] = {\n  'date': '2004-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2004-05-04'] = {\n  'date': '2004-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2004-05-05'] = {\n  'date': '2004-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2004-07-19'] = {\n  'date': '2004-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2004-09-20'] = {\n  'date': '2004-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2004-09-23'] = {\n  'date': '2004-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2004-10-11'] = {\n  'date': '2004-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2004-11-03'] = {\n  'date': '2004-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2004-11-23'] = {\n  'date': '2004-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2004-12-23'] = {\n  'date': '2004-12-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2005-01-01'] = {\n  'date': '2005-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2005-01-10'] = {\n  'date': '2005-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2005-02-11'] = {\n  'date': '2005-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2005-03-20'] = {\n  'date': '2005-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2005-03-21'] = {\n  'date': '2005-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2005-04-29'] = {\n  'date': '2005-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2005-05-03'] = {\n  'date': '2005-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2005-05-04'] = {\n  'date': '2005-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2005-05-05'] = {\n  'date': '2005-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2005-07-18'] = {\n  'date': '2005-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2005-09-19'] = {\n  'date': '2005-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2005-09-23'] = {\n  'date': '2005-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2005-10-10'] = {\n  'date': '2005-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2005-11-03'] = {\n  'date': '2005-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2005-11-23'] = {\n  'date': '2005-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2005-12-23'] = {\n  'date': '2005-12-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2006-01-01'] = {\n  'date': '2006-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2006-01-02'] = {\n  'date': '2006-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2006-01-09'] = {\n  'date': '2006-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2006-02-11'] = {\n  'date': '2006-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2006-03-21'] = {\n  'date': '2006-03-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2006-04-29'] = {\n  'date': '2006-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2006-05-03'] = {\n  'date': '2006-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2006-05-04'] = {\n  'date': '2006-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2006-05-05'] = {\n  'date': '2006-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2006-07-17'] = {\n  'date': '2006-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2006-09-18'] = {\n  'date': '2006-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2006-09-23'] = {\n  'date': '2006-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2006-10-09'] = {\n  'date': '2006-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2006-11-03'] = {\n  'date': '2006-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2006-11-23'] = {\n  'date': '2006-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2006-12-23'] = {\n  'date': '2006-12-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2007-01-01'] = {\n  'date': '2007-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2007-01-08'] = {\n  'date': '2007-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2007-02-11'] = {\n  'date': '2007-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2007-02-12'] = {\n  'date': '2007-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2007-03-21'] = {\n  'date': '2007-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2007-04-29'] = {\n  'date': '2007-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2007-04-30'] = {\n  'date': '2007-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2007-05-03'] = {\n  'date': '2007-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2007-05-04'] = {\n  'date': '2007-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2007-05-05'] = {\n  'date': '2007-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2007-07-16'] = {\n  'date': '2007-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2007-09-17'] = {\n  'date': '2007-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2007-09-23'] = {\n  'date': '2007-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2007-09-24'] = {\n  'date': '2007-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2007-10-08'] = {\n  'date': '2007-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2007-11-03'] = {\n  'date': '2007-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2007-11-23'] = {\n  'date': '2007-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2007-12-23'] = {\n  'date': '2007-12-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2007-12-24'] = {\n  'date': '2007-12-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2008-01-01'] = {\n  'date': '2008-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2008-01-14'] = {\n  'date': '2008-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2008-02-11'] = {\n  'date': '2008-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2008-03-20'] = {\n  'date': '2008-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2008-04-29'] = {\n  'date': '2008-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2008-05-03'] = {\n  'date': '2008-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2008-05-04'] = {\n  'date': '2008-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2008-05-05'] = {\n  'date': '2008-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2008-05-06'] = {\n  'date': '2008-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2008-07-21'] = {\n  'date': '2008-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2008-09-15'] = {\n  'date': '2008-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2008-09-23'] = {\n  'date': '2008-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2008-10-13'] = {\n  'date': '2008-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2008-11-03'] = {\n  'date': '2008-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2008-11-23'] = {\n  'date': '2008-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2008-11-24'] = {\n  'date': '2008-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2008-12-23'] = {\n  'date': '2008-12-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2009-01-01'] = {\n  'date': '2009-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2009-01-12'] = {\n  'date': '2009-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2009-02-11'] = {\n  'date': '2009-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2009-03-20'] = {\n  'date': '2009-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2009-04-29'] = {\n  'date': '2009-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2009-05-03'] = {\n  'date': '2009-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2009-05-04'] = {\n  'date': '2009-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2009-05-05'] = {\n  'date': '2009-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2009-05-06'] = {\n  'date': '2009-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2009-07-20'] = {\n  'date': '2009-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2009-09-21'] = {\n  'date': '2009-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2009-09-22'] = {\n  'date': '2009-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2009-09-23'] = {\n  'date': '2009-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2009-10-12'] = {\n  'date': '2009-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2009-11-03'] = {\n  'date': '2009-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2009-11-23'] = {\n  'date': '2009-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2009-12-23'] = {\n  'date': '2009-12-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2010-01-01'] = {\n  'date': '2010-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2010-01-11'] = {\n  'date': '2010-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2010-02-11'] = {\n  'date': '2010-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2010-03-21'] = {\n  'date': '2010-03-21',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2010-03-22'] = {\n  'date': '2010-03-22',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2010-04-29'] = {\n  'date': '2010-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2010-05-03'] = {\n  'date': '2010-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2010-05-04'] = {\n  'date': '2010-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2010-05-05'] = {\n  'date': '2010-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2010-07-19'] = {\n  'date': '2010-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2010-09-20'] = {\n  'date': '2010-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2010-09-23'] = {\n  'date': '2010-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2010-10-11'] = {\n  'date': '2010-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2010-11-03'] = {\n  'date': '2010-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2010-11-23'] = {\n  'date': '2010-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2010-12-23'] = {\n  'date': '2010-12-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2011-01-01'] = {\n  'date': '2011-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2011-01-10'] = {\n  'date': '2011-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2011-02-11'] = {\n  'date': '2011-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2011-03-21'] = {\n  'date': '2011-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2011-04-29'] = {\n  'date': '2011-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2011-05-03'] = {\n  'date': '2011-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2011-05-04'] = {\n  'date': '2011-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2011-05-05'] = {\n  'date': '2011-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2011-07-18'] = {\n  'date': '2011-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2011-09-19'] = {\n  'date': '2011-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2011-09-23'] = {\n  'date': '2011-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2011-10-10'] = {\n  'date': '2011-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2011-11-03'] = {\n  'date': '2011-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2011-11-23'] = {\n  'date': '2011-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2011-12-23'] = {\n  'date': '2011-12-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2012-01-01'] = {\n  'date': '2012-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2012-01-02'] = {\n  'date': '2012-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2012-01-09'] = {\n  'date': '2012-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2012-02-11'] = {\n  'date': '2012-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2012-03-20'] = {\n  'date': '2012-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2012-04-29'] = {\n  'date': '2012-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2012-04-30'] = {\n  'date': '2012-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2012-05-03'] = {\n  'date': '2012-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2012-05-04'] = {\n  'date': '2012-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2012-05-05'] = {\n  'date': '2012-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2012-07-16'] = {\n  'date': '2012-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2012-09-17'] = {\n  'date': '2012-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2012-09-22'] = {\n  'date': '2012-09-22',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2012-10-08'] = {\n  'date': '2012-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2012-11-03'] = {\n  'date': '2012-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2012-11-23'] = {\n  'date': '2012-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2012-12-23'] = {\n  'date': '2012-12-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2012-12-24'] = {\n  'date': '2012-12-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2013-01-01'] = {\n  'date': '2013-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2013-01-14'] = {\n  'date': '2013-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2013-02-11'] = {\n  'date': '2013-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2013-03-20'] = {\n  'date': '2013-03-20',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2013-04-29'] = {\n  'date': '2013-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2013-05-03'] = {\n  'date': '2013-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2013-05-04'] = {\n  'date': '2013-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2013-05-05'] = {\n  'date': '2013-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2013-05-06'] = {\n  'date': '2013-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2013-07-15'] = {\n  'date': '2013-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2013-09-16'] = {\n  'date': '2013-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2013-09-23'] = {\n  'date': '2013-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2013-10-14'] = {\n  'date': '2013-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2013-11-03'] = {\n  'date': '2013-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2013-11-04'] = {\n  'date': '2013-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2013-11-23'] = {\n  'date': '2013-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2013-12-23'] = {\n  'date': '2013-12-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2014-01-01'] = {\n  'date': '2014-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2014-01-13'] = {\n  'date': '2014-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2014-02-11'] = {\n  'date': '2014-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2014-03-21'] = {\n  'date': '2014-03-21',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2014-04-29'] = {\n  'date': '2014-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2014-05-03'] = {\n  'date': '2014-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2014-05-04'] = {\n  'date': '2014-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2014-05-05'] = {\n  'date': '2014-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2014-05-06'] = {\n  'date': '2014-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2014-07-21'] = {\n  'date': '2014-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2014-09-15'] = {\n  'date': '2014-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2014-09-23'] = {\n  'date': '2014-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2014-10-13'] = {\n  'date': '2014-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2014-11-03'] = {\n  'date': '2014-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2014-11-23'] = {\n  'date': '2014-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2014-11-24'] = {\n  'date': '2014-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2014-12-23'] = {\n  'date': '2014-12-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2015-01-01'] = {\n  'date': '2015-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2015-01-12'] = {\n  'date': '2015-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2015-02-11'] = {\n  'date': '2015-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2015-03-21'] = {\n  'date': '2015-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2015-04-29'] = {\n  'date': '2015-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2015-05-03'] = {\n  'date': '2015-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2015-05-04'] = {\n  'date': '2015-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2015-05-05'] = {\n  'date': '2015-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2015-05-06'] = {\n  'date': '2015-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2015-07-20'] = {\n  'date': '2015-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2015-09-21'] = {\n  'date': '2015-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2015-09-22'] = {\n  'date': '2015-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2015-09-23'] = {\n  'date': '2015-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2015-10-12'] = {\n  'date': '2015-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2015-11-03'] = {\n  'date': '2015-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2015-11-23'] = {\n  'date': '2015-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2015-12-23'] = {\n  'date': '2015-12-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2016-01-01'] = {\n  'date': '2016-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2016-01-11'] = {\n  'date': '2016-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2016-02-11'] = {\n  'date': '2016-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2016-03-20'] = {\n  'date': '2016-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2016-03-21'] = {\n  'date': '2016-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2016-04-29'] = {\n  'date': '2016-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2016-05-03'] = {\n  'date': '2016-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2016-05-04'] = {\n  'date': '2016-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2016-05-05'] = {\n  'date': '2016-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2016-07-18'] = {\n  'date': '2016-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2016-08-11'] = {\n  'date': '2016-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2016-09-19'] = {\n  'date': '2016-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2016-09-22'] = {\n  'date': '2016-09-22',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2016-10-10'] = {\n  'date': '2016-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2016-11-03'] = {\n  'date': '2016-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2016-11-23'] = {\n  'date': '2016-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2016-12-23'] = {\n  'date': '2016-12-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2017-01-01'] = {\n  'date': '2017-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2017-01-02'] = {\n  'date': '2017-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2017-01-09'] = {\n  'date': '2017-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2017-02-11'] = {\n  'date': '2017-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2017-03-20'] = {\n  'date': '2017-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2017-04-29'] = {\n  'date': '2017-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2017-05-03'] = {\n  'date': '2017-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2017-05-04'] = {\n  'date': '2017-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2017-05-05'] = {\n  'date': '2017-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2017-07-17'] = {\n  'date': '2017-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2017-08-11'] = {\n  'date': '2017-08-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2017-09-18'] = {\n  'date': '2017-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2017-09-23'] = {\n  'date': '2017-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2017-10-09'] = {\n  'date': '2017-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2017-11-03'] = {\n  'date': '2017-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2017-11-23'] = {\n  'date': '2017-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2017-12-23'] = {\n  'date': '2017-12-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2018-01-01'] = {\n  'date': '2018-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2018-01-08'] = {\n  'date': '2018-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2018-02-11'] = {\n  'date': '2018-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2018-02-12'] = {\n  'date': '2018-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2018-03-21'] = {\n  'date': '2018-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2018-04-29'] = {\n  'date': '2018-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2018-04-30'] = {\n  'date': '2018-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2018-05-03'] = {\n  'date': '2018-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2018-05-04'] = {\n  'date': '2018-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2018-05-05'] = {\n  'date': '2018-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2018-07-16'] = {\n  'date': '2018-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2018-08-11'] = {\n  'date': '2018-08-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2018-09-17'] = {\n  'date': '2018-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2018-09-23'] = {\n  'date': '2018-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2018-09-24'] = {\n  'date': '2018-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2018-10-08'] = {\n  'date': '2018-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2018-11-03'] = {\n  'date': '2018-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2018-11-23'] = {\n  'date': '2018-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2018-12-23'] = {\n  'date': '2018-12-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2018-12-24'] = {\n  'date': '2018-12-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2019-01-01'] = {\n  'date': '2019-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2019-01-14'] = {\n  'date': '2019-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2019-02-11'] = {\n  'date': '2019-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2019-03-21'] = {\n  'date': '2019-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2019-04-29'] = {\n  'date': '2019-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2019-04-30'] = {\n  'date': '2019-04-30',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '休日',\n  'name_en': \"Holiday\"\n};\nholidays['2019-05-01'] = {\n  'date': '2019-05-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '休日（祝日扱い）',\n  'name_en': \"Holiday\"\n};\nholidays['2019-05-02'] = {\n  'date': '2019-05-02',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '休日',\n  'name_en': \"Holiday\"\n};\nholidays['2019-05-03'] = {\n  'date': '2019-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2019-05-04'] = {\n  'date': '2019-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2019-05-05'] = {\n  'date': '2019-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2019-05-06'] = {\n  'date': '2019-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2019-07-15'] = {\n  'date': '2019-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2019-08-11'] = {\n  'date': '2019-08-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2019-08-12'] = {\n  'date': '2019-08-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2019-09-16'] = {\n  'date': '2019-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2019-09-23'] = {\n  'date': '2019-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2019-10-14'] = {\n  'date': '2019-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '体育の日（スポーツの日）',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2019-10-22'] = {\n  'date': '2019-10-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '休日（祝日扱い）',\n  'name_en': \"Holiday\"\n};\nholidays['2019-11-03'] = {\n  'date': '2019-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2019-11-04'] = {\n  'date': '2019-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2019-11-23'] = {\n  'date': '2019-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2020-01-01'] = {\n  'date': '2020-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2020-01-13'] = {\n  'date': '2020-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2020-02-11'] = {\n  'date': '2020-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2020-02-23'] = {\n  'date': '2020-02-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2020-02-24'] = {\n  'date': '2020-02-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2020-03-20'] = {\n  'date': '2020-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2020-04-29'] = {\n  'date': '2020-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2020-05-03'] = {\n  'date': '2020-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2020-05-04'] = {\n  'date': '2020-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2020-05-05'] = {\n  'date': '2020-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2020-05-06'] = {\n  'date': '2020-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2020-07-23'] = {\n  'date': '2020-07-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2020-07-24'] = {\n  'date': '2020-07-24',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2020-08-10'] = {\n  'date': '2020-08-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2020-09-21'] = {\n  'date': '2020-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2020-09-22'] = {\n  'date': '2020-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2020-11-03'] = {\n  'date': '2020-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2020-11-23'] = {\n  'date': '2020-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2021-01-01'] = {\n  'date': '2021-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2021-01-11'] = {\n  'date': '2021-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2021-02-11'] = {\n  'date': '2021-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2021-02-23'] = {\n  'date': '2021-02-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2021-03-20'] = {\n  'date': '2021-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2021-04-29'] = {\n  'date': '2021-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2021-05-03'] = {\n  'date': '2021-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2021-05-04'] = {\n  'date': '2021-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2021-05-05'] = {\n  'date': '2021-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2021-07-19'] = {\n  'date': '2021-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2021-08-11'] = {\n  'date': '2021-08-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2021-09-20'] = {\n  'date': '2021-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2021-09-23'] = {\n  'date': '2021-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2021-10-11'] = {\n  'date': '2021-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2021-11-03'] = {\n  'date': '2021-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2021-11-23'] = {\n  'date': '2021-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2022-01-01'] = {\n  'date': '2022-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2022-01-10'] = {\n  'date': '2022-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2022-02-11'] = {\n  'date': '2022-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2022-02-23'] = {\n  'date': '2022-02-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2022-03-21'] = {\n  'date': '2022-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2022-04-29'] = {\n  'date': '2022-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2022-05-03'] = {\n  'date': '2022-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2022-05-04'] = {\n  'date': '2022-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2022-05-05'] = {\n  'date': '2022-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2022-07-18'] = {\n  'date': '2022-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2022-08-11'] = {\n  'date': '2022-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2022-09-19'] = {\n  'date': '2022-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2022-09-23'] = {\n  'date': '2022-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2022-10-10'] = {\n  'date': '2022-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2022-11-03'] = {\n  'date': '2022-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2022-11-23'] = {\n  'date': '2022-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2023-01-01'] = {\n  'date': '2023-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2023-01-02'] = {\n  'date': '2023-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2023-01-09'] = {\n  'date': '2023-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2023-02-11'] = {\n  'date': '2023-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2023-02-23'] = {\n  'date': '2023-02-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2023-03-21'] = {\n  'date': '2023-03-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2023-04-29'] = {\n  'date': '2023-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2023-05-03'] = {\n  'date': '2023-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2023-05-04'] = {\n  'date': '2023-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2023-05-05'] = {\n  'date': '2023-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2023-07-17'] = {\n  'date': '2023-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2023-08-11'] = {\n  'date': '2023-08-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2023-09-18'] = {\n  'date': '2023-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2023-09-23'] = {\n  'date': '2023-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2023-10-09'] = {\n  'date': '2023-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2023-11-03'] = {\n  'date': '2023-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2023-11-23'] = {\n  'date': '2023-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2024-01-01'] = {\n  'date': '2024-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2024-01-08'] = {\n  'date': '2024-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2024-02-11'] = {\n  'date': '2024-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2024-02-12'] = {\n  'date': '2024-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2024-02-23'] = {\n  'date': '2024-02-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2024-03-20'] = {\n  'date': '2024-03-20',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2024-04-29'] = {\n  'date': '2024-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2024-05-03'] = {\n  'date': '2024-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2024-05-04'] = {\n  'date': '2024-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2024-05-05'] = {\n  'date': '2024-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2024-05-06'] = {\n  'date': '2024-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2024-07-15'] = {\n  'date': '2024-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2024-08-11'] = {\n  'date': '2024-08-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2024-08-12'] = {\n  'date': '2024-08-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2024-09-16'] = {\n  'date': '2024-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2024-09-22'] = {\n  'date': '2024-09-22',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2024-09-23'] = {\n  'date': '2024-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2024-10-14'] = {\n  'date': '2024-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2024-11-03'] = {\n  'date': '2024-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2024-11-04'] = {\n  'date': '2024-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2024-11-23'] = {\n  'date': '2024-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2025-01-01'] = {\n  'date': '2025-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2025-01-13'] = {\n  'date': '2025-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2025-02-11'] = {\n  'date': '2025-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2025-02-23'] = {\n  'date': '2025-02-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2025-02-24'] = {\n  'date': '2025-02-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2025-03-20'] = {\n  'date': '2025-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2025-04-29'] = {\n  'date': '2025-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2025-05-03'] = {\n  'date': '2025-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2025-05-04'] = {\n  'date': '2025-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2025-05-05'] = {\n  'date': '2025-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2025-05-06'] = {\n  'date': '2025-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2025-07-21'] = {\n  'date': '2025-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2025-08-11'] = {\n  'date': '2025-08-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2025-09-15'] = {\n  'date': '2025-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2025-09-23'] = {\n  'date': '2025-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2025-10-13'] = {\n  'date': '2025-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2025-11-03'] = {\n  'date': '2025-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2025-11-23'] = {\n  'date': '2025-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2025-11-24'] = {\n  'date': '2025-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2026-01-01'] = {\n  'date': '2026-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2026-01-12'] = {\n  'date': '2026-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2026-02-11'] = {\n  'date': '2026-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2026-02-23'] = {\n  'date': '2026-02-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2026-03-20'] = {\n  'date': '2026-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2026-04-29'] = {\n  'date': '2026-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2026-05-03'] = {\n  'date': '2026-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2026-05-04'] = {\n  'date': '2026-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2026-05-05'] = {\n  'date': '2026-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2026-05-06'] = {\n  'date': '2026-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2026-07-20'] = {\n  'date': '2026-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2026-08-11'] = {\n  'date': '2026-08-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2026-09-21'] = {\n  'date': '2026-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2026-09-22'] = {\n  'date': '2026-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2026-09-23'] = {\n  'date': '2026-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2026-10-12'] = {\n  'date': '2026-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2026-11-03'] = {\n  'date': '2026-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2026-11-23'] = {\n  'date': '2026-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2027-01-01'] = {\n  'date': '2027-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2027-01-11'] = {\n  'date': '2027-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2027-02-11'] = {\n  'date': '2027-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2027-02-23'] = {\n  'date': '2027-02-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2027-03-21'] = {\n  'date': '2027-03-21',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2027-03-22'] = {\n  'date': '2027-03-22',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2027-04-29'] = {\n  'date': '2027-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2027-05-03'] = {\n  'date': '2027-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2027-05-04'] = {\n  'date': '2027-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2027-05-05'] = {\n  'date': '2027-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2027-07-19'] = {\n  'date': '2027-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2027-08-11'] = {\n  'date': '2027-08-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2027-09-20'] = {\n  'date': '2027-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2027-09-23'] = {\n  'date': '2027-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2027-10-11'] = {\n  'date': '2027-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2027-11-03'] = {\n  'date': '2027-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2027-11-23'] = {\n  'date': '2027-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2028-01-01'] = {\n  'date': '2028-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2028-01-10'] = {\n  'date': '2028-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2028-02-11'] = {\n  'date': '2028-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2028-02-23'] = {\n  'date': '2028-02-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2028-03-20'] = {\n  'date': '2028-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2028-04-29'] = {\n  'date': '2028-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2028-05-03'] = {\n  'date': '2028-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2028-05-04'] = {\n  'date': '2028-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2028-05-05'] = {\n  'date': '2028-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2028-07-17'] = {\n  'date': '2028-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2028-08-11'] = {\n  'date': '2028-08-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2028-09-18'] = {\n  'date': '2028-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2028-09-22'] = {\n  'date': '2028-09-22',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2028-10-09'] = {\n  'date': '2028-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2028-11-03'] = {\n  'date': '2028-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2028-11-23'] = {\n  'date': '2028-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2029-01-01'] = {\n  'date': '2029-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2029-01-08'] = {\n  'date': '2029-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2029-02-11'] = {\n  'date': '2029-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2029-02-12'] = {\n  'date': '2029-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2029-02-23'] = {\n  'date': '2029-02-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2029-03-20'] = {\n  'date': '2029-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2029-04-29'] = {\n  'date': '2029-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2029-04-30'] = {\n  'date': '2029-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2029-05-03'] = {\n  'date': '2029-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2029-05-04'] = {\n  'date': '2029-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2029-05-05'] = {\n  'date': '2029-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2029-07-16'] = {\n  'date': '2029-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2029-08-11'] = {\n  'date': '2029-08-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2029-09-17'] = {\n  'date': '2029-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2029-09-23'] = {\n  'date': '2029-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2029-09-24'] = {\n  'date': '2029-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2029-10-08'] = {\n  'date': '2029-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2029-11-03'] = {\n  'date': '2029-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2029-11-23'] = {\n  'date': '2029-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2030-01-01'] = {\n  'date': '2030-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2030-01-14'] = {\n  'date': '2030-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2030-02-11'] = {\n  'date': '2030-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2030-02-23'] = {\n  'date': '2030-02-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2030-03-20'] = {\n  'date': '2030-03-20',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2030-04-29'] = {\n  'date': '2030-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2030-05-03'] = {\n  'date': '2030-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2030-05-04'] = {\n  'date': '2030-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2030-05-05'] = {\n  'date': '2030-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2030-05-06'] = {\n  'date': '2030-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2030-07-15'] = {\n  'date': '2030-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2030-08-11'] = {\n  'date': '2030-08-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2030-08-12'] = {\n  'date': '2030-08-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2030-09-16'] = {\n  'date': '2030-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2030-09-23'] = {\n  'date': '2030-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2030-10-14'] = {\n  'date': '2030-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2030-11-03'] = {\n  'date': '2030-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2030-11-04'] = {\n  'date': '2030-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2030-11-23'] = {\n  'date': '2030-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2031-01-01'] = {\n  'date': '2031-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2031-01-13'] = {\n  'date': '2031-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2031-02-11'] = {\n  'date': '2031-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2031-02-23'] = {\n  'date': '2031-02-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2031-02-24'] = {\n  'date': '2031-02-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2031-03-21'] = {\n  'date': '2031-03-21',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2031-04-29'] = {\n  'date': '2031-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2031-05-03'] = {\n  'date': '2031-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2031-05-04'] = {\n  'date': '2031-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2031-05-05'] = {\n  'date': '2031-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2031-05-06'] = {\n  'date': '2031-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2031-07-21'] = {\n  'date': '2031-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2031-08-11'] = {\n  'date': '2031-08-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2031-09-15'] = {\n  'date': '2031-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2031-09-23'] = {\n  'date': '2031-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2031-10-13'] = {\n  'date': '2031-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2031-11-03'] = {\n  'date': '2031-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2031-11-23'] = {\n  'date': '2031-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2031-11-24'] = {\n  'date': '2031-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2032-01-01'] = {\n  'date': '2032-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2032-01-12'] = {\n  'date': '2032-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2032-02-11'] = {\n  'date': '2032-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2032-02-23'] = {\n  'date': '2032-02-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2032-03-20'] = {\n  'date': '2032-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2032-04-29'] = {\n  'date': '2032-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2032-05-03'] = {\n  'date': '2032-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2032-05-04'] = {\n  'date': '2032-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2032-05-05'] = {\n  'date': '2032-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2032-07-19'] = {\n  'date': '2032-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2032-08-11'] = {\n  'date': '2032-08-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2032-09-20'] = {\n  'date': '2032-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2032-09-21'] = {\n  'date': '2032-09-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2032-09-22'] = {\n  'date': '2032-09-22',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2032-10-11'] = {\n  'date': '2032-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2032-11-03'] = {\n  'date': '2032-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2032-11-23'] = {\n  'date': '2032-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2033-01-01'] = {\n  'date': '2033-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2033-01-10'] = {\n  'date': '2033-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2033-02-11'] = {\n  'date': '2033-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2033-02-23'] = {\n  'date': '2033-02-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2033-03-20'] = {\n  'date': '2033-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2033-03-21'] = {\n  'date': '2033-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2033-04-29'] = {\n  'date': '2033-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2033-05-03'] = {\n  'date': '2033-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2033-05-04'] = {\n  'date': '2033-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2033-05-05'] = {\n  'date': '2033-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2033-07-18'] = {\n  'date': '2033-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2033-08-11'] = {\n  'date': '2033-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2033-09-19'] = {\n  'date': '2033-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2033-09-23'] = {\n  'date': '2033-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2033-10-10'] = {\n  'date': '2033-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2033-11-03'] = {\n  'date': '2033-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2033-11-23'] = {\n  'date': '2033-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2034-01-01'] = {\n  'date': '2034-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2034-01-02'] = {\n  'date': '2034-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2034-01-09'] = {\n  'date': '2034-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2034-02-11'] = {\n  'date': '2034-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2034-02-23'] = {\n  'date': '2034-02-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2034-03-20'] = {\n  'date': '2034-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2034-04-29'] = {\n  'date': '2034-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2034-05-03'] = {\n  'date': '2034-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2034-05-04'] = {\n  'date': '2034-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2034-05-05'] = {\n  'date': '2034-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2034-07-17'] = {\n  'date': '2034-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2034-08-11'] = {\n  'date': '2034-08-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2034-09-18'] = {\n  'date': '2034-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2034-09-23'] = {\n  'date': '2034-09-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2034-10-09'] = {\n  'date': '2034-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2034-11-03'] = {\n  'date': '2034-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2034-11-23'] = {\n  'date': '2034-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2035-01-01'] = {\n  'date': '2035-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2035-01-08'] = {\n  'date': '2035-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2035-02-11'] = {\n  'date': '2035-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2035-02-12'] = {\n  'date': '2035-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2035-02-23'] = {\n  'date': '2035-02-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2035-03-21'] = {\n  'date': '2035-03-21',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2035-04-29'] = {\n  'date': '2035-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2035-04-30'] = {\n  'date': '2035-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2035-05-03'] = {\n  'date': '2035-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2035-05-04'] = {\n  'date': '2035-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2035-05-05'] = {\n  'date': '2035-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2035-07-16'] = {\n  'date': '2035-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2035-08-11'] = {\n  'date': '2035-08-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2035-09-17'] = {\n  'date': '2035-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2035-09-23'] = {\n  'date': '2035-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2035-09-24'] = {\n  'date': '2035-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2035-10-08'] = {\n  'date': '2035-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2035-11-03'] = {\n  'date': '2035-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2035-11-23'] = {\n  'date': '2035-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2036-01-01'] = {\n  'date': '2036-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2036-01-14'] = {\n  'date': '2036-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2036-02-11'] = {\n  'date': '2036-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2036-02-23'] = {\n  'date': '2036-02-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2036-03-20'] = {\n  'date': '2036-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2036-04-29'] = {\n  'date': '2036-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2036-05-03'] = {\n  'date': '2036-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2036-05-04'] = {\n  'date': '2036-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2036-05-05'] = {\n  'date': '2036-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2036-05-06'] = {\n  'date': '2036-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2036-07-21'] = {\n  'date': '2036-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2036-08-11'] = {\n  'date': '2036-08-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2036-09-15'] = {\n  'date': '2036-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2036-09-22'] = {\n  'date': '2036-09-22',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2036-10-13'] = {\n  'date': '2036-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2036-11-03'] = {\n  'date': '2036-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2036-11-23'] = {\n  'date': '2036-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2036-11-24'] = {\n  'date': '2036-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2037-01-01'] = {\n  'date': '2037-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2037-01-12'] = {\n  'date': '2037-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2037-02-11'] = {\n  'date': '2037-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2037-02-23'] = {\n  'date': '2037-02-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2037-03-20'] = {\n  'date': '2037-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2037-04-29'] = {\n  'date': '2037-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2037-05-03'] = {\n  'date': '2037-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2037-05-04'] = {\n  'date': '2037-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2037-05-05'] = {\n  'date': '2037-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2037-05-06'] = {\n  'date': '2037-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2037-07-20'] = {\n  'date': '2037-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2037-08-11'] = {\n  'date': '2037-08-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2037-09-21'] = {\n  'date': '2037-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2037-09-22'] = {\n  'date': '2037-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2037-09-23'] = {\n  'date': '2037-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2037-10-12'] = {\n  'date': '2037-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2037-11-03'] = {\n  'date': '2037-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2037-11-23'] = {\n  'date': '2037-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2038-01-01'] = {\n  'date': '2038-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2038-01-11'] = {\n  'date': '2038-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2038-02-11'] = {\n  'date': '2038-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2038-02-23'] = {\n  'date': '2038-02-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2038-03-20'] = {\n  'date': '2038-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2038-04-29'] = {\n  'date': '2038-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2038-05-03'] = {\n  'date': '2038-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2038-05-04'] = {\n  'date': '2038-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2038-05-05'] = {\n  'date': '2038-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2038-07-19'] = {\n  'date': '2038-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2038-08-11'] = {\n  'date': '2038-08-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2038-09-20'] = {\n  'date': '2038-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2038-09-23'] = {\n  'date': '2038-09-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2038-10-11'] = {\n  'date': '2038-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2038-11-03'] = {\n  'date': '2038-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2038-11-23'] = {\n  'date': '2038-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2039-01-01'] = {\n  'date': '2039-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2039-01-10'] = {\n  'date': '2039-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2039-02-11'] = {\n  'date': '2039-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2039-02-23'] = {\n  'date': '2039-02-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2039-03-21'] = {\n  'date': '2039-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2039-04-29'] = {\n  'date': '2039-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2039-05-03'] = {\n  'date': '2039-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2039-05-04'] = {\n  'date': '2039-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2039-05-05'] = {\n  'date': '2039-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2039-07-18'] = {\n  'date': '2039-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2039-08-11'] = {\n  'date': '2039-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2039-09-19'] = {\n  'date': '2039-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2039-09-23'] = {\n  'date': '2039-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2039-10-10'] = {\n  'date': '2039-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2039-11-03'] = {\n  'date': '2039-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2039-11-23'] = {\n  'date': '2039-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2040-01-01'] = {\n  'date': '2040-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2040-01-02'] = {\n  'date': '2040-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2040-01-09'] = {\n  'date': '2040-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2040-02-11'] = {\n  'date': '2040-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2040-02-23'] = {\n  'date': '2040-02-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2040-03-20'] = {\n  'date': '2040-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2040-04-29'] = {\n  'date': '2040-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2040-04-30'] = {\n  'date': '2040-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2040-05-03'] = {\n  'date': '2040-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2040-05-04'] = {\n  'date': '2040-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2040-05-05'] = {\n  'date': '2040-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2040-07-16'] = {\n  'date': '2040-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2040-08-11'] = {\n  'date': '2040-08-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2040-09-17'] = {\n  'date': '2040-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2040-09-22'] = {\n  'date': '2040-09-22',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2040-10-08'] = {\n  'date': '2040-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2040-11-03'] = {\n  'date': '2040-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2040-11-23'] = {\n  'date': '2040-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2041-01-01'] = {\n  'date': '2041-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2041-01-14'] = {\n  'date': '2041-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2041-02-11'] = {\n  'date': '2041-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2041-02-23'] = {\n  'date': '2041-02-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2041-03-20'] = {\n  'date': '2041-03-20',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2041-04-29'] = {\n  'date': '2041-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2041-05-03'] = {\n  'date': '2041-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2041-05-04'] = {\n  'date': '2041-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2041-05-05'] = {\n  'date': '2041-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2041-05-06'] = {\n  'date': '2041-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2041-07-15'] = {\n  'date': '2041-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2041-08-11'] = {\n  'date': '2041-08-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2041-08-12'] = {\n  'date': '2041-08-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2041-09-16'] = {\n  'date': '2041-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2041-09-23'] = {\n  'date': '2041-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2041-10-14'] = {\n  'date': '2041-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2041-11-03'] = {\n  'date': '2041-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2041-11-04'] = {\n  'date': '2041-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2041-11-23'] = {\n  'date': '2041-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2042-01-01'] = {\n  'date': '2042-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2042-01-13'] = {\n  'date': '2042-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2042-02-11'] = {\n  'date': '2042-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2042-02-23'] = {\n  'date': '2042-02-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2042-02-24'] = {\n  'date': '2042-02-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2042-03-20'] = {\n  'date': '2042-03-20',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2042-04-29'] = {\n  'date': '2042-04-29',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2042-05-03'] = {\n  'date': '2042-05-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2042-05-04'] = {\n  'date': '2042-05-04',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2042-05-05'] = {\n  'date': '2042-05-05',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2042-05-06'] = {\n  'date': '2042-05-06',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2042-07-21'] = {\n  'date': '2042-07-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2042-08-11'] = {\n  'date': '2042-08-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2042-09-15'] = {\n  'date': '2042-09-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2042-09-23'] = {\n  'date': '2042-09-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2042-10-13'] = {\n  'date': '2042-10-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2042-11-03'] = {\n  'date': '2042-11-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2042-11-23'] = {\n  'date': '2042-11-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2042-11-24'] = {\n  'date': '2042-11-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2043-01-01'] = {\n  'date': '2043-01-01',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2043-01-12'] = {\n  'date': '2043-01-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2043-02-11'] = {\n  'date': '2043-02-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2043-02-23'] = {\n  'date': '2043-02-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2043-03-21'] = {\n  'date': '2043-03-21',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2043-04-29'] = {\n  'date': '2043-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2043-05-03'] = {\n  'date': '2043-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2043-05-04'] = {\n  'date': '2043-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2043-05-05'] = {\n  'date': '2043-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2043-05-06'] = {\n  'date': '2043-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2043-07-20'] = {\n  'date': '2043-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2043-08-11'] = {\n  'date': '2043-08-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2043-09-21'] = {\n  'date': '2043-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2043-09-22'] = {\n  'date': '2043-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2043-09-23'] = {\n  'date': '2043-09-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2043-10-12'] = {\n  'date': '2043-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2043-11-03'] = {\n  'date': '2043-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2043-11-23'] = {\n  'date': '2043-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2044-01-01'] = {\n  'date': '2044-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2044-01-11'] = {\n  'date': '2044-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2044-02-11'] = {\n  'date': '2044-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2044-02-23'] = {\n  'date': '2044-02-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2044-03-20'] = {\n  'date': '2044-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2044-03-21'] = {\n  'date': '2044-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2044-04-29'] = {\n  'date': '2044-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2044-05-03'] = {\n  'date': '2044-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2044-05-04'] = {\n  'date': '2044-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2044-05-05'] = {\n  'date': '2044-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2044-07-18'] = {\n  'date': '2044-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2044-08-11'] = {\n  'date': '2044-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2044-09-19'] = {\n  'date': '2044-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2044-09-22'] = {\n  'date': '2044-09-22',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2044-10-10'] = {\n  'date': '2044-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2044-11-03'] = {\n  'date': '2044-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2044-11-23'] = {\n  'date': '2044-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2045-01-01'] = {\n  'date': '2045-01-01',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2045-01-02'] = {\n  'date': '2045-01-02',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2045-01-09'] = {\n  'date': '2045-01-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2045-02-11'] = {\n  'date': '2045-02-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2045-02-23'] = {\n  'date': '2045-02-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2045-03-20'] = {\n  'date': '2045-03-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2045-04-29'] = {\n  'date': '2045-04-29',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2045-05-03'] = {\n  'date': '2045-05-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2045-05-04'] = {\n  'date': '2045-05-04',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2045-05-05'] = {\n  'date': '2045-05-05',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2045-07-17'] = {\n  'date': '2045-07-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2045-08-11'] = {\n  'date': '2045-08-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2045-09-18'] = {\n  'date': '2045-09-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2045-09-22'] = {\n  'date': '2045-09-22',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2045-10-09'] = {\n  'date': '2045-10-09',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2045-11-03'] = {\n  'date': '2045-11-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2045-11-23'] = {\n  'date': '2045-11-23',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2046-01-01'] = {\n  'date': '2046-01-01',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2046-01-08'] = {\n  'date': '2046-01-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2046-02-11'] = {\n  'date': '2046-02-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2046-02-12'] = {\n  'date': '2046-02-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2046-02-23'] = {\n  'date': '2046-02-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2046-03-20'] = {\n  'date': '2046-03-20',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2046-04-29'] = {\n  'date': '2046-04-29',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2046-04-30'] = {\n  'date': '2046-04-30',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2046-05-03'] = {\n  'date': '2046-05-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2046-05-04'] = {\n  'date': '2046-05-04',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2046-05-05'] = {\n  'date': '2046-05-05',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2046-07-16'] = {\n  'date': '2046-07-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2046-08-11'] = {\n  'date': '2046-08-11',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2046-09-17'] = {\n  'date': '2046-09-17',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2046-09-23'] = {\n  'date': '2046-09-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2046-09-24'] = {\n  'date': '2046-09-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2046-10-08'] = {\n  'date': '2046-10-08',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2046-11-03'] = {\n  'date': '2046-11-03',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2046-11-23'] = {\n  'date': '2046-11-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2047-01-01'] = {\n  'date': '2047-01-01',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2047-01-14'] = {\n  'date': '2047-01-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2047-02-11'] = {\n  'date': '2047-02-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2047-02-23'] = {\n  'date': '2047-02-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2047-03-21'] = {\n  'date': '2047-03-21',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2047-04-29'] = {\n  'date': '2047-04-29',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2047-05-03'] = {\n  'date': '2047-05-03',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2047-05-04'] = {\n  'date': '2047-05-04',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2047-05-05'] = {\n  'date': '2047-05-05',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2047-05-06'] = {\n  'date': '2047-05-06',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2047-07-15'] = {\n  'date': '2047-07-15',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2047-08-11'] = {\n  'date': '2047-08-11',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2047-08-12'] = {\n  'date': '2047-08-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '山の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2047-09-16'] = {\n  'date': '2047-09-16',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2047-09-23'] = {\n  'date': '2047-09-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2047-10-14'] = {\n  'date': '2047-10-14',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2047-11-03'] = {\n  'date': '2047-11-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2047-11-04'] = {\n  'date': '2047-11-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '文化の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2047-11-23'] = {\n  'date': '2047-11-23',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2048-01-01'] = {\n  'date': '2048-01-01',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2048-01-13'] = {\n  'date': '2048-01-13',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2048-02-11'] = {\n  'date': '2048-02-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2048-02-23'] = {\n  'date': '2048-02-23',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2048-02-24'] = {\n  'date': '2048-02-24',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '天皇誕生日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2048-03-20'] = {\n  'date': '2048-03-20',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2048-04-29'] = {\n  'date': '2048-04-29',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2048-05-03'] = {\n  'date': '2048-05-03',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2048-05-04'] = {\n  'date': '2048-05-04',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2048-05-05'] = {\n  'date': '2048-05-05',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2048-05-06'] = {\n  'date': '2048-05-06',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2048-07-20'] = {\n  'date': '2048-07-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2048-08-11'] = {\n  'date': '2048-08-11',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2048-09-21'] = {\n  'date': '2048-09-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2048-09-22'] = {\n  'date': '2048-09-22',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2048-10-12'] = {\n  'date': '2048-10-12',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2048-11-03'] = {\n  'date': '2048-11-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2048-11-23'] = {\n  'date': '2048-11-23',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2049-01-01'] = {\n  'date': '2049-01-01',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2049-01-11'] = {\n  'date': '2049-01-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2049-02-11'] = {\n  'date': '2049-02-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2049-02-23'] = {\n  'date': '2049-02-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2049-03-20'] = {\n  'date': '2049-03-20',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2049-04-29'] = {\n  'date': '2049-04-29',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2049-05-03'] = {\n  'date': '2049-05-03',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2049-05-04'] = {\n  'date': '2049-05-04',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2049-05-05'] = {\n  'date': '2049-05-05',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2049-07-19'] = {\n  'date': '2049-07-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2049-08-11'] = {\n  'date': '2049-08-11',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2049-09-20'] = {\n  'date': '2049-09-20',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2049-09-21'] = {\n  'date': '2049-09-21',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '国民の休日',\n  'name_en': \"Citizen's Holiday\"\n};\nholidays['2049-09-22'] = {\n  'date': '2049-09-22',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2049-10-11'] = {\n  'date': '2049-10-11',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2049-11-03'] = {\n  'date': '2049-11-03',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2049-11-23'] = {\n  'date': '2049-11-23',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nholidays['2050-01-01'] = {\n  'date': '2050-01-01',\n  'week': '土',\n  'week_en': 'Saturday',\n  'name': '元日',\n  'name_en': \"New Year's Day\"\n};\nholidays['2050-01-10'] = {\n  'date': '2050-01-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '成人の日',\n  'name_en': \"Coming of Age Day\"\n};\nholidays['2050-02-11'] = {\n  'date': '2050-02-11',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '建国記念の日',\n  'name_en': \"National Foundation Day\"\n};\nholidays['2050-02-23'] = {\n  'date': '2050-02-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '天皇誕生日',\n  'name_en': \"Emperor's Birthday\"\n};\nholidays['2050-03-20'] = {\n  'date': '2050-03-20',\n  'week': '日',\n  'week_en': 'Sunday',\n  'name': '春分の日',\n  'name_en': \"Vernal Equinox Day\"\n};\nholidays['2050-03-21'] = {\n  'date': '2050-03-21',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '春分の日 振替休日',\n  'name_en': \"Holiday in lieu\"\n};\nholidays['2050-04-29'] = {\n  'date': '2050-04-29',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '昭和の日',\n  'name_en': \"Showa Day\"\n};\nholidays['2050-05-03'] = {\n  'date': '2050-05-03',\n  'week': '火',\n  'week_en': 'Tuesday',\n  'name': '憲法記念日',\n  'name_en': \"Constitution Memorial Day\"\n};\nholidays['2050-05-04'] = {\n  'date': '2050-05-04',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': 'みどりの日',\n  'name_en': \"Greenery Day\"\n};\nholidays['2050-05-05'] = {\n  'date': '2050-05-05',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': 'こどもの日',\n  'name_en': \"Children's Day\"\n};\nholidays['2050-07-18'] = {\n  'date': '2050-07-18',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '海の日',\n  'name_en': \"Marine Day\"\n};\nholidays['2050-08-11'] = {\n  'date': '2050-08-11',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '山の日',\n  'name_en': \"Mountain Day\"\n};\nholidays['2050-09-19'] = {\n  'date': '2050-09-19',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': '敬老の日',\n  'name_en': \"Respect for the Aged Day\"\n};\nholidays['2050-09-23'] = {\n  'date': '2050-09-23',\n  'week': '金',\n  'week_en': 'Friday',\n  'name': '秋分の日',\n  'name_en': \"Autumnal Equinox Day\"\n};\nholidays['2050-10-10'] = {\n  'date': '2050-10-10',\n  'week': '月',\n  'week_en': 'Monday',\n  'name': 'スポーツの日',\n  'name_en': \"Health and Sports Day\"\n};\nholidays['2050-11-03'] = {\n  'date': '2050-11-03',\n  'week': '木',\n  'week_en': 'Thursday',\n  'name': '文化の日',\n  'name_en': \"National Culture Day\"\n};\nholidays['2050-11-23'] = {\n  'date': '2050-11-23',\n  'week': '水',\n  'week_en': 'Wednesday',\n  'name': '勤労感謝の日',\n  'name_en': \"Labor Thanksgiving Day\"\n};\nmodule.exports = holidays;\n\n//# sourceURL=webpack:///./lib/holidays.js?");
          /***/
        },

        /***/
        "./package.json":
        /*!**********************!*\
          !*** ./package.json ***!
          \**********************/

        /*! exports provided: name, version, description, main, scripts, repository, keywords, author, license, bugs, homepage, devDependencies, default */

        /***/
        function (module) {
          eval("module.exports = {\"name\":\"@holiday-jp/holiday_jp\",\"version\":\"2.2.0\",\"description\":\"Japanese holidays\",\"main\":\"release/holiday_jp.js\",\"scripts\":{\"test\":\"mocha --require should test/*.js\",\"generate\":\"git submodule update; cd holiday_jp/; git fetch origin master; git reset --hard origin/master; cd ../; node scripts/generate.js\",\"build\":\"npm run generate; webpack; node scripts/build.js;rm scripts/holiday_jp_webpacked.js;cd ./release/; uglifyjs holiday_jp.js -c -m --source-map -o holiday_jp.min.js\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/holiday-jp/holiday_jp-js\"},\"keywords\":[\"holidays\"],\"author\":\"Ken'ichiro Oyama\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/holiday-jp/holiday_jp-js/issues\"},\"homepage\":\"https://github.com/holiday-jp/holiday_jp-js\",\"devDependencies\":{\"chai\":\"^4.2.0\",\"js-yaml\":\"^3.12.0\",\"mocha\":\"^5.2.0\",\"moment\":\"^2.23.0\",\"should\":\"~1.2.2\",\"uglify-js\":\"^3.4.9\",\"webpack\":\"^4.28.2\"}};\n\n//# sourceURL=webpack:///./package.json?");
          /***/
        }
        /******/

      }); // AMD / RequireJS


      if (module.exports) {
        module.exports = holiday_jp;
      } // included directly via <script> tag
      else {
          root = Function('return this')();
          root.holiday_jp = holiday_jp;
        }
    })();
  });
  unwrapExports(holiday_jp);
  var anydownGantt = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      function resetHMS(d) {
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        d.setMilliseconds(0);
        return d;
      }

      function roundHMSfromEpoc(epoc) {
        return resetHMS(new Date(epoc + 24 * 60 * 60 * 1000 / 2)).getTime();
      }

      function getRelativeDate(day) {
        var d = new Date();
        resetHMS(d);
        d.setDate(d.getDate() + day);
        return d;
      }

      function getNewDate(str, offset) {
        var m = str.match(/(\d+)-(\d+)-(\d+)/);

        if (!m) {
          var _d = new Date();

          resetHMS(_d);
          return _d;
        }

        var ny = parseInt(m[1], 10);
        var nm = parseInt(m[2], 10) - 1;
        var nd = parseInt(m[3], 10);
        var d = new Date(ny, nm, nd);

        if (offset !== undefined) {
          d.setDate(d.getDate() + offset);
        }

        return d;
      }

      function getMonthArray() {
        return {
          "ja-JP": ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
          en: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
        };
      }

      var delimiter = ",";

      function compile(input) {
        var data = input.split(/[\r|\n|\r\n]/).filter(function (item) {
          return item.length > 0;
        });
        return data.map(function (item) {
          var ary = item.split(delimiter);
          return {
            name: ary[0],
            start: getNewDate(ary[1], 0).getTime(),
            end: getNewDate(ary[2], 1).getTime()
          };
        });
      }

      function zeropad(str) {
        return ("00" + str).slice(-2);
      }

      function ymd(d) {
        return "".concat(d.getFullYear(), "-").concat(zeropad(d.getMonth() + 1), "-").concat(zeropad(d.getDate()));
      }

      function ymdFromEpoc(epoc, offset) {
        var d = new Date(epoc);

        if (offset !== undefined) {
          d.setDate(d.getDate() + offset);
        }

        return ymd(d);
      }

      function serialize(tasks) {
        return tasks.map(function (item) {
          return "".concat(item.name).concat(delimiter).concat(ymdFromEpoc(item.start)).concat(delimiter).concat(ymdFromEpoc(item.end, -1));
        }).join("\n") + "\n";
      }

      function ascending(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
      }

      function bisector(compare) {
        if (compare.length === 1) compare = ascendingComparator(compare);
        return {
          left: function (a, x, lo, hi) {
            if (lo == null) lo = 0;
            if (hi == null) hi = a.length;

            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
            }

            return lo;
          },
          right: function (a, x, lo, hi) {
            if (lo == null) lo = 0;
            if (hi == null) hi = a.length;

            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
            }

            return lo;
          }
        };
      }

      function ascendingComparator(f) {
        return function (d, x) {
          return ascending(f(d), x);
        };
      }

      var ascendingBisect = bisector(ascending);
      var bisectRight = ascendingBisect.right;
      var e10 = Math.sqrt(50),
          e5 = Math.sqrt(10),
          e2 = Math.sqrt(2);

      function ticks(start, stop, count) {
        var reverse,
            i = -1,
            n,
            ticks,
            step;
        stop = +stop, start = +start, count = +count;
        if (start === stop && count > 0) return [start];
        if (reverse = stop < start) n = start, start = stop, stop = n;
        if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

        if (step > 0) {
          start = Math.ceil(start / step);
          stop = Math.floor(stop / step);
          ticks = new Array(n = Math.ceil(stop - start + 1));

          while (++i < n) ticks[i] = (start + i) * step;
        } else {
          start = Math.floor(start * step);
          stop = Math.ceil(stop * step);
          ticks = new Array(n = Math.ceil(start - stop + 1));

          while (++i < n) ticks[i] = (start - i) / step;
        }

        if (reverse) ticks.reverse();
        return ticks;
      }

      function tickIncrement(start, stop, count) {
        var step = (stop - start) / Math.max(0, count),
            power = Math.floor(Math.log(step) / Math.LN10),
            error = step / Math.pow(10, power);
        return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
      }

      function tickStep(start, stop, count) {
        var step0 = Math.abs(stop - start) / Math.max(0, count),
            step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
            error = step0 / step1;
        if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
        return stop < start ? -step1 : step1;
      }

      function initRange(domain, range) {
        switch (arguments.length) {
          case 0:
            break;

          case 1:
            this.range(domain);
            break;

          default:
            this.range(range).domain(domain);
            break;
        }

        return this;
      }

      function define(constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
      }

      function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);

        for (var key in definition) prototype[key] = definition[key];

        return prototype;
      }

      function Color() {}

      var darker = 0.7;
      var brighter = 1 / darker;
      var reI = "\\s*([+-]?\\d+)\\s*",
          reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
          reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
          reHex = /^#([0-9a-f]{3,8})$/,
          reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
          reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
          reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
          reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
          reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
          reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
      var named = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32
      };
      define(Color, color, {
        copy: function (channels) {
          return Object.assign(new this.constructor(), this, channels);
        },
        displayable: function () {
          return this.rgb().displayable();
        },
        hex: color_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: color_formatHex,
        formatHsl: color_formatHsl,
        formatRgb: color_formatRgb,
        toString: color_formatRgb
      });

      function color_formatHex() {
        return this.rgb().formatHex();
      }

      function color_formatHsl() {
        return hslConvert(this).formatHsl();
      }

      function color_formatRgb() {
        return this.rgb().formatRgb();
      }

      function color(format) {
        var m, l;
        format = (format + "").trim().toLowerCase();
        return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
        : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
        : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
        : l === 4 ? new Rgb(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
        : null // invalid hex
        ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
        : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
        : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
      }

      function rgbn(n) {
        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
      }

      function rgba(r, g, b, a) {
        if (a <= 0) r = g = b = NaN;
        return new Rgb(r, g, b, a);
      }

      function rgbConvert(o) {
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Rgb();
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity);
      }

      function rgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
      }

      function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity;
      }

      define(Rgb, rgb, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb: function () {
          return this;
        },
        displayable: function () {
          return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
        },
        hex: rgb_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: rgb_formatHex,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
      }));

      function rgb_formatHex() {
        return "#" + hex(this.r) + hex(this.g) + hex(this.b);
      }

      function rgb_formatRgb() {
        var a = this.opacity;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
      }

      function hex(value) {
        value = Math.max(0, Math.min(255, Math.round(value) || 0));
        return (value < 16 ? "0" : "") + value.toString(16);
      }

      function hsla(h, s, l, a) {
        if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
        return new Hsl(h, s, l, a);
      }

      function hslConvert(o) {
        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Hsl();
        if (o instanceof Hsl) return o;
        o = o.rgb();
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            min = Math.min(r, g, b),
            max = Math.max(r, g, b),
            h = NaN,
            s = max - min,
            l = (max + min) / 2;

        if (s) {
          if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
          s /= l < 0.5 ? max + min : 2 - max - min;
          h *= 60;
        } else {
          s = l > 0 && l < 1 ? 0 : h;
        }

        return new Hsl(h, s, l, o.opacity);
      }

      function hsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
      }

      function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
      }

      define(Hsl, hsl, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function () {
          var h = this.h % 360 + (this.h < 0) * 360,
              s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
              l = this.l,
              m2 = l + (l < 0.5 ? l : 1 - l) * s,
              m1 = 2 * l - m2;
          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function () {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
        },
        formatHsl: function () {
          var a = this.opacity;
          a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
          return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
        }
      }));
      /* From FvD 13.37, CSS Color Module Level 3 */

      function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
      }

      var deg2rad = Math.PI / 180;
      var rad2deg = 180 / Math.PI; // https://observablehq.com/@mbostock/lab-and-rgb

      var K = 18,
          Xn = 0.96422,
          Yn = 1,
          Zn = 0.82521,
          t0 = 4 / 29,
          t1 = 6 / 29,
          t2 = 3 * t1 * t1,
          t3 = t1 * t1 * t1;

      function labConvert(o) {
        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
        if (o instanceof Hcl) return hcl2lab(o);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = rgb2lrgb(o.r),
            g = rgb2lrgb(o.g),
            b = rgb2lrgb(o.b),
            y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
            x,
            z;
        if (r === g && g === b) x = z = y;else {
          x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
          z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
        }
        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
      }

      function lab(l, a, b, opacity) {
        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
      }

      function Lab(l, a, b, opacity) {
        this.l = +l;
        this.a = +a;
        this.b = +b;
        this.opacity = +opacity;
      }

      define(Lab, lab, extend(Color, {
        brighter: function (k) {
          return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        darker: function (k) {
          return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        rgb: function () {
          var y = (this.l + 16) / 116,
              x = isNaN(this.a) ? y : y + this.a / 500,
              z = isNaN(this.b) ? y : y - this.b / 200;
          x = Xn * lab2xyz(x);
          y = Yn * lab2xyz(y);
          z = Zn * lab2xyz(z);
          return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
        }
      }));

      function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
      }

      function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0);
      }

      function lrgb2rgb(x) {
        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
      }

      function rgb2lrgb(x) {
        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
      }

      function hclConvert(o) {
        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
        if (!(o instanceof Lab)) o = labConvert(o);
        if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
        var h = Math.atan2(o.b, o.a) * rad2deg;
        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
      }

      function hcl(h, c, l, opacity) {
        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
      }

      function Hcl(h, c, l, opacity) {
        this.h = +h;
        this.c = +c;
        this.l = +l;
        this.opacity = +opacity;
      }

      function hcl2lab(o) {
        if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
        var h = o.h * deg2rad;
        return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
      }

      define(Hcl, hcl, extend(Color, {
        brighter: function (k) {
          return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
        },
        darker: function (k) {
          return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
        },
        rgb: function () {
          return hcl2lab(this).rgb();
        }
      }));
      var A = -0.14861,
          B = +1.78277,
          C = -0.29227,
          D = -0.90649,
          E = +1.97294,
          ED = E * D,
          EB = E * B,
          BC_DA = B * C - D * A;

      function cubehelixConvert(o) {
        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
            bl = b - l,
            k = (E * (g - l) - C * bl) / D,
            s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
            // NaN if l=0 or l=1
        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
      }

      function cubehelix(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
      }

      function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
      }

      define(Cubehelix, cubehelix, extend(Color, {
        brighter: function (k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function (k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function () {
          var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
              l = +this.l,
              a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
              cosh = Math.cos(h),
              sinh = Math.sin(h);
          return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
        }
      }));

      function constant(x) {
        return function () {
          return x;
        };
      }

      function linear(a, d) {
        return function (t) {
          return a + t * d;
        };
      }

      function exponential(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
          return Math.pow(a + t * b, y);
        };
      }

      function gamma(y) {
        return (y = +y) === 1 ? nogamma : function (a, b) {
          return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
        };
      }

      function nogamma(a, b) {
        var d = b - a;
        return d ? linear(a, d) : constant(isNaN(a) ? b : a);
      }

      var rgb$1 = function rgbGamma(y) {
        var color = gamma(y);

        function rgb$1(start, end) {
          var r = color((start = rgb(start)).r, (end = rgb(end)).r),
              g = color(start.g, end.g),
              b = color(start.b, end.b),
              opacity = nogamma(start.opacity, end.opacity);
          return function (t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
          };
        }

        rgb$1.gamma = rgbGamma;
        return rgb$1;
      }(1);

      function numberArray(a, b) {
        if (!b) b = [];
        var n = a ? Math.min(b.length, a.length) : 0,
            c = b.slice(),
            i;
        return function (t) {
          for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

          return c;
        };
      }

      function isNumberArray(x) {
        return ArrayBuffer.isView(x) && !(x instanceof DataView);
      }

      function genericArray(a, b) {
        var nb = b ? b.length : 0,
            na = a ? Math.min(nb, a.length) : 0,
            x = new Array(na),
            c = new Array(nb),
            i;

        for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);

        for (; i < nb; ++i) c[i] = b[i];

        return function (t) {
          for (i = 0; i < na; ++i) c[i] = x[i](t);

          return c;
        };
      }

      function date(a, b) {
        var d = new Date();
        return a = +a, b = +b, function (t) {
          return d.setTime(a * (1 - t) + b * t), d;
        };
      }

      function interpolateNumber(a, b) {
        return a = +a, b = +b, function (t) {
          return a * (1 - t) + b * t;
        };
      }

      function object(a, b) {
        var i = {},
            c = {},
            k;
        if (a === null || typeof a !== "object") a = {};
        if (b === null || typeof b !== "object") b = {};

        for (k in b) {
          if (k in a) {
            i[k] = interpolate(a[k], b[k]);
          } else {
            c[k] = b[k];
          }
        }

        return function (t) {
          for (k in i) c[k] = i[k](t);

          return c;
        };
      }

      var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
          reB = new RegExp(reA.source, "g");

      function zero(b) {
        return function () {
          return b;
        };
      }

      function one(b) {
        return function (t) {
          return b(t) + "";
        };
      }

      function string(a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0,
            // scan index for next number in b
        am,
            // current match in a
        bm,
            // current match in b
        bs,
            // string preceding current number in b, if any
        i = -1,
            // index in s
        s = [],
            // string constants and placeholders
        q = []; // number interpolators
        // Coerce inputs to strings.

        a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
          if ((bs = bm.index) > bi) {
            // a string precedes the next number in b
            bs = b.slice(bi, bs);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
          }

          if ((am = am[0]) === (bm = bm[0])) {
            // numbers in a & b match
            if (s[i]) s[i] += bm; // coalesce with previous string
            else s[++i] = bm;
          } else {
            // interpolate non-matching numbers
            s[++i] = null;
            q.push({
              i: i,
              x: interpolateNumber(am, bm)
            });
          }

          bi = reB.lastIndex;
        } // Add remains of b.


        if (bi < b.length) {
          bs = b.slice(bi);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        } // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.


        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

          return s.join("");
        });
      }

      function interpolate(a, b) {
        var t = typeof b,
            c;
        return b == null || t === "boolean" ? constant(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, rgb$1) : string : b instanceof color ? rgb$1 : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
      }

      function interpolateRound(a, b) {
        return a = +a, b = +b, function (t) {
          return Math.round(a * (1 - t) + b * t);
        };
      }

      function constant$1(x) {
        return function () {
          return x;
        };
      }

      function number(x) {
        return +x;
      }

      var unit = [0, 1];

      function identity(x) {
        return x;
      }

      function normalize(a, b) {
        return (b -= a = +a) ? function (x) {
          return (x - a) / b;
        } : constant$1(isNaN(b) ? NaN : 0.5);
      }

      function clamper(a, b) {
        var t;
        if (a > b) t = a, a = b, b = t;
        return function (x) {
          return Math.max(a, Math.min(b, x));
        };
      } // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
      // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


      function bimap(domain, range, interpolate) {
        var d0 = domain[0],
            d1 = domain[1],
            r0 = range[0],
            r1 = range[1];
        if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
        return function (x) {
          return r0(d0(x));
        };
      }

      function polymap(domain, range, interpolate) {
        var j = Math.min(domain.length, range.length) - 1,
            d = new Array(j),
            r = new Array(j),
            i = -1; // Reverse descending domains.

        if (domain[j] < domain[0]) {
          domain = domain.slice().reverse();
          range = range.slice().reverse();
        }

        while (++i < j) {
          d[i] = normalize(domain[i], domain[i + 1]);
          r[i] = interpolate(range[i], range[i + 1]);
        }

        return function (x) {
          var i = bisectRight(domain, x, 1, j) - 1;
          return r[i](d[i](x));
        };
      }

      function copy(source, target) {
        return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
      }

      function transformer() {
        var domain = unit,
            range = unit,
            interpolate$1 = interpolate,
            transform,
            untransform,
            unknown,
            clamp = identity,
            piecewise,
            output,
            input;

        function rescale() {
          var n = Math.min(domain.length, range.length);
          if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
          piecewise = n > 2 ? polymap : bimap;
          output = input = null;
          return scale;
        }

        function scale(x) {
          return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
        }

        scale.invert = function (y) {
          return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
        };

        scale.domain = function (_) {
          return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
        };

        scale.range = function (_) {
          return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
        };

        scale.rangeRound = function (_) {
          return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
        };

        scale.clamp = function (_) {
          return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
        };

        scale.interpolate = function (_) {
          return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
        };

        scale.unknown = function (_) {
          return arguments.length ? (unknown = _, scale) : unknown;
        };

        return function (t, u) {
          transform = t, untransform = u;
          return rescale();
        };
      }

      function continuous() {
        return transformer()(identity, identity);
      } // Computes the decimal coefficient and exponent of the specified number x with
      // significant digits p, where x is positive and p is in [1, 21] or undefined.
      // For example, formatDecimal(1.23) returns ["123", 0].


      function formatDecimal(x, p) {
        if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

        var i,
            coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
        // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

        return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
      }

      function exponent(x) {
        return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
      }

      function formatGroup(grouping, thousands) {
        return function (value, width) {
          var i = value.length,
              t = [],
              j = 0,
              g = grouping[0],
              length = 0;

          while (i > 0 && g > 0) {
            if (length + g + 1 > width) g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width) break;
            g = grouping[j = (j + 1) % grouping.length];
          }

          return t.reverse().join(thousands);
        };
      }

      function formatNumerals(numerals) {
        return function (value) {
          return value.replace(/[0-9]/g, function (i) {
            return numerals[+i];
          });
        };
      } // [[fill]align][sign][symbol][0][width][,][.precision][~][type]


      var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

      function formatSpecifier(specifier) {
        if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
        var match;
        return new FormatSpecifier({
          fill: match[1],
          align: match[2],
          sign: match[3],
          symbol: match[4],
          zero: match[5],
          width: match[6],
          comma: match[7],
          precision: match[8] && match[8].slice(1),
          trim: match[9],
          type: match[10]
        });
      }

      formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

      function FormatSpecifier(specifier) {
        this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
        this.align = specifier.align === undefined ? ">" : specifier.align + "";
        this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
        this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
        this.zero = !!specifier.zero;
        this.width = specifier.width === undefined ? undefined : +specifier.width;
        this.comma = !!specifier.comma;
        this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
        this.trim = !!specifier.trim;
        this.type = specifier.type === undefined ? "" : specifier.type + "";
      }

      FormatSpecifier.prototype.toString = function () {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
      }; // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.


      function formatTrim(s) {
        out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
          switch (s[i]) {
            case ".":
              i0 = i1 = i;
              break;

            case "0":
              if (i0 === 0) i0 = i;
              i1 = i;
              break;

            default:
              if (!+s[i]) break out;
              if (i0 > 0) i0 = 0;
              break;
          }
        }

        return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
      }

      var prefixExponent;

      function formatPrefixAuto(x, p) {
        var d = formatDecimal(x, p);
        if (!d) return x + "";
        var coefficient = d[0],
            exponent = d[1],
            i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
            n = coefficient.length;
        return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
      }

      function formatRounded(x, p) {
        var d = formatDecimal(x, p);
        if (!d) return x + "";
        var coefficient = d[0],
            exponent = d[1];
        return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
      }

      var formatTypes = {
        "%": function (x, p) {
          return (x * 100).toFixed(p);
        },
        "b": function (x) {
          return Math.round(x).toString(2);
        },
        "c": function (x) {
          return x + "";
        },
        "d": function (x) {
          return Math.round(x).toString(10);
        },
        "e": function (x, p) {
          return x.toExponential(p);
        },
        "f": function (x, p) {
          return x.toFixed(p);
        },
        "g": function (x, p) {
          return x.toPrecision(p);
        },
        "o": function (x) {
          return Math.round(x).toString(8);
        },
        "p": function (x, p) {
          return formatRounded(x * 100, p);
        },
        "r": formatRounded,
        "s": formatPrefixAuto,
        "X": function (x) {
          return Math.round(x).toString(16).toUpperCase();
        },
        "x": function (x) {
          return Math.round(x).toString(16);
        }
      };

      function identity$1(x) {
        return x;
      }

      var map = Array.prototype.map,
          prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

      function formatLocale(locale) {
        var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
            currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
            currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
            decimal = locale.decimal === undefined ? "." : locale.decimal + "",
            numerals = locale.numerals === undefined ? identity$1 : formatNumerals(map.call(locale.numerals, String)),
            percent = locale.percent === undefined ? "%" : locale.percent + "",
            minus = locale.minus === undefined ? "-" : locale.minus + "",
            nan = locale.nan === undefined ? "NaN" : locale.nan + "";

        function newFormat(specifier) {
          specifier = formatSpecifier(specifier);
          var fill = specifier.fill,
              align = specifier.align,
              sign = specifier.sign,
              symbol = specifier.symbol,
              zero = specifier.zero,
              width = specifier.width,
              comma = specifier.comma,
              precision = specifier.precision,
              trim = specifier.trim,
              type = specifier.type; // The "n" type is an alias for ",g".

          if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
          else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

          if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
          // For SI-prefix, the suffix is lazily computed.

          var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
              suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
          // Is this an integer type?
          // Can this type generate exponential notation?

          var formatType = formatTypes[type],
              maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
          // or clamp the specified precision to the supported range.
          // For significant precision, it must be in [1, 21].
          // For fixed precision, it must be in [0, 20].

          precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

          function format(value) {
            var valuePrefix = prefix,
                valueSuffix = suffix,
                i,
                n,
                c;

            if (type === "c") {
              valueSuffix = formatType(value) + valueSuffix;
              value = "";
            } else {
              value = +value; // Perform the initial formatting.

              var valueNegative = value < 0;
              value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

              if (trim) value = formatTrim(value); // If a negative value rounds to zero during formatting, treat as positive.

              if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

              valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
              valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
              // grouped, and fractional or exponential “suffix” part that is not.

              if (maybeSuffix) {
                i = -1, n = value.length;

                while (++i < n) {
                  if (c = value.charCodeAt(i), 48 > c || c > 57) {
                    valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                    value = value.slice(0, i);
                    break;
                  }
                }
              }
            } // If the fill character is not "0", grouping is applied before padding.


            if (comma && !zero) value = group(value, Infinity); // Compute the padding.

            var length = valuePrefix.length + value.length + valueSuffix.length,
                padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

            if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

            switch (align) {
              case "<":
                value = valuePrefix + value + valueSuffix + padding;
                break;

              case "=":
                value = valuePrefix + padding + value + valueSuffix;
                break;

              case "^":
                value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                break;

              default:
                value = padding + valuePrefix + value + valueSuffix;
                break;
            }

            return numerals(value);
          }

          format.toString = function () {
            return specifier + "";
          };

          return format;
        }

        function formatPrefix(specifier, value) {
          var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
              e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
              k = Math.pow(10, -e),
              prefix = prefixes[8 + e / 3];
          return function (value) {
            return f(k * value) + prefix;
          };
        }

        return {
          format: newFormat,
          formatPrefix: formatPrefix
        };
      }

      var locale;
      var format;
      var formatPrefix;
      defaultLocale({
        decimal: ".",
        thousands: ",",
        grouping: [3],
        currency: ["$", ""],
        minus: "-"
      });

      function defaultLocale(definition) {
        locale = formatLocale(definition);
        format = locale.format;
        formatPrefix = locale.formatPrefix;
        return locale;
      }

      function precisionFixed(step) {
        return Math.max(0, -exponent(Math.abs(step)));
      }

      function precisionPrefix(step, value) {
        return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
      }

      function precisionRound(step, max) {
        step = Math.abs(step), max = Math.abs(max) - step;
        return Math.max(0, exponent(max) - exponent(step)) + 1;
      }

      function tickFormat(start, stop, count, specifier) {
        var step = tickStep(start, stop, count),
            precision;
        specifier = formatSpecifier(specifier == null ? ",f" : specifier);

        switch (specifier.type) {
          case "s":
            {
              var value = Math.max(Math.abs(start), Math.abs(stop));
              if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
              return formatPrefix(specifier, value);
            }

          case "":
          case "e":
          case "g":
          case "p":
          case "r":
            {
              if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
              break;
            }

          case "f":
          case "%":
            {
              if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
              break;
            }
        }

        return format(specifier);
      }

      function linearish(scale) {
        var domain = scale.domain;

        scale.ticks = function (count) {
          var d = domain();
          return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
        };

        scale.tickFormat = function (count, specifier) {
          var d = domain();
          return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
        };

        scale.nice = function (count) {
          if (count == null) count = 10;
          var d = domain(),
              i0 = 0,
              i1 = d.length - 1,
              start = d[i0],
              stop = d[i1],
              step;

          if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
          }

          step = tickIncrement(start, stop, count);

          if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
            step = tickIncrement(start, stop, count);
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
            step = tickIncrement(start, stop, count);
          }

          if (step > 0) {
            d[i0] = Math.floor(start / step) * step;
            d[i1] = Math.ceil(stop / step) * step;
            domain(d);
          } else if (step < 0) {
            d[i0] = Math.ceil(start * step) / step;
            d[i1] = Math.floor(stop * step) / step;
            domain(d);
          }

          return scale;
        };

        return scale;
      }

      function linear$1() {
        var scale = continuous();

        scale.copy = function () {
          return copy(scale, linear$1());
        };

        initRange.apply(scale, arguments);
        return linearish(scale);
      }

      var t0$1 = new Date(),
          t1$1 = new Date();

      function newInterval(floori, offseti, count, field) {
        function interval(date) {
          return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
        }

        interval.floor = function (date) {
          return floori(date = new Date(+date)), date;
        };

        interval.ceil = function (date) {
          return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
        };

        interval.round = function (date) {
          var d0 = interval(date),
              d1 = interval.ceil(date);
          return date - d0 < d1 - date ? d0 : d1;
        };

        interval.offset = function (date, step) {
          return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
        };

        interval.range = function (start, stop, step) {
          var range = [],
              previous;
          start = interval.ceil(start);
          step = step == null ? 1 : Math.floor(step);
          if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

          do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

          return range;
        };

        interval.filter = function (test) {
          return newInterval(function (date) {
            if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
          }, function (date, step) {
            if (date >= date) {
              if (step < 0) while (++step <= 0) {
                while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

              } else while (--step >= 0) {
                while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

              }
            }
          });
        };

        if (count) {
          interval.count = function (start, end) {
            t0$1.setTime(+start), t1$1.setTime(+end);
            floori(t0$1), floori(t1$1);
            return Math.floor(count(t0$1, t1$1));
          };

          interval.every = function (step) {
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
              return field(d) % step === 0;
            } : function (d) {
              return interval.count(0, d) % step === 0;
            });
          };
        }

        return interval;
      }

      var millisecond = newInterval(function () {// noop
      }, function (date, step) {
        date.setTime(+date + step);
      }, function (start, end) {
        return end - start;
      }); // An optimized implementation for this simple case.

      millisecond.every = function (k) {
        k = Math.floor(k);
        if (!isFinite(k) || !(k > 0)) return null;
        if (!(k > 1)) return millisecond;
        return newInterval(function (date) {
          date.setTime(Math.floor(date / k) * k);
        }, function (date, step) {
          date.setTime(+date + step * k);
        }, function (start, end) {
          return (end - start) / k;
        });
      };

      var durationSecond = 1e3;
      var durationMinute = 6e4;
      var durationHour = 36e5;
      var durationDay = 864e5;
      var durationWeek = 6048e5;
      var second = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds());
      }, function (date, step) {
        date.setTime(+date + step * durationSecond);
      }, function (start, end) {
        return (end - start) / durationSecond;
      }, function (date) {
        return date.getUTCSeconds();
      });
      var minute = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
      }, function (date, step) {
        date.setTime(+date + step * durationMinute);
      }, function (start, end) {
        return (end - start) / durationMinute;
      }, function (date) {
        return date.getMinutes();
      });
      var hour = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
      }, function (date, step) {
        date.setTime(+date + step * durationHour);
      }, function (start, end) {
        return (end - start) / durationHour;
      }, function (date) {
        return date.getHours();
      });
      var day = newInterval(function (date) {
        date.setHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setDate(date.getDate() + step);
      }, function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
      }, function (date) {
        return date.getDate() - 1;
      });

      function weekday(i) {
        return newInterval(function (date) {
          date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
          date.setHours(0, 0, 0, 0);
        }, function (date, step) {
          date.setDate(date.getDate() + step * 7);
        }, function (start, end) {
          return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
        });
      }

      var sunday = weekday(0);
      var monday = weekday(1);
      var tuesday = weekday(2);
      var wednesday = weekday(3);
      var thursday = weekday(4);
      var friday = weekday(5);
      var saturday = weekday(6);
      var month = newInterval(function (date) {
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setMonth(date.getMonth() + step);
      }, function (start, end) {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
      }, function (date) {
        return date.getMonth();
      });
      var year = newInterval(function (date) {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setFullYear(date.getFullYear() + step);
      }, function (start, end) {
        return end.getFullYear() - start.getFullYear();
      }, function (date) {
        return date.getFullYear();
      }); // An optimized implementation for this simple case.

      year.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
          date.setFullYear(Math.floor(date.getFullYear() / k) * k);
          date.setMonth(0, 1);
          date.setHours(0, 0, 0, 0);
        }, function (date, step) {
          date.setFullYear(date.getFullYear() + step * k);
        });
      };

      var utcMinute = newInterval(function (date) {
        date.setUTCSeconds(0, 0);
      }, function (date, step) {
        date.setTime(+date + step * durationMinute);
      }, function (start, end) {
        return (end - start) / durationMinute;
      }, function (date) {
        return date.getUTCMinutes();
      });
      var utcHour = newInterval(function (date) {
        date.setUTCMinutes(0, 0, 0);
      }, function (date, step) {
        date.setTime(+date + step * durationHour);
      }, function (start, end) {
        return (end - start) / durationHour;
      }, function (date) {
        return date.getUTCHours();
      });
      var utcDay = newInterval(function (date) {
        date.setUTCHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setUTCDate(date.getUTCDate() + step);
      }, function (start, end) {
        return (end - start) / durationDay;
      }, function (date) {
        return date.getUTCDate() - 1;
      });

      function utcWeekday(i) {
        return newInterval(function (date) {
          date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
          date.setUTCHours(0, 0, 0, 0);
        }, function (date, step) {
          date.setUTCDate(date.getUTCDate() + step * 7);
        }, function (start, end) {
          return (end - start) / durationWeek;
        });
      }

      var utcSunday = utcWeekday(0);
      var utcMonday = utcWeekday(1);
      var utcTuesday = utcWeekday(2);
      var utcWednesday = utcWeekday(3);
      var utcThursday = utcWeekday(4);
      var utcFriday = utcWeekday(5);
      var utcSaturday = utcWeekday(6);
      var utcMonth = newInterval(function (date) {
        date.setUTCDate(1);
        date.setUTCHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setUTCMonth(date.getUTCMonth() + step);
      }, function (start, end) {
        return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
      }, function (date) {
        return date.getUTCMonth();
      });
      var utcYear = newInterval(function (date) {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function (date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step);
      }, function (start, end) {
        return end.getUTCFullYear() - start.getUTCFullYear();
      }, function (date) {
        return date.getUTCFullYear();
      }); // An optimized implementation for this simple case.

      utcYear.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
          date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
          date.setUTCMonth(0, 1);
          date.setUTCHours(0, 0, 0, 0);
        }, function (date, step) {
          date.setUTCFullYear(date.getUTCFullYear() + step * k);
        });
      };

      function localDate(d) {
        if (0 <= d.y && d.y < 100) {
          var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
          date.setFullYear(d.y);
          return date;
        }

        return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
      }

      function utcDate(d) {
        if (0 <= d.y && d.y < 100) {
          var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
          date.setUTCFullYear(d.y);
          return date;
        }

        return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
      }

      function newDate(y, m, d) {
        return {
          y: y,
          m: m,
          d: d,
          H: 0,
          M: 0,
          S: 0,
          L: 0
        };
      }

      function formatLocale$1(locale) {
        var locale_dateTime = locale.dateTime,
            locale_date = locale.date,
            locale_time = locale.time,
            locale_periods = locale.periods,
            locale_weekdays = locale.days,
            locale_shortWeekdays = locale.shortDays,
            locale_months = locale.months,
            locale_shortMonths = locale.shortMonths;
        var periodRe = formatRe(locale_periods),
            periodLookup = formatLookup(locale_periods),
            weekdayRe = formatRe(locale_weekdays),
            weekdayLookup = formatLookup(locale_weekdays),
            shortWeekdayRe = formatRe(locale_shortWeekdays),
            shortWeekdayLookup = formatLookup(locale_shortWeekdays),
            monthRe = formatRe(locale_months),
            monthLookup = formatLookup(locale_months),
            shortMonthRe = formatRe(locale_shortMonths),
            shortMonthLookup = formatLookup(locale_shortMonths);
        var formats = {
          "a": formatShortWeekday,
          "A": formatWeekday,
          "b": formatShortMonth,
          "B": formatMonth,
          "c": null,
          "d": formatDayOfMonth,
          "e": formatDayOfMonth,
          "f": formatMicroseconds,
          "H": formatHour24,
          "I": formatHour12,
          "j": formatDayOfYear,
          "L": formatMilliseconds,
          "m": formatMonthNumber,
          "M": formatMinutes,
          "p": formatPeriod,
          "q": formatQuarter,
          "Q": formatUnixTimestamp,
          "s": formatUnixTimestampSeconds,
          "S": formatSeconds,
          "u": formatWeekdayNumberMonday,
          "U": formatWeekNumberSunday,
          "V": formatWeekNumberISO,
          "w": formatWeekdayNumberSunday,
          "W": formatWeekNumberMonday,
          "x": null,
          "X": null,
          "y": formatYear,
          "Y": formatFullYear,
          "Z": formatZone,
          "%": formatLiteralPercent
        };
        var utcFormats = {
          "a": formatUTCShortWeekday,
          "A": formatUTCWeekday,
          "b": formatUTCShortMonth,
          "B": formatUTCMonth,
          "c": null,
          "d": formatUTCDayOfMonth,
          "e": formatUTCDayOfMonth,
          "f": formatUTCMicroseconds,
          "H": formatUTCHour24,
          "I": formatUTCHour12,
          "j": formatUTCDayOfYear,
          "L": formatUTCMilliseconds,
          "m": formatUTCMonthNumber,
          "M": formatUTCMinutes,
          "p": formatUTCPeriod,
          "q": formatUTCQuarter,
          "Q": formatUnixTimestamp,
          "s": formatUnixTimestampSeconds,
          "S": formatUTCSeconds,
          "u": formatUTCWeekdayNumberMonday,
          "U": formatUTCWeekNumberSunday,
          "V": formatUTCWeekNumberISO,
          "w": formatUTCWeekdayNumberSunday,
          "W": formatUTCWeekNumberMonday,
          "x": null,
          "X": null,
          "y": formatUTCYear,
          "Y": formatUTCFullYear,
          "Z": formatUTCZone,
          "%": formatLiteralPercent
        };
        var parses = {
          "a": parseShortWeekday,
          "A": parseWeekday,
          "b": parseShortMonth,
          "B": parseMonth,
          "c": parseLocaleDateTime,
          "d": parseDayOfMonth,
          "e": parseDayOfMonth,
          "f": parseMicroseconds,
          "H": parseHour24,
          "I": parseHour24,
          "j": parseDayOfYear,
          "L": parseMilliseconds,
          "m": parseMonthNumber,
          "M": parseMinutes,
          "p": parsePeriod,
          "q": parseQuarter,
          "Q": parseUnixTimestamp,
          "s": parseUnixTimestampSeconds,
          "S": parseSeconds,
          "u": parseWeekdayNumberMonday,
          "U": parseWeekNumberSunday,
          "V": parseWeekNumberISO,
          "w": parseWeekdayNumberSunday,
          "W": parseWeekNumberMonday,
          "x": parseLocaleDate,
          "X": parseLocaleTime,
          "y": parseYear,
          "Y": parseFullYear,
          "Z": parseZone,
          "%": parseLiteralPercent
        }; // These recursive directive definitions must be deferred.

        formats.x = newFormat(locale_date, formats);
        formats.X = newFormat(locale_time, formats);
        formats.c = newFormat(locale_dateTime, formats);
        utcFormats.x = newFormat(locale_date, utcFormats);
        utcFormats.X = newFormat(locale_time, utcFormats);
        utcFormats.c = newFormat(locale_dateTime, utcFormats);

        function newFormat(specifier, formats) {
          return function (date) {
            var string = [],
                i = -1,
                j = 0,
                n = specifier.length,
                c,
                pad,
                format;
            if (!(date instanceof Date)) date = new Date(+date);

            while (++i < n) {
              if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
                if (format = formats[c]) c = format(date, pad);
                string.push(c);
                j = i + 1;
              }
            }

            string.push(specifier.slice(j, i));
            return string.join("");
          };
        }

        function newParse(specifier, Z) {
          return function (string) {
            var d = newDate(1900, undefined, 1),
                i = parseSpecifier(d, specifier, string += "", 0),
                week,
                day$1;
            if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

            if ("Q" in d) return new Date(d.Q);
            if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

            if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

            if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

            if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

            if ("V" in d) {
              if (d.V < 1 || d.V > 53) return null;
              if (!("w" in d)) d.w = 1;

              if ("Z" in d) {
                week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
                week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
                week = utcDay.offset(week, (d.V - 1) * 7);
                d.y = week.getUTCFullYear();
                d.m = week.getUTCMonth();
                d.d = week.getUTCDate() + (d.w + 6) % 7;
              } else {
                week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
                week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
                week = day.offset(week, (d.V - 1) * 7);
                d.y = week.getFullYear();
                d.m = week.getMonth();
                d.d = week.getDate() + (d.w + 6) % 7;
              }
            } else if ("W" in d || "U" in d) {
              if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
              day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
              d.m = 0;
              d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
            } // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.


            if ("Z" in d) {
              d.H += d.Z / 100 | 0;
              d.M += d.Z % 100;
              return utcDate(d);
            } // Otherwise, all fields are in local time.


            return localDate(d);
          };
        }

        function parseSpecifier(d, specifier, string, j) {
          var i = 0,
              n = specifier.length,
              m = string.length,
              c,
              parse;

          while (i < n) {
            if (j >= m) return -1;
            c = specifier.charCodeAt(i++);

            if (c === 37) {
              c = specifier.charAt(i++);
              parse = parses[c in pads ? specifier.charAt(i++) : c];
              if (!parse || (j = parse(d, string, j)) < 0) return -1;
            } else if (c != string.charCodeAt(j++)) {
              return -1;
            }
          }

          return j;
        }

        function parsePeriod(d, string, i) {
          var n = periodRe.exec(string.slice(i));
          return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }

        function parseShortWeekday(d, string, i) {
          var n = shortWeekdayRe.exec(string.slice(i));
          return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }

        function parseWeekday(d, string, i) {
          var n = weekdayRe.exec(string.slice(i));
          return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }

        function parseShortMonth(d, string, i) {
          var n = shortMonthRe.exec(string.slice(i));
          return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }

        function parseMonth(d, string, i) {
          var n = monthRe.exec(string.slice(i));
          return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }

        function parseLocaleDateTime(d, string, i) {
          return parseSpecifier(d, locale_dateTime, string, i);
        }

        function parseLocaleDate(d, string, i) {
          return parseSpecifier(d, locale_date, string, i);
        }

        function parseLocaleTime(d, string, i) {
          return parseSpecifier(d, locale_time, string, i);
        }

        function formatShortWeekday(d) {
          return locale_shortWeekdays[d.getDay()];
        }

        function formatWeekday(d) {
          return locale_weekdays[d.getDay()];
        }

        function formatShortMonth(d) {
          return locale_shortMonths[d.getMonth()];
        }

        function formatMonth(d) {
          return locale_months[d.getMonth()];
        }

        function formatPeriod(d) {
          return locale_periods[+(d.getHours() >= 12)];
        }

        function formatQuarter(d) {
          return 1 + ~~(d.getMonth() / 3);
        }

        function formatUTCShortWeekday(d) {
          return locale_shortWeekdays[d.getUTCDay()];
        }

        function formatUTCWeekday(d) {
          return locale_weekdays[d.getUTCDay()];
        }

        function formatUTCShortMonth(d) {
          return locale_shortMonths[d.getUTCMonth()];
        }

        function formatUTCMonth(d) {
          return locale_months[d.getUTCMonth()];
        }

        function formatUTCPeriod(d) {
          return locale_periods[+(d.getUTCHours() >= 12)];
        }

        function formatUTCQuarter(d) {
          return 1 + ~~(d.getUTCMonth() / 3);
        }

        return {
          format: function (specifier) {
            var f = newFormat(specifier += "", formats);

            f.toString = function () {
              return specifier;
            };

            return f;
          },
          parse: function (specifier) {
            var p = newParse(specifier += "", false);

            p.toString = function () {
              return specifier;
            };

            return p;
          },
          utcFormat: function (specifier) {
            var f = newFormat(specifier += "", utcFormats);

            f.toString = function () {
              return specifier;
            };

            return f;
          },
          utcParse: function (specifier) {
            var p = newParse(specifier += "", true);

            p.toString = function () {
              return specifier;
            };

            return p;
          }
        };
      }

      var pads = {
        "-": "",
        "_": " ",
        "0": "0"
      },
          numberRe = /^\s*\d+/,
          // note: ignores next directive
      percentRe = /^%/,
          requoteRe = /[\\^$*+?|[\]().{}]/g;

      function pad(value, fill, width) {
        var sign = value < 0 ? "-" : "",
            string = (sign ? -value : value) + "",
            length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
      }

      function requote(s) {
        return s.replace(requoteRe, "\\$&");
      }

      function formatRe(names) {
        return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
      }

      function formatLookup(names) {
        var map = {},
            i = -1,
            n = names.length;

        while (++i < n) map[names[i].toLowerCase()] = i;

        return map;
      }

      function parseWeekdayNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.w = +n[0], i + n[0].length) : -1;
      }

      function parseWeekdayNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.u = +n[0], i + n[0].length) : -1;
      }

      function parseWeekNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.U = +n[0], i + n[0].length) : -1;
      }

      function parseWeekNumberISO(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.V = +n[0], i + n[0].length) : -1;
      }

      function parseWeekNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.W = +n[0], i + n[0].length) : -1;
      }

      function parseFullYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 4));
        return n ? (d.y = +n[0], i + n[0].length) : -1;
      }

      function parseYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
      }

      function parseZone(d, string, i) {
        var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
        return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
      }

      function parseQuarter(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
      }

      function parseMonthNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
      }

      function parseDayOfMonth(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.d = +n[0], i + n[0].length) : -1;
      }

      function parseDayOfYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
      }

      function parseHour24(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.H = +n[0], i + n[0].length) : -1;
      }

      function parseMinutes(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.M = +n[0], i + n[0].length) : -1;
      }

      function parseSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.S = +n[0], i + n[0].length) : -1;
      }

      function parseMilliseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.L = +n[0], i + n[0].length) : -1;
      }

      function parseMicroseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 6));
        return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
      }

      function parseLiteralPercent(d, string, i) {
        var n = percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1;
      }

      function parseUnixTimestamp(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.Q = +n[0], i + n[0].length) : -1;
      }

      function parseUnixTimestampSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.s = +n[0], i + n[0].length) : -1;
      }

      function formatDayOfMonth(d, p) {
        return pad(d.getDate(), p, 2);
      }

      function formatHour24(d, p) {
        return pad(d.getHours(), p, 2);
      }

      function formatHour12(d, p) {
        return pad(d.getHours() % 12 || 12, p, 2);
      }

      function formatDayOfYear(d, p) {
        return pad(1 + day.count(year(d), d), p, 3);
      }

      function formatMilliseconds(d, p) {
        return pad(d.getMilliseconds(), p, 3);
      }

      function formatMicroseconds(d, p) {
        return formatMilliseconds(d, p) + "000";
      }

      function formatMonthNumber(d, p) {
        return pad(d.getMonth() + 1, p, 2);
      }

      function formatMinutes(d, p) {
        return pad(d.getMinutes(), p, 2);
      }

      function formatSeconds(d, p) {
        return pad(d.getSeconds(), p, 2);
      }

      function formatWeekdayNumberMonday(d) {
        var day = d.getDay();
        return day === 0 ? 7 : day;
      }

      function formatWeekNumberSunday(d, p) {
        return pad(sunday.count(year(d) - 1, d), p, 2);
      }

      function formatWeekNumberISO(d, p) {
        var day = d.getDay();
        d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
        return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
      }

      function formatWeekdayNumberSunday(d) {
        return d.getDay();
      }

      function formatWeekNumberMonday(d, p) {
        return pad(monday.count(year(d) - 1, d), p, 2);
      }

      function formatYear(d, p) {
        return pad(d.getFullYear() % 100, p, 2);
      }

      function formatFullYear(d, p) {
        return pad(d.getFullYear() % 10000, p, 4);
      }

      function formatZone(d) {
        var z = d.getTimezoneOffset();
        return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
      }

      function formatUTCDayOfMonth(d, p) {
        return pad(d.getUTCDate(), p, 2);
      }

      function formatUTCHour24(d, p) {
        return pad(d.getUTCHours(), p, 2);
      }

      function formatUTCHour12(d, p) {
        return pad(d.getUTCHours() % 12 || 12, p, 2);
      }

      function formatUTCDayOfYear(d, p) {
        return pad(1 + utcDay.count(utcYear(d), d), p, 3);
      }

      function formatUTCMilliseconds(d, p) {
        return pad(d.getUTCMilliseconds(), p, 3);
      }

      function formatUTCMicroseconds(d, p) {
        return formatUTCMilliseconds(d, p) + "000";
      }

      function formatUTCMonthNumber(d, p) {
        return pad(d.getUTCMonth() + 1, p, 2);
      }

      function formatUTCMinutes(d, p) {
        return pad(d.getUTCMinutes(), p, 2);
      }

      function formatUTCSeconds(d, p) {
        return pad(d.getUTCSeconds(), p, 2);
      }

      function formatUTCWeekdayNumberMonday(d) {
        var dow = d.getUTCDay();
        return dow === 0 ? 7 : dow;
      }

      function formatUTCWeekNumberSunday(d, p) {
        return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
      }

      function formatUTCWeekNumberISO(d, p) {
        var day = d.getUTCDay();
        d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
        return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
      }

      function formatUTCWeekdayNumberSunday(d) {
        return d.getUTCDay();
      }

      function formatUTCWeekNumberMonday(d, p) {
        return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
      }

      function formatUTCYear(d, p) {
        return pad(d.getUTCFullYear() % 100, p, 2);
      }

      function formatUTCFullYear(d, p) {
        return pad(d.getUTCFullYear() % 10000, p, 4);
      }

      function formatUTCZone() {
        return "+0000";
      }

      function formatLiteralPercent() {
        return "%";
      }

      function formatUnixTimestamp(d) {
        return +d;
      }

      function formatUnixTimestampSeconds(d) {
        return Math.floor(+d / 1000);
      }

      var locale$1;
      var timeFormat;
      var timeParse;
      var utcFormat;
      var utcParse;
      defaultLocale$1({
        dateTime: "%x, %X",
        date: "%-m/%-d/%Y",
        time: "%-I:%M:%S %p",
        periods: ["AM", "PM"],
        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
      });

      function defaultLocale$1(definition) {
        locale$1 = formatLocale$1(definition);
        timeFormat = locale$1.format;
        timeParse = locale$1.parse;
        utcFormat = locale$1.utcFormat;
        utcParse = locale$1.utcParse;
        return locale$1;
      }

      var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

      function formatIsoNative(date) {
        return date.toISOString();
      }

      var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

      function parseIsoNative(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
      }

      var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier); //

      var holiday = holiday_jp; // import * as holiday from "@holiday-jp/holiday_jp";

      var script = {
        props: {
          input: String,
          isVscode: Boolean
        },
        data: function data() {
          return {
            tasks: [],
            taskName: "",
            svgWidth: 600,
            selectedIndex: -1,
            dragOffset: {
              x: 0,
              y: 0
            },
            dragging: "none",
            dragoverIndex: -1,
            longView: false,
            displayOffset: 0,
            editing: -1,
            editingText: ""
          };
        },
        methods: {
          editTask: function editTask(index) {
            var _this = this;

            this.editing = index;
            this.editingText = this.tasks[this.editing].name;
            this.$nextTick(function () {
              var el = _this.$el.querySelector(".editingText");

              if (el) {
                el.focus();
                el.setSelectionRange(0, el.value.length);
              }
            });
          },
          endEditing: function endEditing() {
            if (this.editing >= 0) {
              this.tasks[this.editing].name = this.editingText;
              this.editing = -1;
              this.$emit("change", serialize(this.tasks));
            }
          },
          onDrag: function onDrag(e) {
            if (this.dragging === "move") {
              var len = this.selectedItem.end - this.selectedItem.start; //差分値を基点に反映

              this.selectedItem.start = this.invert(e.offsetX - this.dragOffset.x);
              this.selectedItem.end = this.selectedItem.start + len;
              this.dragoverIndex = Math.floor((e.offsetY - 48) / 32);
            }

            if (this.dragging === "resize-x") {
              this.selectedItem.end = this.invert(e.offsetX);
            }
          },
          startDrag: function startDrag(e, index) {
            var el = e.currentTarget;
            el.setPointerCapture(e.pointerId);
            this.dragging = "move";
            this.selectedIndex = index; //ページ左上とオブジェクト左上の差分から、ドラッグ開始位置（オブジェクト相対座標）を取得

            this.dragOffset.x = e.offsetX - this.scale(this.selectedItem.start);
            this.dragOffset.y = e.offsetY - index * 32 - 48;
            var len = this.selectedItem.end - this.selectedItem.start;

            if (e.offsetX > this.scale(this.selectedItem.end) - 10) {
              this.dragging = "resize-x";
            }

            this.onDrag(e);
          },
          stopDrag: function stopDrag() {
            if (this.dragging !== "none") {
              this.selectedItem.start = roundHMSfromEpoc(this.selectedItem.start);
              this.selectedItem.end = roundHMSfromEpoc(this.selectedItem.end);
            }

            if (this.dragging === "move") {
              if (this.selectedIndex !== this.dragoverIndex) {
                var task = this.tasks.splice(this.selectedIndex, 1);
                this.tasks.splice(this.dragoverIndex, 0, task[0]);
              }
            }

            if (this.dragging !== "none") {
              this.$emit("change", serialize(this.tasks));
            }

            this.dragging = "none";
            this.selectedIndex = -1;
            this.dragoverIndex = -1;
          },
          scaleLength: function scaleLength(epocdiff) {
            return epocdiff / (24 * 60 * 60 * 1000) * this.svgWidth / this.displayRangeLength;
          },
          scale: function scale(epoc) {
            return linear$1().domain(this.timeRange).range([0, this.svgWidth])(epoc);
          },
          invert: function invert(x) {
            return linear$1().domain(this.timeRange).range([0, this.svgWidth]).invert(x);
          },
          setTasks: function setTasks(input) {
            this.tasks = compile(input);
          },
          addTask: function addTask(task) {
            this.tasks.push({
              name: "New Task",
              start: getRelativeDate(0).getTime(),
              end: getRelativeDate(1).getTime()
            });
            this.$emit("change", serialize(this.tasks));
            this.editTask(this.tasks.length - 1); // this.editingText = "New Task";
          },
          moveRange: function moveRange(offset) {
            this.displayOffset += offset;
          }
        },
        watch: {
          input: function input() {
            this.setTasks(this.input);
          }
        },
        computed: {
          lines: function lines() {
            var start = this.timeRange[0];
            var end = this.timeRange[1];
            return generateLineByRange(start, end, this.displayRange, this.svgWidth);
          },
          displayRange: function displayRange() {
            //1つの日付は最低24px
            var columnWidth = this.longView ? 6 : 24;
            var viewRange = Math.floor(this.svgWidth / columnWidth);
            return this.longView ? {
              start: 31 * -1,
              end: 31 * -1 + viewRange
            } : {
              start: -2 + this.displayOffset,
              end: -2 + viewRange + this.displayOffset
            };
          },
          selectedItem: function selectedItem() {
            return this.tasks[this.selectedIndex];
          },
          timeRange: function timeRange() {
            return [getRelativeDate(this.displayRange.start).getTime(), getRelativeDate(this.displayRange.end).getTime()];
          },
          displayRangeLength: function displayRangeLength() {
            return this.displayRange.end - this.displayRange.start;
          },
          todayX: function todayX() {
            var start = this.timeRange[0];
            var end = this.timeRange[1];
            var len = end - start;
            var reldate = getRelativeDate(0);
            var t = (reldate.getTime() - start) / len * this.svgWidth;
            return Math.round(t);
          }
        },
        mounted: function mounted() {
          var _this2 = this;

          this.setTasks(this.input);
          window.addEventListener("resize", function () {
            _this2.svgWidth = _this2.$el.clientWidth;
          });
          this.svgWidth = this.$el.clientWidth;
        }
      };

      function generateLineByRange(start, end, displayRange, svgWidth) {
        var lines = [];
        var len = end - start;
        var month = -1;
        var displayRangeLength = displayRange.end - displayRange.start;

        for (var i = 0; i < displayRangeLength; i++) {
          var reldate = getRelativeDate(displayRange.start + i);
          var t = (reldate.getTime() - start) / len * svgWidth;
          var color = "#888888";

          if (reldate.getDay() === 0) {
            color = "#FF8888";
          }

          if (reldate.getDay() === 6) {
            color = "#8888FF";
          }

          var isJa = navigator.language.indexOf("ja") >= 0;

          if (isJa && holiday.isHoliday(reldate)) {
            color = "#FF8888";
          }

          var monthStr = "";
          var monthArray = isJa ? getMonthArray()["ja-JP"] : getMonthArray()["en"];

          if (month != reldate.getMonth() + 1) {
            month = reldate.getMonth() + 1;
            monthStr = monthArray[reldate.getMonth()];
          }

          lines.push({
            x: Math.round(t),
            label: reldate.getDate(),
            color: color,
            labelMonth: monthStr
          });
        }

        return lines;
      }

      function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
      /* server only */
      , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
        if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
        } // Vue.extend constructor export interop.


        const options = typeof script === 'function' ? script.options : script; // render functions

        if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true; // functional template

          if (isFunctionalTemplate) {
            options.functional = true;
          }
        } // scopedId


        if (scopeId) {
          options._scopeId = scopeId;
        }

        let hook;

        if (moduleIdentifier) {
          // server build
          hook = function (context) {
            // 2.3 injection
            context = context || // cached call
            this.$vnode && this.$vnode.ssrContext || // stateful
            this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
            // 2.2 with runInNewContext: true

            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
              context = __VUE_SSR_CONTEXT__;
            } // inject component styles


            if (style) {
              style.call(this, createInjectorSSR(context));
            } // register component module identifier for async chunk inference


            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          }; // used by ssr in case component is cached and beforeCreate
          // never gets called


          options._ssrRegister = hook;
        } else if (style) {
          hook = shadowMode ? function (context) {
            style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
          } : function (context) {
            style.call(this, createInjector(context));
          };
        }

        if (hook) {
          if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;

            options.render = function renderWithStyleInjection(h, context) {
              hook.call(context);
              return originalRender(h, context);
            };
          } else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }

        return script;
      }
      /* script */


      var __vue_script__ = script;
      /* template */

      var __vue_render__ = function __vue_render__() {
        var _vm = this;

        var _h = _vm.$createElement;

        var _c = _vm._self._c || _h;

        return _c('div', [_c('svg', {
          staticClass: "gantt",
          attrs: {
            "width": _vm.svgWidth,
            "height": _vm.tasks.length * 32 + 48
          },
          on: {
            "pointermove": _vm.onDrag,
            "pointerup": _vm.stopDrag
          }
        }, [_c('g', {
          attrs: {
            "transform": "translate(0, 48)"
          }
        }, [_c('rect', {
          staticClass: "background",
          attrs: {
            "x": "0",
            "y": "0",
            "width": _vm.svgWidth,
            "height": _vm.tasks.length * 32
          }
        }), _vm._v(" "), _c('g', _vm._l(_vm.lines, function (line, index) {
          return _c('text', {
            key: index,
            attrs: {
              "x": line.x,
              "y": "-28",
              "text-anchor": "start",
              "font-weight": "900",
              "font-size": "0.8rem",
              "fill": "#9C9"
            }
          }, [_vm._v(_vm._s(line.labelMonth))]);
        }), 0), _vm._v(" "), _c('rect', {
          attrs: {
            "x": _vm.todayX,
            "fill": _vm.isVscode ? '#343' : '#DDF',
            "y": "-23",
            "width": "20",
            "height": "20",
            "rx": "10",
            "ry": "10"
          }
        }), _vm._v(" "), !_vm.longView ? _c('g', _vm._l(_vm.lines, function (line, index) {
          return _c('text', {
            key: index,
            attrs: {
              "x": line.x + 10,
              "y": "-8",
              "text-anchor": "middle",
              "font-size": "0.8rem",
              "fill": line.color
            }
          }, [_vm._v(_vm._s(line.label))]);
        }), 0) : _vm._e(), _vm._v(" "), _c('g', _vm._l(_vm.lines, function (line, index) {
          return _c('line', {
            key: index,
            staticClass: "gridline",
            attrs: {
              "x1": line.x,
              "y1": "0",
              "x2": line.x,
              "y2": _vm.tasks.length * 32
            }
          });
        }), 0), _vm._v(" "), _c('g', _vm._l(_vm.tasks, function (task, index) {
          return _c('g', {
            key: index,
            "class": {
              'dragging': index === _vm.selectedIndex
            },
            attrs: {
              "transform": "translate(" + _vm.scale(task.start) + ", " + index * 32 + ")"
            }
          }, [_c('rect', {
            staticClass: "task",
            attrs: {
              "x": "0",
              "y": "4",
              "width": _vm.scaleLength(task.end - task.start),
              "height": "24"
            },
            on: {
              "pointerdown": function pointerdown($event) {
                return _vm.startDrag($event, index);
              },
              "dblclick": function dblclick($event) {
                return _vm.editTask(index);
              }
            }
          }), _vm._v(" "), _vm.editing === index ? _c('foreignObject', {
            staticClass: "inlineEditing",
            attrs: {
              "height": "24",
              "width": _vm.scaleLength(task.end - task.start) < 200 ? 200 : _vm.scaleLength(task.end - task.start)
            }
          }, [_c('form', {
            on: {
              "submit": function submit($event) {
                $event.preventDefault();
                return _vm.endEditing(index);
              }
            }
          }, [_c('input', {
            directives: [{
              name: "model",
              rawName: "v-model",
              value: _vm.editingText,
              expression: "editingText"
            }],
            staticClass: "editingText",
            domProps: {
              "value": _vm.editingText
            },
            on: {
              "blur": function blur($event) {
                return _vm.endEditing(index);
              },
              "input": function input($event) {
                if ($event.target.composing) {
                  return;
                }

                _vm.editingText = $event.target.value;
              }
            }
          })])]) : _vm._e()], 1);
        }), 0), _vm._v(" "), _vm.dragoverIndex > -1 && _vm.dragoverIndex !== _vm.selectedIndex ? _c('rect', {
          staticClass: "dragover",
          attrs: {
            "x": "0",
            "y": 32 * _vm.dragoverIndex,
            "width": _vm.svgWidth,
            "height": "32"
          }
        }) : _vm._e(), _vm._v(" "), _vm._l(_vm.tasks, function (task, index) {
          return _c('text', {
            directives: [{
              name: "show",
              rawName: "v-show",
              value: _vm.editing !== index,
              expression: "editing !== index"
            }],
            key: index,
            staticClass: "taskname",
            attrs: {
              "x": _vm.scale(task.start) + 4 > 0 ? _vm.scale(task.start) + 4 : 4,
              "y": index * 32 + 16,
              "font-size": "12",
              "text-anchor": "start",
              "fill": "black",
              "line-height": "32",
              "alignment-baseline": "middle",
              "pointer-events": "none"
            }
          }, [_vm._v(_vm._s(task.name))]);
        })], 2), _vm._v(" "), _c('g', {
          staticStyle: {
            "cursor": "pointer"
          },
          attrs: {
            "transform": "translate(" + (_vm.svgWidth - 24 * 4 - 0.5) + ", 0.5)"
          },
          on: {
            "mouseenter": function mouseenter($event) {
              _vm.longView = true;
            },
            "mouseleave": function mouseleave($event) {
              _vm.longView = false;
            }
          }
        }, [_c('rect', {
          attrs: {
            "fill": "white",
            "x": "0",
            "y": "0",
            "width": "20",
            "height": "20",
            "rx": "4",
            "ry": "4"
          }
        }), _vm._v(" "), _c('line', {
          attrs: {
            "stroke-linecap": "round",
            "stroke-width": "2",
            "x1": "5",
            "y1": "5",
            "x2": "15",
            "y2": "5",
            "stroke": "#999"
          }
        }), _vm._v(" "), _c('line', {
          attrs: {
            "stroke-linecap": "round",
            "stroke-width": "2",
            "x1": "7.5",
            "y1": "10",
            "x2": "17.5",
            "y2": "10",
            "stroke": "#999"
          }
        }), _vm._v(" "), _c('line', {
          attrs: {
            "stroke-linecap": "round",
            "stroke-width": "2",
            "x1": "10",
            "y1": "15",
            "x2": "20",
            "y2": "15",
            "stroke": "#999"
          }
        })]), _vm._v(" "), _c('g', {
          staticStyle: {
            "cursor": "pointer"
          },
          attrs: {
            "transform": "translate(" + (_vm.svgWidth - 24 * 3 - 0.5) + ", 0.5)"
          },
          on: {
            "click": function click($event) {
              return _vm.moveRange(-7);
            }
          }
        }, [_c('rect', {
          attrs: {
            "fill": "white",
            "x": "0",
            "y": "0",
            "width": "20",
            "height": "20",
            "rx": "4",
            "ry": "4"
          }
        }), _vm._v(" "), _c('polyline', {
          attrs: {
            "points": "15 5 5 10 15 15",
            "stroke": "#999",
            "fill": "none"
          }
        })]), _vm._v(" "), _c('g', {
          staticStyle: {
            "cursor": "pointer"
          },
          attrs: {
            "transform": "translate(" + (_vm.svgWidth - 24 * 2 - 0.5) + ", 0.5)"
          },
          on: {
            "click": function click($event) {
              return _vm.moveRange(7);
            }
          }
        }, [_c('rect', {
          attrs: {
            "fill": "white",
            "x": "0",
            "y": "0",
            "width": "20",
            "height": "20",
            "rx": "4",
            "ry": "4"
          }
        }), _vm._v(" "), _c('polyline', {
          attrs: {
            "points": "5 5 15 10 5 15",
            "stroke": "#999",
            "fill": "none"
          }
        })]), _vm._v(" "), _c('g', {
          staticStyle: {
            "cursor": "pointer"
          },
          attrs: {
            "transform": "translate(" + (_vm.svgWidth - 24.5) + ", 0.5)"
          },
          on: {
            "click": _vm.addTask
          }
        }, [_c('rect', {
          attrs: {
            "fill": "white",
            "stroke": "#999",
            "x": "0",
            "y": "0",
            "width": "20",
            "height": "20",
            "rx": "4",
            "ry": "4"
          }
        }), _vm._v(" "), _c('line', {
          attrs: {
            "x1": "10",
            "x2": "10",
            "y1": "5",
            "y2": "15",
            "stroke": "ForestGreen"
          }
        }), _vm._v(" "), _c('line', {
          attrs: {
            "x1": "5",
            "x2": "15",
            "y1": "10",
            "y2": "10",
            "stroke": "ForestGreen"
          }
        })])])]);
      };

      var __vue_staticRenderFns__ = [];
      /* style */

      var __vue_inject_styles__ = undefined;
      /* scoped */

      var __vue_scope_id__ = undefined;
      /* module identifier */

      var __vue_module_identifier__ = undefined;
      /* functional template */

      var __vue_is_functional_template__ = false;
      /* style inject */

      /* style inject SSR */

      /* style inject shadow dom */

      var __vue_component__ = normalizeComponent({
        render: __vue_render__,
        staticRenderFns: __vue_staticRenderFns__
      }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

      return __vue_component__;
    });
  });
  var css_248z$2 = ".task{fill:#b1b1ff;cursor:pointer}.background{fill:#f5f5f5}.gridline{stroke:#fdfdfd;stroke-width:2}svg.gantt{cursor:default;user-select:none;touch-action:none}.taskname{cursor:default}.dragging{opacity:.5}.dragover{opacity:.1}.inlineEditing{transform:translate(0,4px)}.inlineEditing form{display:flex;height:100%;margin-top:4}.editingText{flex:1;font-size:12}";
  styleInject(css_248z$2); //

  var script$2 = {
    props: {
      input: String
    },
    data: function data() {
      return {};
    },
    computed: {
      src: function src() {
        var firstRowEndPos = this.input.indexOf("\n", 0);
        return this.input.substr(firstRowEndPos + 1);
      }
    },
    methods: {
      update: function update(src) {
        this.$emit("change", src);
      }
    },
    mounted: function mounted() {},
    components: {
      GanttComponent: anydownGantt
    }
  };
  var css_248z$3 = "";
  styleInject(css_248z$3);
  /* script */

  var __vue_script__$2 = script$2;
  /* template */

  var __vue_render__$2 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('gantt-component', {
      attrs: {
        "input": _vm.src
      },
      on: {
        "change": function change($event) {
          return _vm.update($event);
        }
      }
    });
  };

  var __vue_staticRenderFns__$2 = [];
  /* style */

  var __vue_inject_styles__$2 = undefined;
  /* scoped */

  var __vue_scope_id__$2 = undefined;
  /* module identifier */

  var __vue_module_identifier__$2 = undefined;
  /* functional template */

  var __vue_is_functional_template__$2 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$2 = normalizeComponent({
    render: __vue_render__$2,
    staticRenderFns: __vue_staticRenderFns__$2
  }, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, undefined, undefined, undefined);

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o) {
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var it,
        normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
  /*!
   * Vue.js v2.6.11
   * (c) 2014-2019 Evan You
   * Released under the MIT License.
   */

  /*  */


  var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
  // explicitness and function inlining.

  function isUndef(v) {
    return v === undefined || v === null;
  }

  function isDef(v) {
    return v !== undefined && v !== null;
  }

  function isTrue(v) {
    return v === true;
  }

  function isFalse(v) {
    return v === false;
  }
  /**
   * Check if value is primitive.
   */


  function isPrimitive(value) {
    return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
    typeof value === 'symbol' || typeof value === 'boolean';
  }
  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */


  function isObject$1(obj) {
    return obj !== null && typeof obj === 'object';
  }
  /**
   * Get the raw type string of a value, e.g., [object Object].
   */


  var _toString = Object.prototype.toString;

  function toRawType(value) {
    return _toString.call(value).slice(8, -1);
  }
  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */


  function isPlainObject(obj) {
    return _toString.call(obj) === '[object Object]';
  }

  function isRegExp$1(v) {
    return _toString.call(v) === '[object RegExp]';
  }
  /**
   * Check if val is a valid array index.
   */


  function isValidArrayIndex(val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val);
  }

  function isPromise(val) {
    return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
  }
  /**
   * Convert a value to a string that is actually rendered.
   */


  function toString(val) {
    return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
  }
  /**
   * Convert an input value to a number for persistence.
   * If the conversion fails, return original string.
   */


  function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
  }
  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */


  function makeMap(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');

    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }

    return expectsLowerCase ? function (val) {
      return map[val.toLowerCase()];
    } : function (val) {
      return map[val];
    };
  }
  /**
   * Check if a tag is a built-in tag.
   */


  var isBuiltInTag = makeMap('slot,component', true);
  /**
   * Check if an attribute is a reserved attribute.
   */

  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
  /**
   * Remove an item from an array.
   */

  function remove(arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);

      if (index > -1) {
        return arr.splice(index, 1);
      }
    }
  }
  /**
   * Check whether an object has the property.
   */


  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }
  /**
   * Create a cached version of a pure function.
   */


  function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  }
  /**
   * Camelize a hyphen-delimited string.
   */


  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) {
      return c ? c.toUpperCase() : '';
    });
  });
  /**
   * Capitalize a string.
   */

  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });
  /**
   * Hyphenate a camelCase string.
   */

  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase();
  });
  /**
   * Simple bind polyfill for environments that do not support it,
   * e.g., PhantomJS 1.x. Technically, we don't need this anymore
   * since native bind is now performant enough in most browsers.
   * But removing it would mean breaking code that was able to run in
   * PhantomJS 1.x, so this must be kept for backward compatibility.
   */

  /* istanbul ignore next */

  function polyfillBind(fn, ctx) {
    function boundFn(a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    }

    boundFn._length = fn.length;
    return boundFn;
  }

  function nativeBind(fn, ctx) {
    return fn.bind(ctx);
  }

  var bind = Function.prototype.bind ? nativeBind : polyfillBind;
  /**
   * Convert an Array-like object to a real Array.
   */

  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);

    while (i--) {
      ret[i] = list[i + start];
    }

    return ret;
  }
  /**
   * Mix properties into target object.
   */


  function extend$1(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }

    return to;
  }
  /**
   * Merge an Array of Objects into a single Object.
   */


  function toObject(arr) {
    var res = {};

    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend$1(res, arr[i]);
      }
    }

    return res;
  }
  /* eslint-disable no-unused-vars */

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
   */


  function noop(a, b, c) {}
  /**
   * Always return false.
   */


  var no = function (a, b, c) {
    return false;
  };
  /* eslint-enable no-unused-vars */

  /**
   * Return the same value.
   */


  var identity = function (_) {
    return _;
  };
  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */


  function looseEqual(a, b) {
    if (a === b) {
      return true;
    }

    var isObjectA = isObject$1(a);
    var isObjectB = isObject$1(b);

    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);

        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i]);
          });
        } else if (a instanceof Date && b instanceof Date) {
          return a.getTime() === b.getTime();
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key]);
          });
        } else {
          /* istanbul ignore next */
          return false;
        }
      } catch (e) {
        /* istanbul ignore next */
        return false;
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  }
  /**
   * Return the first index at which a loosely equal value can be
   * found in the array (if value is a plain object, the array must
   * contain an object of the same shape), or -1 if it is not present.
   */


  function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }

    return -1;
  }
  /**
   * Ensure a function is called only once.
   */


  function once(fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }

  var SSR_ATTR = 'data-server-rendered';
  var ASSET_TYPES = ['component', 'directive', 'filter'];
  var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
  /*  */

  var config$1 = {
    /**
     * Option merge strategies (used in core/util/options)
     */
    // $flow-disable-line
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: "development" !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: "development" !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    // $flow-disable-line
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Perform updates asynchronously. Intended to be used by Vue Test Utils
     * This will significantly reduce performance if set to false.
     */
    async: true,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  };
  /*  */

  /**
   * unicode letters used for parsing html tags, component names and property paths.
   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
   * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
   */

  var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
  /**
   * Check if a string starts with $ or _
   */

  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }
  /**
   * Define a property.
   */


  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }
  /**
   * Parse simple path.
   */


  var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

  function parsePath(path) {
    if (bailRE.test(path)) {
      return;
    }

    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) {
          return;
        }

        obj = obj[segments[i]];
      }

      return obj;
    };
  }
  /*  */
  // can we use __proto__?


  var hasProto = '__proto__' in {}; // Browser environment sniffing

  var inBrowser = typeof window !== 'undefined';
  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
  var isPhantomJS = UA && /phantomjs/.test(UA);
  var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

  var nativeWatch = {}.watch;
  var supportsPassive = false;

  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', {
        get: function get() {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      }); // https://github.com/facebook/flow/issues/285

      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  } // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV


  var _isServer;

  var isServerRendering = function () {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && !inWeex && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }

    return _isServer;
  }; // detect devtools


  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
  /* istanbul ignore next */

  function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
  }

  var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  var _Set;
  /* istanbul ignore if */
  // $flow-disable-line


  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set =
    /*@__PURE__*/
    function () {
      function Set() {
        this.set = Object.create(null);
      }

      Set.prototype.has = function has(key) {
        return this.set[key] === true;
      };

      Set.prototype.add = function add(key) {
        this.set[key] = true;
      };

      Set.prototype.clear = function clear() {
        this.set = Object.create(null);
      };

      return Set;
    }();
  }
  /*  */


  var warn = noop;
  var tip = noop;
  var generateComponentTrace = noop; // work around flow check

  var formatComponentName = noop;

  if ("development" !== 'production') {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;

    var classify = function (str) {
      return str.replace(classifyRE, function (c) {
        return c.toUpperCase();
      }).replace(/[-_]/g, '');
    };

    warn = function (msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config$1.warnHandler) {
        config$1.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole && !config$1.silent) {
        console.error("[Vue warn]: " + msg + trace);
      }
    };

    tip = function (msg, vm) {
      if (hasConsole && !config$1.silent) {
        console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
      }
    };

    formatComponentName = function (vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>';
      }

      var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
      var name = options.name || options._componentTag;
      var file = options.__file;

      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
    };

    var repeat$1 = function (str, n) {
      var res = '';

      while (n) {
        if (n % 2 === 1) {
          res += str;
        }

        if (n > 1) {
          str += str;
        }

        n >>= 1;
      }

      return res;
    };

    generateComponentTrace = function (vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;

        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];

            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue;
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }

          tree.push(vm);
          vm = vm.$parent;
        }

        return '\n\nfound in\n\n' + tree.map(function (vm, i) {
          return "" + (i === 0 ? '---> ' : repeat$1(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
        }).join('\n');
      } else {
        return "\n\n(found in " + formatComponentName(vm) + ")";
      }
    };
  }
  /*  */


  var uid = 0;
  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */

  var Dep = function Dep() {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub(sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub(sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend() {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify() {
    // stabilize the subscriber list first
    var subs = this.subs.slice();

    if ("development" !== 'production' && !config$1.async) {
      // subs aren't sorted in scheduler if not running async
      // we need to sort them now to make sure they fire in correct
      // order
      subs.sort(function (a, b) {
        return a.id - b.id;
      });
    }

    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  }; // The current target watcher being evaluated.
  // This is globally unique because only one watcher
  // can be evaluated at a time.


  Dep.target = null;
  var targetStack = [];

  function pushTarget(target) {
    targetStack.push(target);
    Dep.target = target;
  }

  function popTarget() {
    targetStack.pop();
    Dep.target = targetStack[targetStack.length - 1];
  }
  /*  */


  var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.fnContext = undefined;
    this.fnOptions = undefined;
    this.fnScopeId = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors = {
    child: {
      configurable: true
    }
  }; // DEPRECATED: alias for componentInstance for backwards compat.

  /* istanbul ignore next */

  prototypeAccessors.child.get = function () {
    return this.componentInstance;
  };

  Object.defineProperties(VNode.prototype, prototypeAccessors);

  var createEmptyVNode = function (text) {
    if (text === void 0) text = '';
    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node;
  };

  function createTextVNode(val) {
    return new VNode(undefined, undefined, undefined, String(val));
  } // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.


  function cloneVNode(vnode) {
    var cloned = new VNode(vnode.tag, vnode.data, // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.asyncMeta = vnode.asyncMeta;
    cloned.isCloned = true;
    return cloned;
  }
  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */


  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);
  var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
  /**
   * Intercept mutating methods and emit events
   */

  methodsToPatch.forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;

      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break;

        case 'splice':
          inserted = args.slice(2);
          break;
      }

      if (inserted) {
        ob.observeArray(inserted);
      } // notify change


      ob.dep.notify();
      return result;
    });
  });
  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
  /**
   * In some cases we may want to disable observation inside a component's
   * update computation.
   */

  var shouldObserve = true;

  function toggleObserving(value) {
    shouldObserve = value;
  }
  /**
   * Observer class that is attached to each observed
   * object. Once attached, the observer converts the target
   * object's property keys into getter/setters that
   * collect dependencies and dispatch updates.
   */


  var Observer = function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);

    if (Array.isArray(value)) {
      if (hasProto) {
        protoAugment(value, arrayMethods);
      } else {
        copyAugment(value, arrayMethods, arrayKeys);
      }

      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };
  /**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */


  Observer.prototype.walk = function walk(obj) {
    var keys = Object.keys(obj);

    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i]);
    }
  };
  /**
   * Observe a list of Array items.
   */


  Observer.prototype.observeArray = function observeArray(items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  }; // helpers

  /**
   * Augment a target Object or Array by intercepting
   * the prototype chain using __proto__
   */


  function protoAugment(target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }
  /**
   * Augment a target Object or Array by defining
   * hidden properties.
   */

  /* istanbul ignore next */


  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }
  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */


  function observe(value, asRootData) {
    if (!isObject$1(value) || value instanceof VNode) {
      return;
    }

    var ob;

    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }

    if (asRootData && ob) {
      ob.vmCount++;
    }

    return ob;
  }
  /**
   * Define a reactive property on an Object.
   */


  function defineReactive$$1(obj, key, val, customSetter, shallow) {
    var dep = new Dep();
    var property = Object.getOwnPropertyDescriptor(obj, key);

    if (property && property.configurable === false) {
      return;
    } // cater for pre-defined getter/setters


    var getter = property && property.get;
    var setter = property && property.set;

    if ((!getter || setter) && arguments.length === 2) {
      val = obj[key];
    }

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;

        if (Dep.target) {
          dep.depend();

          if (childOb) {
            childOb.dep.depend();

            if (Array.isArray(value)) {
              dependArray(value);
            }
          }
        }

        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */

        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        /* eslint-enable no-self-compare */


        if ("development" !== 'production' && customSetter) {
          customSetter();
        } // #7981: for accessor properties without setter


        if (getter && !setter) {
          return;
        }

        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }

        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }
  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */


  function set(target, key, val) {
    if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
      warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
    }

    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val;
    }

    if (key in target && !(key in Object.prototype)) {
      target[key] = val;
      return val;
    }

    var ob = target.__ob__;

    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
      return val;
    }

    if (!ob) {
      target[key] = val;
      return val;
    }

    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val;
  }
  /**
   * Delete a property and trigger change if necessary.
   */


  function del(target, key) {
    if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
      warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
    }

    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return;
    }

    var ob = target.__ob__;

    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
      return;
    }

    if (!hasOwn(target, key)) {
      return;
    }

    delete target[key];

    if (!ob) {
      return;
    }

    ob.dep.notify();
  }
  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */


  function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();

      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }
  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */


  var strats = config$1.optionMergeStrategies;
  /**
   * Options with restrictions
   */

  if ("development" !== 'production') {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
      }

      return defaultStrat(parent, child);
    };
  }
  /**
   * Helper that recursively merges two data objects together.
   */


  function mergeData(to, from) {
    if (!from) {
      return to;
    }

    var key, toVal, fromVal;
    var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

    for (var i = 0; i < keys.length; i++) {
      key = keys[i]; // in case the object is already observed...

      if (key === '__ob__') {
        continue;
      }

      toVal = to[key];
      fromVal = from[key];

      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }

    return to;
  }
  /**
   * Data
   */


  function mergeDataOrFn(parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }

      if (!parentVal) {
        return childVal;
      } // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.


      return function mergedDataFn() {
        return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
      };
    } else {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  }

  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
        return parentVal;
      }

      return mergeDataOrFn(parentVal, childVal);
    }

    return mergeDataOrFn(parentVal, childVal, vm);
  };
  /**
   * Hooks and props are merged as arrays.
   */


  function mergeHook(parentVal, childVal) {
    var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
    return res ? dedupeHooks(res) : res;
  }

  function dedupeHooks(hooks) {
    var res = [];

    for (var i = 0; i < hooks.length; i++) {
      if (res.indexOf(hooks[i]) === -1) {
        res.push(hooks[i]);
      }
    }

    return res;
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });
  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */

  function mergeAssets(parentVal, childVal, vm, key) {
    var res = Object.create(parentVal || null);

    if (childVal) {
      "development" !== 'production' && assertObjectType(key, childVal, vm);
      return extend$1(res, childVal);
    } else {
      return res;
    }
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });
  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */

  strats.watch = function (parentVal, childVal, vm, key) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) {
      parentVal = undefined;
    }

    if (childVal === nativeWatch) {
      childVal = undefined;
    }
    /* istanbul ignore if */


    if (!childVal) {
      return Object.create(parentVal || null);
    }

    if ("development" !== 'production') {
      assertObjectType(key, childVal, vm);
    }

    if (!parentVal) {
      return childVal;
    }

    var ret = {};
    extend$1(ret, parentVal);

    for (var key$1 in childVal) {
      var parent = ret[key$1];
      var child = childVal[key$1];

      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }

      ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
    }

    return ret;
  };
  /**
   * Other object hashes.
   */


  strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
    if (childVal && "development" !== 'production') {
      assertObjectType(key, childVal, vm);
    }

    if (!parentVal) {
      return childVal;
    }

    var ret = Object.create(null);
    extend$1(ret, parentVal);

    if (childVal) {
      extend$1(ret, childVal);
    }

    return ret;
  };

  strats.provide = mergeDataOrFn;
  /**
   * Default strategy.
   */

  var defaultStrat = function (parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };
  /**
   * Validate component names
   */


  function checkComponents(options) {
    for (var key in options.components) {
      validateComponentName(key);
    }
  }

  function validateComponentName(name) {
    if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
      warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
    }

    if (isBuiltInTag(name) || config$1.isReservedTag(name)) {
      warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
    }
  }
  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */


  function normalizeProps(options, vm) {
    var props = options.props;

    if (!props) {
      return;
    }

    var res = {};
    var i, val, name;

    if (Array.isArray(props)) {
      i = props.length;

      while (i--) {
        val = props[i];

        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = {
            type: null
          };
        } else if ("development" !== 'production') {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val) ? val : {
          type: val
        };
      }
    } else if ("development" !== 'production') {
      warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
    }

    options.props = res;
  }
  /**
   * Normalize all injections into Object-based format
   */


  function normalizeInject(options, vm) {
    var inject = options.inject;

    if (!inject) {
      return;
    }

    var normalized = options.inject = {};

    if (Array.isArray(inject)) {
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = {
          from: inject[i]
        };
      }
    } else if (isPlainObject(inject)) {
      for (var key in inject) {
        var val = inject[key];
        normalized[key] = isPlainObject(val) ? extend$1({
          from: key
        }, val) : {
          from: val
        };
      }
    } else if ("development" !== 'production') {
      warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
    }
  }
  /**
   * Normalize raw function directives into object format.
   */


  function normalizeDirectives(options) {
    var dirs = options.directives;

    if (dirs) {
      for (var key in dirs) {
        var def$$1 = dirs[key];

        if (typeof def$$1 === 'function') {
          dirs[key] = {
            bind: def$$1,
            update: def$$1
          };
        }
      }
    }
  }

  function assertObjectType(name, value, vm) {
    if (!isPlainObject(value)) {
      warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
    }
  }
  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */


  function mergeOptions(parent, child, vm) {
    if ("development" !== 'production') {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child, vm);
    normalizeInject(child, vm);
    normalizeDirectives(child); // Apply extends and mixins on the child options,
    // but only if it is a raw options object that isn't
    // the result of another mergeOptions call.
    // Only merged options has the _base property.

    if (!child._base) {
      if (child.extends) {
        parent = mergeOptions(parent, child.extends, vm);
      }

      if (child.mixins) {
        for (var i = 0, l = child.mixins.length; i < l; i++) {
          parent = mergeOptions(parent, child.mixins[i], vm);
        }
      }
    }

    var options = {};
    var key;

    for (key in parent) {
      mergeField(key);
    }

    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }

    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }

    return options;
  }
  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */


  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }

    var assets = options[type]; // check local registration variations first

    if (hasOwn(assets, id)) {
      return assets[id];
    }

    var camelizedId = camelize(id);

    if (hasOwn(assets, camelizedId)) {
      return assets[camelizedId];
    }

    var PascalCaseId = capitalize(camelizedId);

    if (hasOwn(assets, PascalCaseId)) {
      return assets[PascalCaseId];
    } // fallback to prototype chain


    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

    if ("development" !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }

    return res;
  }
  /*  */


  function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key]; // boolean casting

    var booleanIndex = getTypeIndex(Boolean, prop.type);

    if (booleanIndex > -1) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (value === '' || value === hyphenate(key)) {
        // only cast empty string / same name to boolean if
        // boolean has higher priority
        var stringIndex = getTypeIndex(String, prop.type);

        if (stringIndex < 0 || booleanIndex < stringIndex) {
          value = true;
        }
      }
    } // check default value


    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
      // make sure to observe it.

      var prevShouldObserve = shouldObserve;
      toggleObserving(true);
      observe(value);
      toggleObserving(prevShouldObserve);
    }

    if ("development" !== 'production' && // skip validation for weex recycle-list child component props
    !false) {
      assertProp(prop, key, value, vm, absent);
    }

    return value;
  }
  /**
   * Get the default value of a prop.
   */


  function getPropDefaultValue(vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined;
    }

    var def = prop.default; // warn against non-factory defaults for Object & Array

    if ("development" !== 'production' && isObject$1(def)) {
      warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    } // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger


    if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
      return vm._props[key];
    } // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context


    return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
  }
  /**
   * Assert whether a prop is valid.
   */


  function assertProp(prop, name, value, vm, absent) {
    if (prop.required && absent) {
      warn('Missing required prop: "' + name + '"', vm);
      return;
    }

    if (value == null && !prop.required) {
      return;
    }

    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];

    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }

      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }

    if (!valid) {
      warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
      return;
    }

    var validator = prop.validator;

    if (validator) {
      if (!validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType(value, type) {
    var valid;
    var expectedType = getType(type);

    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value;
      valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

      if (!valid && t === 'object') {
        valid = value instanceof type;
      }
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }

    return {
      valid: valid,
      expectedType: expectedType
    };
  }
  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */


  function getType(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
  }

  function isSameType(a, b) {
    return getType(a) === getType(b);
  }

  function getTypeIndex(type, expectedTypes) {
    if (!Array.isArray(expectedTypes)) {
      return isSameType(expectedTypes, type) ? 0 : -1;
    }

    for (var i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i;
      }
    }

    return -1;
  }

  function getInvalidTypeMessage(name, value, expectedTypes) {
    var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
    var expectedType = expectedTypes[0];
    var receivedType = toRawType(value);
    var expectedValue = styleValue(value, expectedType);
    var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
      message += " with value " + expectedValue;
    }

    message += ", got " + receivedType + " "; // check if we need to specify received value

    if (isExplicable(receivedType)) {
      message += "with value " + receivedValue + ".";
    }

    return message;
  }

  function styleValue(value, type) {
    if (type === 'String') {
      return "\"" + value + "\"";
    } else if (type === 'Number') {
      return "" + Number(value);
    } else {
      return "" + value;
    }
  }

  function isExplicable(value) {
    var explicitTypes = ['string', 'number', 'boolean'];
    return explicitTypes.some(function (elem) {
      return value.toLowerCase() === elem;
    });
  }

  function isBoolean() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    return args.some(function (elem) {
      return elem.toLowerCase() === 'boolean';
    });
  }
  /*  */


  function handleError(err, vm, info) {
    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
    // See: https://github.com/vuejs/vuex/issues/1505
    pushTarget();

    try {
      if (vm) {
        var cur = vm;

        while (cur = cur.$parent) {
          var hooks = cur.$options.errorCaptured;

          if (hooks) {
            for (var i = 0; i < hooks.length; i++) {
              try {
                var capture = hooks[i].call(cur, err, vm, info) === false;

                if (capture) {
                  return;
                }
              } catch (e) {
                globalHandleError(e, cur, 'errorCaptured hook');
              }
            }
          }
        }
      }

      globalHandleError(err, vm, info);
    } finally {
      popTarget();
    }
  }

  function invokeWithErrorHandling(handler, context, args, vm, info) {
    var res;

    try {
      res = args ? handler.apply(context, args) : handler.call(context);

      if (res && !res._isVue && isPromise(res) && !res._handled) {
        res.catch(function (e) {
          return handleError(e, vm, info + " (Promise/async)");
        }); // issue #9511
        // avoid catch triggering multiple times when nested calls

        res._handled = true;
      }
    } catch (e) {
      handleError(e, vm, info);
    }

    return res;
  }

  function globalHandleError(err, vm, info) {
    if (config$1.errorHandler) {
      try {
        return config$1.errorHandler.call(null, err, vm, info);
      } catch (e) {
        // if the user intentionally throws the original error in the handler,
        // do not log it twice
        if (e !== err) {
          logError(e, null, 'config.errorHandler');
        }
      }
    }

    logError(err, vm, info);
  }

  function logError(err, vm, info) {
    if ("development" !== 'production') {
      warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
    }
    /* istanbul ignore else */


    if ((inBrowser || inWeex) && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err;
    }
  }
  /*  */


  var isUsingMicroTask = false;
  var callbacks = [];
  var pending = false;

  function flushCallbacks() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;

    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  } // Here we have async deferring wrappers using microtasks.
  // In 2.5 we used (macro) tasks (in combination with microtasks).
  // However, it has subtle problems when state is changed right before repaint
  // (e.g. #6813, out-in transitions).
  // Also, using (macro) tasks in event handler would cause some weird behaviors
  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
  // So we now use microtasks everywhere, again.
  // A major drawback of this tradeoff is that there are some scenarios
  // where microtasks have too high a priority and fire in between supposedly
  // sequential events (e.g. #4521, #6690, which have workarounds)
  // or even between bubbling of the same event (#6566).


  var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:

  /* istanbul ignore next, $flow-disable-line */

  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();

    timerFunc = function () {
      p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.

      if (isIOS) {
        setTimeout(noop);
      }
    };

    isUsingMicroTask = true;
  } else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]')) {
    // Use MutationObserver where native Promise is not available,
    // e.g. PhantomJS, iOS7, Android 4.4
    // (#6466 MutationObserver is unreliable in IE11)
    var counter = 1;
    var observer = new MutationObserver(flushCallbacks);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });

    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };

    isUsingMicroTask = true;
  } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
    // Fallback to setImmediate.
    // Technically it leverages the (macro) task queue,
    // but it is still a better choice than setTimeout.
    timerFunc = function () {
      setImmediate(flushCallbacks);
    };
  } else {
    // Fallback to setTimeout.
    timerFunc = function () {
      setTimeout(flushCallbacks, 0);
    };
  }

  function nextTick(cb, ctx) {
    var _resolve;

    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });

    if (!pending) {
      pending = true;
      timerFunc();
    } // $flow-disable-line


    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve) {
        _resolve = resolve;
      });
    }
  }
  /*  */

  /* not type checking this file because flow doesn't play well with Proxy */


  var initProxy;

  if ("development" !== 'production') {
    var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
    );

    var warnNonPresent = function (target, key) {
      warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
    };

    var warnReservedPrefix = function (target, key) {
      warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
    };

    var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
      config$1.keyCodes = new Proxy(config$1.keyCodes, {
        set: function set(target, key, value) {
          if (isBuiltInModifier(key)) {
            warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
            return false;
          } else {
            target[key] = value;
            return true;
          }
        }
      });
    }

    var hasHandler = {
      has: function has(target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

        if (!has && !isAllowed) {
          if (key in target.$data) {
            warnReservedPrefix(target, key);
          } else {
            warnNonPresent(target, key);
          }
        }

        return has || !isAllowed;
      }
    };
    var getHandler = {
      get: function get(target, key) {
        if (typeof key === 'string' && !(key in target)) {
          if (key in target.$data) {
            warnReservedPrefix(target, key);
          } else {
            warnNonPresent(target, key);
          }
        }

        return target[key];
      }
    };

    initProxy = function initProxy(vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }
  /*  */


  var seenObjects = new _Set();
  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */

  function traverse(val) {
    _traverse(val, seenObjects);

    seenObjects.clear();
  }

  function _traverse(val, seen) {
    var i, keys;
    var isA = Array.isArray(val);

    if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
      return;
    }

    if (val.__ob__) {
      var depId = val.__ob__.dep.id;

      if (seen.has(depId)) {
        return;
      }

      seen.add(depId);
    }

    if (isA) {
      i = val.length;

      while (i--) {
        _traverse(val[i], seen);
      }
    } else {
      keys = Object.keys(val);
      i = keys.length;

      while (i--) {
        _traverse(val[keys[i]], seen);
      }
    }
  }

  var mark;
  var measure;

  if ("development" !== 'production') {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */

    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
      mark = function (tag) {
        return perf.mark(tag);
      };

      measure = function (name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag); // perf.clearMeasures(name)
      };
    }
  }
  /*  */


  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    };
  });

  function createFnInvoker(fns, vm) {
    function invoker() {
      var arguments$1 = arguments;
      var fns = invoker.fns;

      if (Array.isArray(fns)) {
        var cloned = fns.slice();

        for (var i = 0; i < cloned.length; i++) {
          invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
        }
      } else {
        // return handler return value for single handlers
        return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
      }
    }

    invoker.fns = fns;
    return invoker;
  }

  function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
    var name, def$$1, cur, old, event;

    for (name in on) {
      def$$1 = cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);

      if (isUndef(cur)) {
        "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur, vm);
        }

        if (isTrue(event.once)) {
          cur = on[name] = createOnceHandler(event.name, cur, event.capture);
        }

        add(event.name, cur, event.capture, event.passive, event.params);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }

    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }
  /*  */


  function mergeVNodeHook(def, hookKey, hook) {
    if (def instanceof VNode) {
      def = def.data.hook || (def.data.hook = {});
    }

    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook() {
      hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
      // and prevent memory leak

      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }
  /*  */


  function extractPropsFromVNodeData(data, Ctor, tag) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;

    if (isUndef(propOptions)) {
      return;
    }

    var res = {};
    var attrs = data.attrs;
    var props = data.props;

    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);

        if ("development" !== 'production') {
          var keyInLowerCase = key.toLowerCase();

          if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
            tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
          }
        }

        checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
      }
    }

    return res;
  }

  function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];

        if (!preserve) {
          delete hash[key];
        }

        return true;
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];

        if (!preserve) {
          delete hash[altKey];
        }

        return true;
      }
    }

    return false;
  }
  /*  */
  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:
  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.


  function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children);
      }
    }

    return children;
  } // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.


  function normalizeChildren(children) {
    return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
  }

  function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
  }

  function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c, lastIndex, last;

    for (i = 0; i < children.length; i++) {
      c = children[i];

      if (isUndef(c) || typeof c === 'boolean') {
        continue;
      }

      lastIndex = res.length - 1;
      last = res[lastIndex]; //  nested

      if (Array.isArray(c)) {
        if (c.length > 0) {
          c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

          if (isTextNode(c[0]) && isTextNode(last)) {
            res[lastIndex] = createTextVNode(last.text + c[0].text);
            c.shift();
          }

          res.push.apply(res, c);
        }
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          res[lastIndex] = createTextVNode(last.text + c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[lastIndex] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }

          res.push(c);
        }
      }
    }

    return res;
  }
  /*  */


  function initProvide(vm) {
    var provide = vm.$options.provide;

    if (provide) {
      vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
    }
  }

  function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);

    if (result) {
      toggleObserving(false);
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        if ("development" !== 'production') {
          defineReactive$$1(vm, key, result[key], function () {
            warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
          });
        } else {
          defineReactive$$1(vm, key, result[key]);
        }
      });
      toggleObserving(true);
    }
  }

  function resolveInject(inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]; // #6574 in case the inject object is observed...

        if (key === '__ob__') {
          continue;
        }

        var provideKey = inject[key].from;
        var source = vm;

        while (source) {
          if (source._provided && hasOwn(source._provided, provideKey)) {
            result[key] = source._provided[provideKey];
            break;
          }

          source = source.$parent;
        }

        if (!source) {
          if ('default' in inject[key]) {
            var provideDefault = inject[key].default;
            result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
          } else if ("development" !== 'production') {
            warn("Injection \"" + key + "\" not found", vm);
          }
        }
      }

      return result;
    }
  }
  /*  */

  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */


  function resolveSlots(children, context) {
    if (!children || !children.length) {
      return {};
    }

    var slots = {};

    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      } // named slots should only be respected if the vnode was rendered in the
      // same context.


      if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
        var name = data.slot;
        var slot = slots[name] || (slots[name] = []);

        if (child.tag === 'template') {
          slot.push.apply(slot, child.children || []);
        } else {
          slot.push(child);
        }
      } else {
        (slots.default || (slots.default = [])).push(child);
      }
    } // ignore slots that contains only whitespace


    for (var name$1 in slots) {
      if (slots[name$1].every(isWhitespace)) {
        delete slots[name$1];
      }
    }

    return slots;
  }

  function isWhitespace(node) {
    return node.isComment && !node.asyncFactory || node.text === ' ';
  }
  /*  */


  function normalizeScopedSlots(slots, normalSlots, prevSlots) {
    var res;
    var hasNormalSlots = Object.keys(normalSlots).length > 0;
    var isStable = slots ? !!slots.$stable : !hasNormalSlots;
    var key = slots && slots.$key;

    if (!slots) {
      res = {};
    } else if (slots._normalized) {
      // fast path 1: child component re-render only, parent did not change
      return slots._normalized;
    } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
      // fast path 2: stable scoped slots w/ no normal slots to proxy,
      // only need to normalize once
      return prevSlots;
    } else {
      res = {};

      for (var key$1 in slots) {
        if (slots[key$1] && key$1[0] !== '$') {
          res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
        }
      }
    } // expose normal slots on scopedSlots


    for (var key$2 in normalSlots) {
      if (!(key$2 in res)) {
        res[key$2] = proxyNormalSlot(normalSlots, key$2);
      }
    } // avoriaz seems to mock a non-extensible $scopedSlots object
    // and when that is passed down this would cause an error


    if (slots && Object.isExtensible(slots)) {
      slots._normalized = res;
    }

    def(res, '$stable', isStable);
    def(res, '$key', key);
    def(res, '$hasNormal', hasNormalSlots);
    return res;
  }

  function normalizeScopedSlot(normalSlots, key, fn) {
    var normalized = function () {
      var res = arguments.length ? fn.apply(null, arguments) : fn({});
      res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
      : normalizeChildren(res);
      return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
      ) ? undefined : res;
    }; // this is a slot using the new v-slot syntax without scope. although it is
    // compiled as a scoped slot, render fn users would expect it to be present
    // on this.$slots because the usage is semantically a normal slot.


    if (fn.proxy) {
      Object.defineProperty(normalSlots, key, {
        get: normalized,
        enumerable: true,
        configurable: true
      });
    }

    return normalized;
  }

  function proxyNormalSlot(slots, key) {
    return function () {
      return slots[key];
    };
  }
  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */


  function renderList(val, render) {
    var ret, i, l, keys, key;

    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);

      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);

      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject$1(val)) {
      if (hasSymbol && val[Symbol.iterator]) {
        ret = [];
        var iterator = val[Symbol.iterator]();
        var result = iterator.next();

        while (!result.done) {
          ret.push(render(result.value, ret.length));
          result = iterator.next();
        }
      } else {
        keys = Object.keys(val);
        ret = new Array(keys.length);

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          ret[i] = render(val[key], key, i);
        }
      }
    }

    if (!isDef(ret)) {
      ret = [];
    }

    ret._isVList = true;
    return ret;
  }
  /*  */

  /**
   * Runtime helper for rendering <slot>
   */


  function renderSlot(name, fallback, props, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;

    if (scopedSlotFn) {
      // scoped slot
      props = props || {};

      if (bindObject) {
        if ("development" !== 'production' && !isObject$1(bindObject)) {
          warn('slot v-bind without argument expects an Object', this);
        }

        props = extend$1(extend$1({}, bindObject), props);
      }

      nodes = scopedSlotFn(props) || fallback;
    } else {
      nodes = this.$slots[name] || fallback;
    }

    var target = props && props.slot;

    if (target) {
      return this.$createElement('template', {
        slot: target
      }, nodes);
    } else {
      return nodes;
    }
  }
  /*  */

  /**
   * Runtime helper for resolving filters
   */


  function resolveFilter(id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity;
  }
  /*  */


  function isKeyNotMatch(expect, actual) {
    if (Array.isArray(expect)) {
      return expect.indexOf(actual) === -1;
    } else {
      return expect !== actual;
    }
  }
  /**
   * Runtime helper for checking keyCodes from config.
   * exposed as Vue.prototype._k
   * passing in eventKeyName as last argument separately for backwards compat
   */


  function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
    var mappedKeyCode = config$1.keyCodes[key] || builtInKeyCode;

    if (builtInKeyName && eventKeyName && !config$1.keyCodes[key]) {
      return isKeyNotMatch(builtInKeyName, eventKeyName);
    } else if (mappedKeyCode) {
      return isKeyNotMatch(mappedKeyCode, eventKeyCode);
    } else if (eventKeyName) {
      return hyphenate(eventKeyName) !== key;
    }
  }
  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */


  function bindObjectProps(data, tag, value, asProp, isSync) {
    if (value) {
      if (!isObject$1(value)) {
        "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }

        var hash;

        var loop = function (key) {
          if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config$1.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
          }

          var camelizedKey = camelize(key);
          var hyphenatedKey = hyphenate(key);

          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});

              on["update:" + key] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) loop(key);
      }
    }

    return data;
  }
  /*  */

  /**
   * Runtime helper for rendering static trees.
   */


  function renderStatic(index, isInFor) {
    var cached = this._staticTrees || (this._staticTrees = []);
    var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree.

    if (tree && !isInFor) {
      return tree;
    } // otherwise, render a fresh tree.


    tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
    );
    markStatic(tree, "__static__" + index, false);
    return tree;
  }
  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */


  function markOnce(tree, index, key) {
    markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
    return tree;
  }

  function markStatic(tree, key, isOnce) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], key + "_" + i, isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }
  /*  */


  function bindObjectListeners(data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        "development" !== 'production' && warn('v-on without argument expects an Object value', this);
      } else {
        var on = data.on = data.on ? extend$1({}, data.on) : {};

        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(existing, ours) : ours;
        }
      }
    }

    return data;
  }
  /*  */


  function resolveScopedSlots(fns, // see flow/vnode
  res, // the following are added in 2.6
  hasDynamicKeys, contentHashKey) {
    res = res || {
      $stable: !hasDynamicKeys
    };

    for (var i = 0; i < fns.length; i++) {
      var slot = fns[i];

      if (Array.isArray(slot)) {
        resolveScopedSlots(slot, res, hasDynamicKeys);
      } else if (slot) {
        // marker for reverse proxying v-slot without scope on this.$slots
        if (slot.proxy) {
          slot.fn.proxy = true;
        }

        res[slot.key] = slot.fn;
      }
    }

    if (contentHashKey) {
      res.$key = contentHashKey;
    }

    return res;
  }
  /*  */


  function bindDynamicKeys(baseObj, values) {
    for (var i = 0; i < values.length; i += 2) {
      var key = values[i];

      if (typeof key === 'string' && key) {
        baseObj[values[i]] = values[i + 1];
      } else if ("development" !== 'production' && key !== '' && key !== null) {
        // null is a special value for explicitly removing a binding
        warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
      }
    }

    return baseObj;
  } // helper to dynamically append modifier runtime markers to event names.
  // ensure only append when value is already string, otherwise it will be cast
  // to string and cause the type check to miss.


  function prependModifier(value, symbol) {
    return typeof value === 'string' ? symbol + value : value;
  }
  /*  */


  function installRenderHelpers(target) {
    target._o = markOnce;
    target._n = toNumber;
    target._s = toString;
    target._l = renderList;
    target._t = renderSlot;
    target._q = looseEqual;
    target._i = looseIndexOf;
    target._m = renderStatic;
    target._f = resolveFilter;
    target._k = checkKeyCodes;
    target._b = bindObjectProps;
    target._v = createTextVNode;
    target._e = createEmptyVNode;
    target._u = resolveScopedSlots;
    target._g = bindObjectListeners;
    target._d = bindDynamicKeys;
    target._p = prependModifier;
  }
  /*  */


  function FunctionalRenderContext(data, props, children, parent, Ctor) {
    var this$1 = this;
    var options = Ctor.options; // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check

    var contextVm;

    if (hasOwn(parent, '_uid')) {
      contextVm = Object.create(parent); // $flow-disable-line

      contextVm._original = parent;
    } else {
      // the context vm passed in is a functional context as well.
      // in this case we want to make sure we are able to get a hold to the
      // real context instance.
      contextVm = parent; // $flow-disable-line

      parent = parent._original;
    }

    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;
    this.data = data;
    this.props = props;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);

    this.slots = function () {
      if (!this$1.$slots) {
        normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
      }

      return this$1.$slots;
    };

    Object.defineProperty(this, 'scopedSlots', {
      enumerable: true,
      get: function get() {
        return normalizeScopedSlots(data.scopedSlots, this.slots());
      }
    }); // support for compiled functional template

    if (isCompiled) {
      // exposing $options for renderStatic()
      this.$options = options; // pre-resolve slots for renderSlot()

      this.$slots = this.slots();
      this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
    }

    if (options._scopeId) {
      this._c = function (a, b, c, d) {
        var vnode = createElement(contextVm, a, b, c, d, needNormalization);

        if (vnode && !Array.isArray(vnode)) {
          vnode.fnScopeId = options._scopeId;
          vnode.fnContext = parent;
        }

        return vnode;
      };
    } else {
      this._c = function (a, b, c, d) {
        return createElement(contextVm, a, b, c, d, needNormalization);
      };
    }
  }

  installRenderHelpers(FunctionalRenderContext.prototype);

  function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
    var options = Ctor.options;
    var props = {};
    var propOptions = options.props;

    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs)) {
        mergeProps(props, data.attrs);
      }

      if (isDef(data.props)) {
        mergeProps(props, data.props);
      }
    }

    var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
    var vnode = options.render.call(null, renderContext._c, renderContext);

    if (vnode instanceof VNode) {
      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
    } else if (Array.isArray(vnode)) {
      var vnodes = normalizeChildren(vnode) || [];
      var res = new Array(vnodes.length);

      for (var i = 0; i < vnodes.length; i++) {
        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
      }

      return res;
    }
  }

  function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
    // #7817 clone node before setting fnContext, otherwise if the node is reused
    // (e.g. it was from a cached normal slot) the fnContext causes named slots
    // that should not be matched to match.
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;

    if ("development" !== 'production') {
      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
    }

    if (data.slot) {
      (clone.data || (clone.data = {})).slot = data.slot;
    }

    return clone;
  }

  function mergeProps(to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }
  /*  */

  /*  */

  /*  */

  /*  */
  // inline hooks to be invoked on component VNodes during patch


  var componentVNodeHooks = {
    init: function init(vnode, hydrating) {
      if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow

        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      } else {
        var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      }
    },
    prepatch: function prepatch(oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(child, options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
      );
    },
    insert: function insert(vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;

      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }

      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true
          /* direct */
          );
        }
      }
    },
    destroy: function destroy(vnode) {
      var componentInstance = vnode.componentInstance;

      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true
          /* direct */
          );
        }
      }
    }
  };
  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
      return;
    }

    var baseCtor = context.$options._base; // plain options object: turn it into a constructor

    if (isObject$1(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    } // if at this stage it's not a constructor or an async component factory,
    // reject.


    if (typeof Ctor !== 'function') {
      if ("development" !== 'production') {
        warn("Invalid Component definition: " + String(Ctor), context);
      }

      return;
    } // async component


    var asyncFactory;

    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
      }
    }

    data = data || {}; // resolve constructor options in case global mixins are applied after
    // component constructor creation

    resolveConstructorOptions(Ctor); // transform component v-model data into props & events

    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    } // extract props


    var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children);
    } // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners


    var listeners = data.on; // replace with listeners with .native modifier
    // so it gets processed during parent component patch.

    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot
      // work around flow
      var slot = data.slot;
      data = {};

      if (slot) {
        data.slot = slot;
      }
    } // install component management hooks onto the placeholder node


    installComponentHooks(data); // return a placeholder vnode

    var name = Ctor.options.name || tag;
    var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
      Ctor: Ctor,
      propsData: propsData,
      listeners: listeners,
      tag: tag,
      children: children
    }, asyncFactory);
    return vnode;
  }

  function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
  ) {
    var options = {
      _isComponent: true,
      _parentVnode: vnode,
      parent: parent
    }; // check inline-template render functions

    var inlineTemplate = vnode.data.inlineTemplate;

    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }

    return new vnode.componentOptions.Ctor(options);
  }

  function installComponentHooks(data) {
    var hooks = data.hook || (data.hook = {});

    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var existing = hooks[key];
      var toMerge = componentVNodeHooks[key];

      if (existing !== toMerge && !(existing && existing._merged)) {
        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
      }
    }
  }

  function mergeHook$1(f1, f2) {
    var merged = function (a, b) {
      // flow complains about extra args which is why we use any
      f1(a, b);
      f2(a, b);
    };

    merged._merged = true;
    return merged;
  } // transform component v-model info (value and callback) into
  // prop and event handler respectively.


  function transformModel(options, data) {
    var prop = options.model && options.model.prop || 'value';
    var event = options.model && options.model.event || 'input';
    (data.attrs || (data.attrs = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    var existing = on[event];
    var callback = data.model.callback;

    if (isDef(existing)) {
      if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
        on[event] = [callback].concat(existing);
      }
    } else {
      on[event] = callback;
    }
  }
  /*  */


  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
  // without getting yelled at by flow

  function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }

    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }

    return _createElement(context, tag, data, children, normalizationType);
  }

  function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
      "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
      return createEmptyVNode();
    } // object syntax in v-bind


    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }

    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode();
    } // warn against non-primitive key


    if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
      {
        warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
      }
    } // support single function children as default scoped slot


    if (Array.isArray(children) && typeof children[0] === 'function') {
      data = data || {};
      data.scopedSlots = {
        default: children[0]
      };
      children.length = 0;
    }

    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }

    var vnode, ns;

    if (typeof tag === 'string') {
      var Ctor;
      ns = context.$vnode && context.$vnode.ns || config$1.getTagNamespace(tag);

      if (config$1.isReservedTag(tag)) {
        // platform built-in elements
        if ("development" !== 'production' && isDef(data) && isDef(data.nativeOn)) {
          warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
        }

        vnode = new VNode(config$1.parsePlatformTagName(tag), data, children, undefined, undefined, context);
      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(tag, data, children, undefined, undefined, context);
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }

    if (Array.isArray(vnode)) {
      return vnode;
    } else if (isDef(vnode)) {
      if (isDef(ns)) {
        applyNS(vnode, ns);
      }

      if (isDef(data)) {
        registerDeepBindings(data);
      }

      return vnode;
    } else {
      return createEmptyVNode();
    }
  }

  function applyNS(vnode, ns, force) {
    vnode.ns = ns;

    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      ns = undefined;
      force = true;
    }

    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];

        if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
          applyNS(child, ns, force);
        }
      }
    }
  } // ref #5318
  // necessary to ensure parent re-render when deep bindings like :style and
  // :class are used on slot nodes


  function registerDeepBindings(data) {
    if (isObject$1(data.style)) {
      traverse(data.style);
    }

    if (isObject$1(data.class)) {
      traverse(data.class);
    }
  }
  /*  */


  function initRender(vm) {
    vm._vnode = null; // the root of the child tree

    vm._staticTrees = null; // v-once cached trees

    var options = vm.$options;
    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates

    vm._c = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, false);
    }; // normalization is always applied for the public version, used in
    // user-written render functions.


    vm.$createElement = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, true);
    }; // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated


    var parentData = parentVnode && parentVnode.data;
    /* istanbul ignore else */

    if ("development" !== 'production') {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    } else {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
    }
  }

  var currentRenderingInstance = null;

  function renderMixin(Vue) {
    // install runtime convenience helpers
    installRenderHelpers(Vue.prototype);

    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this);
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var _parentVnode = ref._parentVnode;

      if (_parentVnode) {
        vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
      } // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.


      vm.$vnode = _parentVnode; // render self

      var vnode;

      try {
        // There's no need to maintain a stack because all render fns are called
        // separately from one another. Nested component's render fns are called
        // when parent component is patched.
        currentRenderingInstance = vm;
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render"); // return error render result,
        // or previous vnode to prevent render error causing blank component

        /* istanbul ignore else */

        if ("development" !== 'production' && vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } finally {
        currentRenderingInstance = null;
      } // if the returned array contains only a single node, allow it


      if (Array.isArray(vnode) && vnode.length === 1) {
        vnode = vnode[0];
      } // return empty vnode in case the render function errored out


      if (!(vnode instanceof VNode)) {
        if ("development" !== 'production' && Array.isArray(vnode)) {
          warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
        }

        vnode = createEmptyVNode();
      } // set parent


      vnode.parent = _parentVnode;
      return vnode;
    };
  }
  /*  */


  function ensureCtor(comp, base) {
    if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
      comp = comp.default;
    }

    return isObject$1(comp) ? base.extend(comp) : comp;
  }

  function createAsyncPlaceholder(factory, data, context, children, tag) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = {
      data: data,
      context: context,
      children: children,
      tag: tag
    };
    return node;
  }

  function resolveAsyncComponent(factory, baseCtor) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp;
    }

    if (isDef(factory.resolved)) {
      return factory.resolved;
    }

    var owner = currentRenderingInstance;

    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
      // already pending
      factory.owners.push(owner);
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp;
    }

    if (owner && !isDef(factory.owners)) {
      var owners = factory.owners = [owner];
      var sync = true;
      var timerLoading = null;
      var timerTimeout = null;
      owner.$on('hook:destroyed', function () {
        return remove(owners, owner);
      });

      var forceRender = function (renderCompleted) {
        for (var i = 0, l = owners.length; i < l; i++) {
          owners[i].$forceUpdate();
        }

        if (renderCompleted) {
          owners.length = 0;

          if (timerLoading !== null) {
            clearTimeout(timerLoading);
            timerLoading = null;
          }

          if (timerTimeout !== null) {
            clearTimeout(timerTimeout);
            timerTimeout = null;
          }
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)

        if (!sync) {
          forceRender(true);
        } else {
          owners.length = 0;
        }
      });
      var reject = once(function (reason) {
        "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender(true);
        }
      });
      var res = factory(resolve, reject);

      if (isObject$1(res)) {
        if (isPromise(res)) {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isPromise(res.component)) {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);

            if (res.delay === 0) {
              factory.loading = true;
            } else {
              timerLoading = setTimeout(function () {
                timerLoading = null;

                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender(false);
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            timerTimeout = setTimeout(function () {
              timerTimeout = null;

              if (isUndef(factory.resolved)) {
                reject("development" !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
              }
            }, res.timeout);
          }
        }
      }

      sync = false; // return in case resolved synchronously

      return factory.loading ? factory.loadingComp : factory.resolved;
    }
  }
  /*  */


  function isAsyncPlaceholder(node) {
    return node.isComment && node.asyncFactory;
  }
  /*  */


  function getFirstComponentChild(children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];

        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
          return c;
        }
      }
    }
  }
  /*  */

  /*  */


  function initEvents(vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false; // init parent attached events

    var listeners = vm.$options._parentListeners;

    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target$1;

  function add(event, fn) {
    target$1.$on(event, fn);
  }

  function remove$1(event, fn) {
    target$1.$off(event, fn);
  }

  function createOnceHandler(event, fn) {
    var _target = target$1;
    return function onceHandler() {
      var res = fn.apply(null, arguments);

      if (res !== null) {
        _target.$off(event, onceHandler);
      }
    };
  }

  function updateComponentListeners(vm, listeners, oldListeners) {
    target$1 = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
    target$1 = undefined;
  }

  function eventsMixin(Vue) {
    var hookRE = /^hook:/;

    Vue.prototype.$on = function (event, fn) {
      var vm = this;

      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          vm.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup

        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }

      return vm;
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;

      function on() {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }

      on.fn = fn;
      vm.$on(event, on);
      return vm;
    };

    Vue.prototype.$off = function (event, fn) {
      var vm = this; // all

      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm;
      } // array of events


      if (Array.isArray(event)) {
        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
          vm.$off(event[i$1], fn);
        }

        return vm;
      } // specific event


      var cbs = vm._events[event];

      if (!cbs) {
        return vm;
      }

      if (!fn) {
        vm._events[event] = null;
        return vm;
      } // specific handler


      var cb;
      var i = cbs.length;

      while (i--) {
        cb = cbs[i];

        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break;
        }
      }

      return vm;
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;

      if ("development" !== 'production') {
        var lowerCaseEvent = event.toLowerCase();

        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
        }
      }

      var cbs = vm._events[event];

      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        var info = "event handler for \"" + event + "\"";

        for (var i = 0, l = cbs.length; i < l; i++) {
          invokeWithErrorHandling(cbs[i], vm, args, vm, info);
        }
      }

      return vm;
    };
  }
  /*  */


  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function setActiveInstance(vm) {
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    return function () {
      activeInstance = prevActiveInstance;
    };
  }

  function initLifecycle(vm) {
    var options = vm.$options; // locate first non-abstract parent

    var parent = options.parent;

    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }

      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;
    vm.$children = [];
    vm.$refs = {};
    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin(Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var restoreActiveInstance = setActiveInstance(vm);
      vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.

      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
        /* removeOnly */
        );
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }

      restoreActiveInstance(); // update __vue__ reference

      if (prevEl) {
        prevEl.__vue__ = null;
      }

      if (vm.$el) {
        vm.$el.__vue__ = vm;
      } // if parent is an HOC, update its $el as well


      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      } // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.

    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;

      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;

      if (vm._isBeingDestroyed) {
        return;
      }

      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true; // remove self from parent

      var parent = vm.$parent;

      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      } // teardown watchers


      if (vm._watcher) {
        vm._watcher.teardown();
      }

      var i = vm._watchers.length;

      while (i--) {
        vm._watchers[i].teardown();
      } // remove reference from data ob
      // frozen object may not have observer.


      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      } // call the last hook...


      vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

      vm.__patch__(vm._vnode, null); // fire destroyed hook


      callHook(vm, 'destroyed'); // turn off all instance listeners.

      vm.$off(); // remove __vue__ reference

      if (vm.$el) {
        vm.$el.__vue__ = null;
      } // release circular reference (#6759)


      if (vm.$vnode) {
        vm.$vnode.parent = null;
      }
    };
  }

  function mountComponent(vm, el, hydrating) {
    vm.$el = el;

    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;

      if ("development" !== 'production') {
        /* istanbul ignore if */
        if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
          warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
        } else {
          warn('Failed to mount component: template or render function not defined.', vm);
        }
      }
    }

    callHook(vm, 'beforeMount');
    var updateComponent;
    /* istanbul ignore if */

    if ("development" !== 'production' && config$1.performance && mark) {
      updateComponent = function () {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;
        mark(startTag);

        var vnode = vm._render();

        mark(endTag);
        measure("vue " + name + " render", startTag, endTag);
        mark(startTag);

        vm._update(vnode, hydrating);

        mark(endTag);
        measure("vue " + name + " patch", startTag, endTag);
      };
    } else {
      updateComponent = function () {
        vm._update(vm._render(), hydrating);
      };
    } // we set this to vm._watcher inside the watcher's constructor
    // since the watcher's initial patch may call $forceUpdate (e.g. inside child
    // component's mounted hook), which relies on vm._watcher being already defined


    new Watcher(vm, updateComponent, noop, {
      before: function before() {
        if (vm._isMounted && !vm._isDestroyed) {
          callHook(vm, 'beforeUpdate');
        }
      }
    }, true
    /* isRenderWatcher */
    );
    hydrating = false; // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook

    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }

    return vm;
  }

  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    if ("development" !== 'production') {
      isUpdatingChildComponent = true;
    } // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren.
    // check if there are dynamic scopedSlots (hand-written or compiled but with
    // dynamic slot names). Static scoped slots compiled from template has the
    // "$stable" marker.


    var newScopedSlots = parentVnode.data.scopedSlots;
    var oldScopedSlots = vm.$scopedSlots;
    var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
    // update. Dynamic scoped slots may also have changed. In such cases, a forced
    // update is necessary to ensure correctness.

    var needsForceUpdate = !!(renderChildren || // has new static slots
    vm.$options._renderChildren || // has old static slots
    hasDynamicScopedSlot);
    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) {
      // update child tree's parent
      vm._vnode.parent = parentVnode;
    }

    vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render

    vm.$attrs = parentVnode.data.attrs || emptyObject;
    vm.$listeners = listeners || emptyObject; // update props

    if (propsData && vm.$options.props) {
      toggleObserving(false);
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];

      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        var propOptions = vm.$options.props; // wtf flow?

        props[key] = validateProp(key, propOptions, propsData, vm);
      }

      toggleObserving(true); // keep a copy of raw propsData

      vm.$options.propsData = propsData;
    } // update listeners


    listeners = listeners || emptyObject;
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

    if (needsForceUpdate) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    if ("development" !== 'production') {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) {
        return true;
      }
    }

    return false;
  }

  function activateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = false;

      if (isInInactiveTree(vm)) {
        return;
      }
    } else if (vm._directInactive) {
      return;
    }

    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;

      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }

      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = true;

      if (isInInactiveTree(vm)) {
        return;
      }
    }

    if (!vm._inactive) {
      vm._inactive = true;

      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }

      callHook(vm, 'deactivated');
    }
  }

  function callHook(vm, hook) {
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";

    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        invokeWithErrorHandling(handlers[i], vm, null, vm, info);
      }
    }

    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }

    popTarget();
  }
  /*  */


  var MAX_UPDATE_COUNT = 100;
  var queue = [];
  var activatedChildren = [];
  var has$1 = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index$1 = 0;
  /**
   * Reset the scheduler's state.
   */

  function resetSchedulerState() {
    index$1 = queue.length = activatedChildren.length = 0;
    has$1 = {};

    if ("development" !== 'production') {
      circular = {};
    }

    waiting = flushing = false;
  } // Async edge case #6566 requires saving the timestamp when event listeners are
  // attached. However, calling performance.now() has a perf overhead especially
  // if the page has thousands of event listeners. Instead, we take a timestamp
  // every time the scheduler flushes and use that for all event listeners
  // attached during that flush.


  var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

  var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
  // timestamp can either be hi-res (relative to page load) or low-res
  // (relative to UNIX epoch), so in order to compare time we have to use the
  // same timestamp type when saving the flush timestamp.
  // All IE versions use low-res event timestamps, and have problematic clock
  // implementations (#9632)

  if (inBrowser && !isIE) {
    var performance = window.performance;

    if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
      // if the event timestamp, although evaluated AFTER the Date.now(), is
      // smaller than it, it means the event is using a hi-res timestamp,
      // and we need to use the hi-res version for event listener timestamps as
      // well.
      getNow = function () {
        return performance.now();
      };
    }
  }
  /**
   * Flush both queues and run the watchers.
   */


  function flushSchedulerQueue() {
    currentFlushTimestamp = getNow();
    flushing = true;
    var watcher, id; // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.

    queue.sort(function (a, b) {
      return a.id - b.id;
    }); // do not cache length because more watchers might be pushed
    // as we run existing watchers

    for (index$1 = 0; index$1 < queue.length; index$1++) {
      watcher = queue[index$1];

      if (watcher.before) {
        watcher.before();
      }

      id = watcher.id;
      has$1[id] = null;
      watcher.run(); // in dev build, check and stop circular updates.

      if ("development" !== 'production' && has$1[id] != null) {
        circular[id] = (circular[id] || 0) + 1;

        if (circular[id] > MAX_UPDATE_COUNT) {
          warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
          break;
        }
      }
    } // keep copies of post queues before resetting state


    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();
    resetSchedulerState(); // call component updated and activated hooks

    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue); // devtool hook

    /* istanbul ignore if */

    if (devtools && config$1.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks(queue) {
    var i = queue.length;

    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;

      if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'updated');
      }
    }
  }
  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */


  function queueActivatedComponent(vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks(queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true
      /* true */
      );
    }
  }
  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */


  function queueWatcher(watcher) {
    var id = watcher.id;

    if (has$1[id] == null) {
      has$1[id] = true;

      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;

        while (i > index$1 && queue[i].id > watcher.id) {
          i--;
        }

        queue.splice(i + 1, 0, watcher);
      } // queue the flush


      if (!waiting) {
        waiting = true;

        if ("development" !== 'production' && !config$1.async) {
          flushSchedulerQueue();
          return;
        }

        nextTick(flushSchedulerQueue);
      }
    }
  }
  /*  */


  var uid$2 = 0;
  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */

  var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
    this.vm = vm;

    if (isRenderWatcher) {
      vm._watcher = this;
    }

    vm._watchers.push(this); // options


    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
      this.before = options.before;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }

    this.cb = cb;
    this.id = ++uid$2; // uid for batching

    this.active = true;
    this.dirty = this.lazy; // for lazy watchers

    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = "development" !== 'production' ? expOrFn.toString() : ''; // parse expression for getter

    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);

      if (!this.getter) {
        this.getter = noop;
        "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
      }
    }

    this.value = this.lazy ? undefined : this.get();
  };
  /**
   * Evaluate the getter, and re-collect dependencies.
   */


  Watcher.prototype.get = function get() {
    pushTarget(this);
    var value;
    var vm = this.vm;

    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
      } else {
        throw e;
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }

      popTarget();
      this.cleanupDeps();
    }

    return value;
  };
  /**
   * Add a dependency to this directive.
   */


  Watcher.prototype.addDep = function addDep(dep) {
    var id = dep.id;

    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);

      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };
  /**
   * Clean up for dependency collection.
   */


  Watcher.prototype.cleanupDeps = function cleanupDeps() {
    var i = this.deps.length;

    while (i--) {
      var dep = this.deps[i];

      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }

    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };
  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */


  Watcher.prototype.update = function update() {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };
  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */


  Watcher.prototype.run = function run() {
    if (this.active) {
      var value = this.get();

      if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject$1(value) || this.deep) {
        // set new value
        var oldValue = this.value;
        this.value = value;

        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };
  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */


  Watcher.prototype.evaluate = function evaluate() {
    this.value = this.get();
    this.dirty = false;
  };
  /**
   * Depend on all deps collected by this watcher.
   */


  Watcher.prototype.depend = function depend() {
    var i = this.deps.length;

    while (i--) {
      this.deps[i].depend();
    }
  };
  /**
   * Remove self from all dependencies' subscriber list.
   */


  Watcher.prototype.teardown = function teardown() {
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }

      var i = this.deps.length;

      while (i--) {
        this.deps[i].removeSub(this);
      }

      this.active = false;
    }
  };
  /*  */


  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy(target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
      return this[sourceKey][key];
    };

    sharedPropertyDefinition.set = function proxySetter(val) {
      this[sourceKey][key] = val;
    };

    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState(vm) {
    vm._watchers = [];
    var opts = vm.$options;

    if (opts.props) {
      initProps(vm, opts.props);
    }

    if (opts.methods) {
      initMethods(vm, opts.methods);
    }

    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true
      /* asRootData */
      );
    }

    if (opts.computed) {
      initComputed(vm, opts.computed);
    }

    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function initProps(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.

    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent; // root instance props should be converted

    if (!isRoot) {
      toggleObserving(false);
    }

    var loop = function (key) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */

      if ("development" !== 'production') {
        var hyphenatedKey = hyphenate(key);

        if (isReservedAttribute(hyphenatedKey) || config$1.isReservedAttr(hyphenatedKey)) {
          warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
        }

        defineReactive$$1(props, key, value, function () {
          if (!isRoot && !isUpdatingChildComponent) {
            warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
          }
        });
      } else {
        defineReactive$$1(props, key, value);
      } // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.


      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) loop(key);

    toggleObserving(true);
  }

  function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

    if (!isPlainObject(data)) {
      data = {};
      "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
    } // proxy data on instance


    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;

    while (i--) {
      var key = keys[i];

      if ("development" !== 'production') {
        if (methods && hasOwn(methods, key)) {
          warn("Method \"" + key + "\" has already been defined as a data property.", vm);
        }
      }

      if (props && hasOwn(props, key)) {
        "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    } // observe data


    observe(data, true
    /* asRootData */
    );
  }

  function getData(data, vm) {
    // #7573 disable dep collection when invoking data getters
    pushTarget();

    try {
      return data.call(vm, vm);
    } catch (e) {
      handleError(e, vm, "data()");
      return {};
    } finally {
      popTarget();
    }
  }

  var computedWatcherOptions = {
    lazy: true
  };

  function initComputed(vm, computed) {
    // $flow-disable-line
    var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

    var isSSR = isServerRendering();

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;

      if ("development" !== 'production' && getter == null) {
        warn("Getter is missing for computed property \"" + key + "\".", vm);
      }

      if (!isSSR) {
        // create internal watcher for the computed property.
        watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
      } // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.


      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else if ("development" !== 'production') {
        if (key in vm.$data) {
          warn("The computed property \"" + key + "\" is already defined in data.", vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
        }
      }
    }
  }

  function defineComputed(target, key, userDef) {
    var shouldCache = !isServerRendering();

    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
      sharedPropertyDefinition.set = userDef.set || noop;
    }

    if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function () {
        warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
      };
    }

    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter(key) {
    return function computedGetter() {
      var watcher = this._computedWatchers && this._computedWatchers[key];

      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }

        if (Dep.target) {
          watcher.depend();
        }

        return watcher.value;
      }
    };
  }

  function createGetterInvoker(fn) {
    return function computedGetter() {
      return fn.call(this, this);
    };
  }

  function initMethods(vm, methods) {
    var props = vm.$options.props;

    for (var key in methods) {
      if ("development" !== 'production') {
        if (typeof methods[key] !== 'function') {
          warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
        }

        if (props && hasOwn(props, key)) {
          warn("Method \"" + key + "\" has already been defined as a prop.", vm);
        }

        if (key in vm && isReserved(key)) {
          warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
        }
      }

      vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
    }
  }

  function initWatch(vm, watch) {
    for (var key in watch) {
      var handler = watch[key];

      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher(vm, expOrFn, handler, options) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }

    if (typeof handler === 'string') {
      handler = vm[handler];
    }

    return vm.$watch(expOrFn, handler, options);
  }

  function stateMixin(Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};

    dataDef.get = function () {
      return this._data;
    };

    var propsDef = {};

    propsDef.get = function () {
      return this._props;
    };

    if ("development" !== 'production') {
      dataDef.set = function () {
        warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
      };

      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }

    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);
    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;

      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options);
      }

      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);

      if (options.immediate) {
        try {
          cb.call(vm, watcher.value);
        } catch (error) {
          handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
        }
      }

      return function unwatchFn() {
        watcher.teardown();
      };
    };
  }
  /*  */


  var uid$3 = 0;

  function initMixin(Vue) {
    Vue.prototype._init = function (options) {
      var vm = this; // a uid

      vm._uid = uid$3++;
      var startTag, endTag;
      /* istanbul ignore if */

      if ("development" !== 'production' && config$1.performance && mark) {
        startTag = "vue-perf-start:" + vm._uid;
        endTag = "vue-perf-end:" + vm._uid;
        mark(startTag);
      } // a flag to avoid this being observed


      vm._isVue = true; // merge options

      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
      }
      /* istanbul ignore else */


      if ("development" !== 'production') {
        initProxy(vm);
      } else {
        vm._renderProxy = vm;
      } // expose real self


      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props

      initState(vm);
      initProvide(vm); // resolve provide after data/props

      callHook(vm, 'created');
      /* istanbul ignore if */

      if ("development" !== 'production' && config$1.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure("vue " + vm._name + " init", startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent(vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;
    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;

    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;

    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;

      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

        var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

        if (modifiedOptions) {
          extend$1(Ctor.extendOptions, modifiedOptions);
        }

        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }

    return options;
  }

  function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var sealed = Ctor.sealedOptions;

    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) {
          modified = {};
        }

        modified[key] = latest[key];
      }
    }

    return modified;
  }

  function Vue(options) {
    if ("development" !== 'production' && !(this instanceof Vue)) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }

    this._init(options);
  }

  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  renderMixin(Vue);
  /*  */

  function initUse(Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

      if (installedPlugins.indexOf(plugin) > -1) {
        return this;
      } // additional parameters


      var args = toArray(arguments, 1);
      args.unshift(this);

      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }

      installedPlugins.push(plugin);
      return this;
    };
  }
  /*  */


  function initMixin$1(Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this;
    };
  }
  /*  */


  function initExtend(Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;
    /**
     * Class inheritance
     */

    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId];
      }

      var name = extendOptions.name || Super.options.name;

      if ("development" !== 'production' && name) {
        validateComponentName(name);
      }

      var Sub = function VueComponent(options) {
        this._init(options);
      };

      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.

      if (Sub.options.props) {
        initProps$1(Sub);
      }

      if (Sub.options.computed) {
        initComputed$1(Sub);
      } // allow further extension/mixin/plugin usage


      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use; // create asset registers, so extended classes
      // can have their private assets too.

      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      }); // enable recursive self-lookup

      if (name) {
        Sub.options.components[name] = Sub;
      } // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.


      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend$1({}, Sub.options); // cache constructor

      cachedCtors[SuperId] = Sub;
      return Sub;
    };
  }

  function initProps$1(Comp) {
    var props = Comp.options.props;

    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1(Comp) {
    var computed = Comp.options.computed;

    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }
  /*  */


  function initAssetRegisters(Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          if ("development" !== 'production' && type === 'component') {
            validateComponentName(id);
          }

          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }

          if (type === 'directive' && typeof definition === 'function') {
            definition = {
              bind: definition,
              update: definition
            };
          }

          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });
  }
  /*  */


  function getComponentName(opts) {
    return opts && (opts.Ctor.options.name || opts.tag);
  }

  function matches$1(pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1;
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1;
    } else if (isRegExp$1(pattern)) {
      return pattern.test(name);
    }
    /* istanbul ignore next */


    return false;
  }

  function pruneCache(keepAliveInstance, filter) {
    var cache = keepAliveInstance.cache;
    var keys = keepAliveInstance.keys;
    var _vnode = keepAliveInstance._vnode;

    for (var key in cache) {
      var cachedNode = cache[key];

      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);

        if (name && !filter(name)) {
          pruneCacheEntry(cache, key, keys, _vnode);
        }
      }
    }
  }

  function pruneCacheEntry(cache, key, keys, current) {
    var cached$$1 = cache[key];

    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
      cached$$1.componentInstance.$destroy();
    }

    cache[key] = null;
    remove(keys, key);
  }

  var patternTypes = [String, RegExp, Array];
  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,
    props: {
      include: patternTypes,
      exclude: patternTypes,
      max: [String, Number]
    },
    created: function created() {
      this.cache = Object.create(null);
      this.keys = [];
    },
    destroyed: function destroyed() {
      for (var key in this.cache) {
        pruneCacheEntry(this.cache, key, this.keys);
      }
    },
    mounted: function mounted() {
      var this$1 = this;
      this.$watch('include', function (val) {
        pruneCache(this$1, function (name) {
          return matches$1(val, name);
        });
      });
      this.$watch('exclude', function (val) {
        pruneCache(this$1, function (name) {
          return !matches$1(val, name);
        });
      });
    },
    render: function render() {
      var slot = this.$slots.default;
      var vnode = getFirstComponentChild(slot);
      var componentOptions = vnode && vnode.componentOptions;

      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        var ref = this;
        var include = ref.include;
        var exclude = ref.exclude;

        if ( // not included
        include && (!name || !matches$1(include, name)) || // excluded
        exclude && name && matches$1(exclude, name)) {
          return vnode;
        }

        var ref$1 = this;
        var cache = ref$1.cache;
        var keys = ref$1.keys;
        var key = vnode.key == null // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

        if (cache[key]) {
          vnode.componentInstance = cache[key].componentInstance; // make current key freshest

          remove(keys, key);
          keys.push(key);
        } else {
          cache[key] = vnode;
          keys.push(key); // prune oldest entry

          if (this.max && keys.length > parseInt(this.max)) {
            pruneCacheEntry(cache, keys[0], keys, this._vnode);
          }
        }

        vnode.data.keepAlive = true;
      }

      return vnode || slot && slot[0];
    }
  };
  var builtInComponents = {
    KeepAlive: KeepAlive
  };
  /*  */

  function initGlobalAPI(Vue) {
    // config
    var configDef = {};

    configDef.get = function () {
      return config$1;
    };

    if ("development" !== 'production') {
      configDef.set = function () {
        warn('Do not replace the Vue.config object, set individual fields instead.');
      };
    }

    Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.

    Vue.util = {
      warn: warn,
      extend: extend$1,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };
    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick; // 2.6 explicit observable API

    Vue.observable = function (obj) {
      observe(obj);
      return obj;
    };

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    }); // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.

    Vue.options._base = Vue;
    extend$1(Vue.options.components, builtInComponents);
    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue);
  Object.defineProperty(Vue.prototype, '$isServer', {
    get: isServerRendering
  });
  Object.defineProperty(Vue.prototype, '$ssrContext', {
    get: function get() {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext;
    }
  }); // expose FunctionalRenderContext for ssr runtime helper installation

  Object.defineProperty(Vue, 'FunctionalRenderContext', {
    value: FunctionalRenderContext
  });
  Vue.version = '2.6.11';
  /*  */
  // these are reserved for web because they are directly compiled away
  // during template compilation

  var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

  var acceptValue = makeMap('input,textarea,option,select,progress');

  var mustUseProp = function (tag, type, attr) {
    return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

  var convertEnumeratedValue = function (key, value) {
    return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
  };

  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function (name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
  };

  var getXlinkProp = function (name) {
    return isXlink(name) ? name.slice(6, name.length) : '';
  };

  var isFalsyAttrValue = function (val) {
    return val == null || val === false;
  };
  /*  */


  function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;

    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }

    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode && parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }

    return renderClass(data.staticClass, data.class);
  }

  function mergeClassData(child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
  }

  function renderClass(staticClass, dynamicClass) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass));
    }
    /* istanbul ignore next */


    return '';
  }

  function concat(a, b) {
    return a ? b ? a + ' ' + b : a : b || '';
  }

  function stringifyClass(value) {
    if (Array.isArray(value)) {
      return stringifyArray(value);
    }

    if (isObject$1(value)) {
      return stringifyObject(value);
    }

    if (typeof value === 'string') {
      return value;
    }
    /* istanbul ignore next */


    return '';
  }

  function stringifyArray(value) {
    var res = '';
    var stringified;

    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) {
          res += ' ';
        }

        res += stringified;
      }
    }

    return res;
  }

  function stringifyObject(value) {
    var res = '';

    for (var key in value) {
      if (value[key]) {
        if (res) {
          res += ' ';
        }

        res += key;
      }
    }

    return res;
  }
  /*  */


  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };
  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.

  var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

  var isReservedTag = function (tag) {
    return isHTMLTag(tag) || isSVG(tag);
  };

  function getTagNamespace(tag) {
    if (isSVG(tag)) {
      return 'svg';
    } // basic support for MathML
    // note it doesn't support other MathML elements being component roots


    if (tag === 'math') {
      return 'math';
    }
  }

  var unknownElementCache = Object.create(null);

  function isUnknownElement(tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true;
    }

    if (isReservedTag(tag)) {
      return false;
    }

    tag = tag.toLowerCase();
    /* istanbul ignore if */

    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag];
    }

    var el = document.createElement(tag);

    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
    }
  }

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');
  /*  */

  /**
   * Query an element selector if it's not an element already.
   */

  function query(el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);

      if (!selected) {
        "development" !== 'production' && warn('Cannot find element: ' + el);
        return document.createElement('div');
      }

      return selected;
    } else {
      return el;
    }
  }
  /*  */


  function createElement$1(tagName, vnode) {
    var elm = document.createElement(tagName);

    if (tagName !== 'select') {
      return elm;
    } // false or null will remove the attribute but undefined will not


    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }

    return elm;
  }

  function createElementNS(namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName);
  }

  function createTextNode(text) {
    return document.createTextNode(text);
  }

  function createComment(text) {
    return document.createComment(text);
  }

  function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild(node, child) {
    node.removeChild(child);
  }

  function appendChild(node, child) {
    node.appendChild(child);
  }

  function parentNode(node) {
    return node.parentNode;
  }

  function nextSibling(node) {
    return node.nextSibling;
  }

  function tagName(node) {
    return node.tagName;
  }

  function setTextContent(node, text) {
    node.textContent = text;
  }

  function setStyleScope(node, scopeId) {
    node.setAttribute(scopeId, '');
  }

  var nodeOps =
  /*#__PURE__*/
  Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setStyleScope: setStyleScope
  });
  /*  */

  var ref = {
    create: function create(_, vnode) {
      registerRef(vnode);
    },
    update: function update(oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy(vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef(vnode, isRemoval) {
    var key = vnode.data.ref;

    if (!isDef(key)) {
      return;
    }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;

    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }
  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */


  var emptyNode = new VNode('', {}, []);
  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode(a, b) {
    return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
  }

  function sameInputType(a, b) {
    if (a.tag !== 'input') {
      return true;
    }

    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
  }

  function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};

    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;

      if (isDef(key)) {
        map[key] = i;
      }
    }

    return map;
  }

  function createPatchFunction(backend) {
    var i, j;
    var cbs = {};
    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];

      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt(elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
    }

    function createRmCb(childElm, listeners) {
      function remove$$1() {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }

      remove$$1.listeners = listeners;
      return remove$$1;
    }

    function removeNode(el) {
      var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    function isUnknownElement$$1(vnode, inVPre) {
      return !inVPre && !vnode.ns && !(config$1.ignoredElements.length && config$1.ignoredElements.some(function (ignore) {
        return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
      })) && config$1.isUnknownElement(vnode.tag);
    }

    var creatingElmInVPre = 0;

    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // This vnode was used in a previous render!
        // now it's used as a new node, overwriting its elm would cause
        // potential patch errors down the road when it's used as an insertion
        // reference node. Instead, we clone the node on-demand before creating
        // associated DOM element for it.
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      vnode.isRootInsert = !nested; // for transition enter check

      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return;
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;

      if (isDef(tag)) {
        if ("development" !== 'production') {
          if (data && data.pre) {
            creatingElmInVPre++;
          }

          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
          }
        }

        vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
        setScope(vnode);
        /* istanbul ignore if */

        {
          createChildren(vnode, children, insertedVnodeQueue);

          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }

          insert(parentElm, vnode.elm, refElm);
        }

        if ("development" !== 'production' && data && data.pre) {
          creatingElmInVPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;

      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false
          /* hydrating */
          );
        } // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.


        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          insert(parentElm, vnode.elm, refElm);

          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }

          return true;
        }
      }
    }

    function initComponent(vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }

      vnode.elm = vnode.componentInstance.$el;

      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode); // make sure to invoke the insert hook

        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i; // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.

      var innerNode = vnode;

      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;

        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }

          insertedVnodeQueue.push(innerNode);
          break;
        }
      } // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself


      insert(parentElm, vnode.elm, refElm);
    }

    function insert(parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (nodeOps.parentNode(ref$$1) === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren(vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        if ("development" !== 'production') {
          checkDuplicateKeys(children);
        }

        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
      }
    }

    function isPatchable(vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }

      return isDef(vnode.tag);
    }

    function invokeCreateHooks(vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }

      i = vnode.data.hook; // Reuse variable

      if (isDef(i)) {
        if (isDef(i.create)) {
          i.create(emptyNode, vnode);
        }

        if (isDef(i.insert)) {
          insertedVnodeQueue.push(vnode);
        }
      }
    } // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.


    function setScope(vnode) {
      var i;

      if (isDef(i = vnode.fnScopeId)) {
        nodeOps.setStyleScope(vnode.elm, i);
      } else {
        var ancestor = vnode;

        while (ancestor) {
          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          }

          ancestor = ancestor.parent;
        }
      } // for slot content they should also get the scopeId from the host instance.


      if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
        nodeOps.setStyleScope(vnode.elm, i);
      }
    }

    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
      }
    }

    function invokeDestroyHook(vnode) {
      var i, j;
      var data = vnode.data;

      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
          i(vnode);
        }

        for (i = 0; i < cbs.destroy.length; ++i) {
          cbs.destroy[i](vnode);
        }
      }

      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes(vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];

        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else {
            // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook(vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;

        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        } // recursively invoke hooks on child component root node


        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }

        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }

        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions

      var canMove = !removeOnly;

      if ("development" !== 'production') {
        checkDuplicateKeys(newCh);
      }

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) {
          // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) {
          // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) {
            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
          }

          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

          if (isUndef(idxInOld)) {
            // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          } else {
            vnodeToMove = oldCh[idxInOld];

            if (sameVnode(vnodeToMove, newStartVnode)) {
              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            }
          }

          newStartVnode = newCh[++newStartIdx];
        }
      }

      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function checkDuplicateKeys(children) {
      var seenKeys = {};

      for (var i = 0; i < children.length; i++) {
        var vnode = children[i];
        var key = vnode.key;

        if (isDef(key)) {
          if (seenKeys[key]) {
            warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
          } else {
            seenKeys[key] = true;
          }
        }
      }
    }

    function findIdxInOld(node, oldCh, start, end) {
      for (var i = start; i < end; i++) {
        var c = oldCh[i];

        if (isDef(c) && sameVnode(node, c)) {
          return i;
        }
      }
    }

    function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
      if (oldVnode === vnode) {
        return;
      }

      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // clone reused vnode
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }

        return;
      } // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.


      if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
        vnode.componentInstance = oldVnode.componentInstance;
        return;
      }

      var i;
      var data = vnode.data;

      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;

      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) {
          cbs.update[i](oldVnode, vnode);
        }

        if (isDef(i = data.hook) && isDef(i = i.update)) {
          i(oldVnode, vnode);
        }
      }

      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) {
            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
          }
        } else if (isDef(ch)) {
          if ("development" !== 'production') {
            checkDuplicateKeys(ch);
          }

          if (isDef(oldVnode.text)) {
            nodeOps.setTextContent(elm, '');
          }

          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }

      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
          i(oldVnode, vnode);
        }
      }
    }

    function invokeInsertHook(vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    // Note: style is excluded because it relies on initial clone for future
    // deep updates (#7063).

    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

    function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
      var i;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      inVPre = inVPre || data && data.pre;
      vnode.elm = elm;

      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.isAsyncPlaceholder = true;
        return true;
      } // assert node match


      if ("development" !== 'production') {
        if (!assertNodeMatch(elm, vnode, inVPre)) {
          return false;
        }
      }

      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) {
          i(vnode, true
          /* hydrating */
          );
        }

        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true;
        }
      }

      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            // v-html and domProps: innerHTML
            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
              if (i !== elm.innerHTML) {
                /* istanbul ignore if */
                if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('server innerHTML: ', i);
                  console.warn('client innerHTML: ', elm.innerHTML);
                }

                return false;
              }
            } else {
              // iterate and compare children lists
              var childrenMatch = true;
              var childNode = elm.firstChild;

              for (var i$1 = 0; i$1 < children.length; i$1++) {
                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                  childrenMatch = false;
                  break;
                }

                childNode = childNode.nextSibling;
              } // if childNode is not null, it means the actual childNodes list is
              // longer than the virtual children list.


              if (!childrenMatch || childNode) {
                /* istanbul ignore if */
                if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                }

                return false;
              }
            }
          }
        }

        if (isDef(data)) {
          var fullInvoke = false;

          for (var key in data) {
            if (!isRenderedModule(key)) {
              fullInvoke = true;
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break;
            }
          }

          if (!fullInvoke && data['class']) {
            // ensure collecting deps for deep class bindings for future updates
            traverse(data['class']);
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }

      return true;
    }

    function assertNodeMatch(node, vnode, inVPre) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3);
      }
    }

    return function patch(oldVnode, vnode, hydrating, removeOnly) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) {
          invokeDestroyHook(oldVnode);
        }

        return;
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);

        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }

            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode;
              } else if ("development" !== 'production') {
                warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
              }
            } // either not server-rendered, or hydration failed.
            // create an empty node and replace it


            oldVnode = emptyNodeAt(oldVnode);
          } // replacing existing element


          var oldElm = oldVnode.elm;
          var parentElm = nodeOps.parentNode(oldElm); // create new node

          createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

          if (isDef(vnode.parent)) {
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);

            while (ancestor) {
              for (var i = 0; i < cbs.destroy.length; ++i) {
                cbs.destroy[i](ancestor);
              }

              ancestor.elm = vnode.elm;

              if (patchable) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                  cbs.create[i$1](emptyNode, ancestor);
                } // #6513
                // invoke insert hooks that may have been merged by create hooks.
                // e.g. for directives that uses the "inserted" hook.


                var insert = ancestor.data.hook.insert;

                if (insert.merged) {
                  // start at index 1 to avoid re-invoking component mounted hook
                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                    insert.fns[i$2]();
                  }
                }
              } else {
                registerRef(ancestor);
              }

              ancestor = ancestor.parent;
            }
          } // destroy old node


          if (isDef(parentElm)) {
            removeVnodes([oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm;
    };
  }
  /*  */


  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
    var dirsWithInsert = [];
    var dirsWithPostpatch = [];
    var key, oldDir, dir;

    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];

      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);

        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        dir.oldArg = oldDir.arg;
        callHook$1(dir, 'update', vnode, oldVnode);

        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function () {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };

      if (isCreate) {
        mergeVNodeHook(vnode, 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode, 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1(dirs, vm) {
    var res = Object.create(null);

    if (!dirs) {
      // $flow-disable-line
      return res;
    }

    var i, dir;

    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];

      if (!dir.modifiers) {
        // $flow-disable-line
        dir.modifiers = emptyModifiers;
      }

      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    } // $flow-disable-line


    return res;
  }

  function getRawDirName(dir) {
    return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
  }

  function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];

    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
      }
    }
  }

  var baseModules = [ref, directives];
  /*  */

  function updateAttrs(oldVnode, vnode) {
    var opts = vnode.componentOptions;

    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return;
    }

    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return;
    }

    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend$1({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];

      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    } // #4391: in IE9, setting type can reset value for input[type=radio]
    // #6666: IE/Edge forces progress value down to 1 before setting a max

    /* istanbul ignore if */


    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }

    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr(el, key, value) {
    if (el.tagName.indexOf('-') > -1) {
      baseSetAttr(el, key, value);
    } else if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // technically allowfullscreen is a boolean attribute for <iframe>,
        // but Flash expects a value of "true" when used on <embed> tag
        value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, convertEnumeratedValue(key, value));
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      baseSetAttr(el, key, value);
    }
  }

  function baseSetAttr(el, key, value) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.

      /* istanbul ignore if */
      if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };

        el.addEventListener('input', blocker); // $flow-disable-line

        el.__ieph = true;
        /* IE placeholder patched */
      }

      el.setAttribute(key, value);
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };
  /*  */

  function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
      return;
    }

    var cls = genClassForVnode(vnode); // handle transition classes

    var transitionClass = el._transitionClasses;

    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    } // set the class


    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };
  /*  */

  /*  */

  /*  */

  /*  */
  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.

  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';
  /*  */
  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.

  function normalizeEvents(on) {
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      var event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    } // This was originally intended to fix #4521 but no longer necessary
    // after 2.5. Keeping it for backwards compat with generated code from < 2.4

    /* istanbul ignore if */


    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1$1;

  function createOnceHandler$1(event, handler, capture) {
    var _target = target$1$1; // save current target element in closure

    return function onceHandler() {
      var res = handler.apply(null, arguments);

      if (res !== null) {
        remove$2(event, onceHandler, capture, _target);
      }
    };
  } // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
  // implementation and does not fire microtasks in between event propagation, so
  // safe to exclude.


  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

  function add$1(name, handler, capture, passive) {
    // async edge case #6566: inner click event triggers patch, event handler
    // attached to outer element during patch, and triggered again. This
    // happens because browsers fire microtask ticks between event propagation.
    // the solution is simple: we save the timestamp when a handler is attached,
    // and the handler would only fire if the event passed to it was fired
    // AFTER it was attached.
    if (useMicrotaskFix) {
      var attachedTimestamp = currentFlushTimestamp;
      var original = handler;

      handler = original._wrapper = function (e) {
        if ( // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget || // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document) {
          return original.apply(this, arguments);
        }
      };
    }

    target$1$1.addEventListener(name, handler, supportsPassive ? {
      capture: capture,
      passive: passive
    } : capture);
  }

  function remove$2(name, handler, capture, _target) {
    (_target || target$1$1).removeEventListener(name, handler._wrapper || handler, capture);
  }

  function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return;
    }

    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
    target$1$1 = undefined;
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };
  /*  */

  var svgContainer;

  function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return;
    }

    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend$1({}, props);
    }

    for (key in oldProps) {
      if (!(key in props)) {
        elm[key] = '';
      }
    }

    for (key in props) {
      cur = props[key]; // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)

      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) {
          vnode.children.length = 0;
        }

        if (cur === oldProps[key]) {
          continue;
        } // #6601 work around Chrome version <= 55 bug where single textNode
        // replaced by innerHTML/textContent retains its parentNode property


        if (elm.childNodes.length === 1) {
          elm.removeChild(elm.childNodes[0]);
        }
      }

      if (key === 'value' && elm.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur; // avoid resetting cursor position when value is the same

        var strCur = isUndef(cur) ? '' : String(cur);

        if (shouldUpdateValue(elm, strCur)) {
          elm.value = strCur;
        }
      } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
        // IE doesn't support innerHTML for SVG elements
        svgContainer = svgContainer || document.createElement('div');
        svgContainer.innerHTML = "<svg>" + cur + "</svg>";
        var svg = svgContainer.firstChild;

        while (elm.firstChild) {
          elm.removeChild(elm.firstChild);
        }

        while (svg.firstChild) {
          elm.appendChild(svg.firstChild);
        }
      } else if ( // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]) {
        // some property updates can throw
        // e.g. `value` on <progress> w/ non-finite value
        try {
          elm[key] = cur;
        } catch (e) {}
      }
    }
  } // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue(elm, checkVal) {
    return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
  }

  function isNotInFocusAndDirty(elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true; // #6157
    // work around IE bug when accessing document.activeElement in an iframe

    try {
      notInFocus = document.activeElement !== elm;
    } catch (e) {}

    return notInFocus && elm.value !== checkVal;
  }

  function isDirtyWithModifiers(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime

    if (isDef(modifiers)) {
      if (modifiers.number) {
        return toNumber(value) !== toNumber(newVal);
      }

      if (modifiers.trim) {
        return value.trim() !== newVal.trim();
      }
    }

    return value !== newVal;
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };
  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res;
  }); // merge static and dynamic style data on the same vnode

  function normalizeStyleData(data) {
    var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it

    return data.staticStyle ? extend$1(data.staticStyle, style) : style;
  } // normalize possible array / string values into Object


  function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle);
    }

    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle);
    }

    return bindingStyle;
  }
  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */


  function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;

      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;

        if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
          extend$1(res, styleData);
        }
      }
    }

    if (styleData = normalizeStyleData(vnode.data)) {
      extend$1(res, styleData);
    }

    var parentNode = vnode;

    while (parentNode = parentNode.parent) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend$1(res, styleData);
      }
    }

    return res;
  }
  /*  */


  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;

  var setProp = function (el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize$1(name);

      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];
  var emptyStyle;
  var normalize$1 = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize(prop);

    if (prop !== 'filter' && prop in emptyStyle) {
      return prop;
    }

    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  });

  function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
      return;
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

    var oldStyle = oldStaticStyle || oldStyleBinding;
    var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.

    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend$1({}, style) : style;
    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }

    for (name in newStyle) {
      cur = newStyle[name];

      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };
  /*  */

  var whitespaceRE = /\s+/;
  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */

  function addClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }
    /* istanbul ignore else */


    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) {
          return el.classList.add(c);
        });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";

      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }
  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */


  function removeClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }
    /* istanbul ignore else */


    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) {
          return el.classList.remove(c);
        });
      } else {
        el.classList.remove(cls);
      }

      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';

      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }

      cur = cur.trim();

      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }
  /*  */


  function resolveTransition(def$$1) {
    if (!def$$1) {
      return;
    }
    /* istanbul ignore else */


    if (typeof def$$1 === 'object') {
      var res = {};

      if (def$$1.css !== false) {
        extend$1(res, autoCssTransition(def$$1.name || 'v'));
      }

      extend$1(res, def$$1);
      return res;
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1);
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: name + "-enter",
      enterToClass: name + "-enter-to",
      enterActiveClass: name + "-enter-active",
      leaveClass: name + "-leave",
      leaveToClass: name + "-leave-to",
      leaveActiveClass: name + "-leave-active"
    };
  });
  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation'; // Transition property/event sniffing

  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';

  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }

    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  } // binding to window is necessary to make hot reload work in IE in strict mode


  var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
  /* istanbul ignore next */
  function (fn) {
    return fn();
  };

  function nextFrame(fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass(el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }

    removeClass(el, cls);
  }

  function whenTransitionEnds(el, expectedType, cb) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;

    if (!type) {
      return cb();
    }

    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;

    var end = function () {
      el.removeEventListener(event, onEnd);
      cb();
    };

    var onEnd = function (e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };

    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);
    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */

    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }

    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    };
  }

  function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i]);
    }));
  } // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
  // in a locale-dependent way, using a comma instead of a dot.
  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting
  // as a floor function) causing unexpected behaviors


  function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
  }
  /*  */


  function enter(vnode, toggleDisplay) {
    var el = vnode.elm; // call leave callback now

    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;

      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);

    if (isUndef(data)) {
      return;
    }
    /* istanbul ignore if */


    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration; // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.

    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;

    while (transitionNode && transitionNode.parent) {
      context = transitionNode.context;
      transitionNode = transitionNode.parent;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return;
    }

    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
    var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

    if ("development" !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);
    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }

      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }

        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }

      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode, 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];

        if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
          pendingNode.elm._leaveCb();
        }

        enterHook && enterHook(el, cb);
      });
    } // start enter transition


    beforeEnterHook && beforeEnterHook(el);

    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        removeTransitionClass(el, startClass);

        if (!cb.cancelled) {
          addTransitionClass(el, toClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitEnterDuration)) {
              setTimeout(cb, explicitEnterDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave(vnode, rm) {
    var el = vnode.elm; // call enter callback now

    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;

      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);

    if (isUndef(data) || el.nodeType !== 1) {
      return rm();
    }
    /* istanbul ignore if */


    if (isDef(el._leaveCb)) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;
    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);
    var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

    if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }

      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }

      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }

        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }

      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave() {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return;
      } // record leaving element


      if (!vnode.data.show && el.parentNode) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
      }

      beforeLeave && beforeLeave(el);

      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          removeTransitionClass(el, leaveClass);

          if (!cb.cancelled) {
            addTransitionClass(el, leaveToClass);

            if (!userWantsControl) {
              if (isValidDuration(explicitLeaveDuration)) {
                setTimeout(cb, explicitLeaveDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }

      leave && leave(el, cb);

      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  } // only used in dev mode


  function checkDuration(val, name, vnode) {
    if (typeof val !== 'number') {
      warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
    } else if (isNaN(val)) {
      warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
    }
  }

  function isValidDuration(val) {
    return typeof val === 'number' && !isNaN(val);
  }
  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */


  function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
      return false;
    }

    var invokerFns = fn.fns;

    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    } else {
      return (fn._length || fn.length) > 1;
    }
  }

  function _enter(_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1(vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};
  var platformModules = [attrs, klass, events, domProps, style, transition];
  /*  */
  // the directive module should be applied last, after all
  // built-in modules have been applied.

  var modules = platformModules.concat(baseModules);
  var patch = createPatchFunction({
    nodeOps: nodeOps,
    modules: modules
  });
  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */

  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;

      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var directive = {
    inserted: function inserted(el, binding, vnode, oldVnode) {
      if (vnode.tag === 'select') {
        // #6903
        if (oldVnode.elm && !oldVnode.elm._vOptions) {
          mergeVNodeHook(vnode, 'postpatch', function () {
            directive.componentUpdated(el, binding, vnode);
          });
        } else {
          setSelected(el, binding, vnode.context);
        }

        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;

        if (!binding.modifiers.lazy) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.

          el.addEventListener('change', onCompositionEnd);
          /* istanbul ignore if */

          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },
    componentUpdated: function componentUpdated(el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.

        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);

        if (curOptions.some(function (o, i) {
          return !looseEqual(o, prevOptions[i]);
        })) {
          // trigger change event if
          // no matching option found for at least one value
          var needReset = el.multiple ? binding.value.some(function (v) {
            return hasNoMatchingOption(v, curOptions);
          }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

          if (needReset) {
            trigger(el, 'change');
          }
        }
      }
    }
  };

  function setSelected(el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    /* istanbul ignore if */

    if (isIE || isEdge) {
      setTimeout(function () {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }

  function actuallySetSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;

    if (isMultiple && !Array.isArray(value)) {
      "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
      return;
    }

    var selected, option;

    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];

      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;

        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }

          return;
        }
      }
    }

    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption(value, options) {
    return options.every(function (o) {
      return !looseEqual(o, value);
    });
  }

  function getValue(option) {
    return '_value' in option ? option._value : option.value;
  }

  function onCompositionStart(e) {
    e.target.composing = true;
  }

  function onCompositionEnd(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) {
      return;
    }

    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }
  /*  */
  // recursively search for possible transition defined inside the component root


  function locateNode(vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
  }

  var show = {
    bind: function bind(el, ref, vnode) {
      var value = ref.value;
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },
    update: function update(el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;
      /* istanbul ignore if */

      if (!value === !oldValue) {
        return;
      }

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;

      if (transition$$1) {
        vnode.data.show = true;

        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },
    unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };
  var platformDirectives = {
    model: directive,
    show: show
  };
  /*  */

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  }; // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered

  function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;

    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children));
    } else {
      return vnode;
    }
  }

  function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options; // props

    for (var key in options.propsData) {
      data[key] = comp[key];
    } // events.
    // extract listeners and pass them directly to the transition methods


    var listeners = options._parentListeners;

    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }

    return data;
  }

  function placeholder(h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      });
    }
  }

  function hasParentTransition(vnode) {
    while (vnode = vnode.parent) {
      if (vnode.data.transition) {
        return true;
      }
    }
  }

  function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
  }

  var isNotTextNode = function (c) {
    return c.tag || isAsyncPlaceholder(c);
  };

  var isVShowDirective = function (d) {
    return d.name === 'show';
  };

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,
    render: function render(h) {
      var this$1 = this;
      var children = this.$slots.default;

      if (!children) {
        return;
      } // filter out text nodes (possible whitespaces)


      children = children.filter(isNotTextNode);
      /* istanbul ignore if */

      if (!children.length) {
        return;
      } // warn multiple elements


      if ("development" !== 'production' && children.length > 1) {
        warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
      }

      var mode = this.mode; // warn invalid mode

      if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
        warn('invalid <transition> mode: ' + mode, this.$parent);
      }

      var rawChild = children[0]; // if this is a component root node and the component's
      // parent container node also has transition, skip.

      if (hasParentTransition(this.$vnode)) {
        return rawChild;
      } // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive


      var child = getRealChild(rawChild);
      /* istanbul ignore if */

      if (!child) {
        return rawChild;
      }

      if (this._leaving) {
        return placeholder(h, rawChild);
      } // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.


      var id = "__transition-" + this._uid + "-";
      child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild); // mark v-show
      // so that the transition module can hand over the control to the directive

      if (child.data.directives && child.data.directives.some(isVShowDirective)) {
        child.data.show = true;
      }

      if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild.data.transition = extend$1({}, data); // handle transition mode

        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild);
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild;
          }

          var delayedLeave;

          var performLeave = function () {
            delayedLeave();
          };

          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) {
            delayedLeave = leave;
          });
        }
      }

      return rawChild;
    }
  };
  /*  */

  var props = extend$1({
    tag: String,
    moveClass: String
  }, transitionProps);
  delete props.mode;
  var TransitionGroup = {
    props: props,
    beforeMount: function beforeMount() {
      var this$1 = this;
      var update = this._update;

      this._update = function (vnode, hydrating) {
        var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

        this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
        );

        this$1._vnode = this$1.kept;
        restoreActiveInstance();
        update.call(this$1, vnode, hydrating);
      };
    },
    render: function render(h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];

        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c;
            (c.data || (c.data = {})).transition = transitionData;
          } else if ("development" !== 'production') {
            var opts = c.componentOptions;
            var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
            warn("<transition-group> children must be keyed: <" + name + ">");
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];

        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();

          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }

        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children);
    },
    updated: function updated() {
      var children = this.prevChildren;
      var moveClass = this.moveClass || (this.name || 'v') + '-move';

      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return;
      } // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.


      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation); // force reflow to put everything in position
      // assign to this to avoid being removed in tree-shaking
      // $flow-disable-line

      this._reflow = document.body.offsetHeight;
      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
            if (e && e.target !== el) {
              return;
            }

            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },
    methods: {
      hasMove: function hasMove(el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false;
        }
        /* istanbul ignore if */


        if (this._hasMove) {
          return this._hasMove;
        } // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.


        var clone = el.cloneNode();

        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) {
            removeClass(clone, cls);
          });
        }

        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return this._hasMove = info.hasTransform;
      }
    }
  };

  function callPendingCbs(c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */


    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition(c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation(c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;

    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };
  /*  */
  // install platform specific utils

  Vue.config.mustUseProp = mustUseProp;
  Vue.config.isReservedTag = isReservedTag;
  Vue.config.isReservedAttr = isReservedAttr;
  Vue.config.getTagNamespace = getTagNamespace;
  Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

  extend$1(Vue.options.directives, platformDirectives);
  extend$1(Vue.options.components, platformComponents); // install platform patch function

  Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

  Vue.prototype.$mount = function (el, hydrating) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating);
  }; // devtools global hook

  /* istanbul ignore next */


  if (inBrowser) {
    setTimeout(function () {
      if (config$1.devtools) {
        if (devtools) {
          devtools.emit('init', Vue);
        } else if ("development" !== 'production' && "development" !== 'test') {
          console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
        }
      }

      if ("development" !== 'production' && "development" !== 'test' && config$1.productionTip !== false && typeof console !== 'undefined') {
        console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
      }
    }, 0);
  }

  var script$3 = {
    name: "CodeBlockCsv",
    props: {
      header: Array,
      input: String
    },
    data: function data() {
      return {
        selection: {
          c: 0,
          r: 0,
          sc: 0,
          sr: 0
        },
        editingText: "",
        editing: false,
        rowHeight: 24,
        selectionMode: false,
        selectionModeColumn: false,
        headerResizeAt: -1,
        data: [[]]
      };
    },
    watch: {
      input: function input(_input) {
        this.updateData(_input);
      }
    },
    computed: {
      editorStyleObj: function editorStyleObj() {
        return {
          left: this.positionLeft(this.selection.c) + "px",
          top: this.selection.r * 24 + "px",
          width: this.selectionSize.w + "px"
        };
      },
      selectionTransform: function selectionTransform() {
        return "translate(".concat(this.positionLeft(this.selectionCount.c), ",  ").concat(this.selectionCount.r * 24, ")");
      },
      selectionCount: function selectionCount() {
        return {
          r: this.selection.r <= this.selection.sr ? this.selection.r : this.selection.sr,
          c: this.selection.c <= this.selection.sc ? this.selection.c : this.selection.sc,
          w: Math.abs(this.selection.sc - this.selection.c) + 1,
          h: Math.abs(this.selection.sr - this.selection.r) + 1
        };
      },
      selectionSize: function selectionSize() {
        return {
          r: this.positionLeft(this.selectionCount.r),
          c: this.positionLeft(this.selectionCount.c),
          w: this.positionLeft(this.selectionCount.c + this.selectionCount.w) - this.positionLeft(this.selectionCount.c),
          h: this.positionLeft(this.selectionCount.c + this.selectionCount.h) - this.positionLeft(this.selectionCount.c)
        };
      },
      headerObj: function headerObj() {
        return this.header ? this.header : this.data[0].map(function (item, idx) {
          return {
            name: String.fromCharCode(65 + idx),
            width: 80
          };
        });
      },
      stringData: function stringData() {
        return "".concat(this.data.map(function (i) {
          return i.join(",");
        }).join("\n"), "\n");
      }
    },
    methods: {
      updateData: function updateData(input) {
        var data = this.input.split(/[\r|\n|\r\n]/).filter(function (item) {
          return item.length > 0;
        }).map(function (i) {
          return i.split(",");
        }).filter(function (item) {
          return item.length > 0;
        }); //最初の一行を除去

        data.shift();
        var normalized = [];
        var max = 0;

        var _iterator = _createForOfIteratorHelper(data),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var col = _step.value;

            if (max < col.length) {
              max = col.length;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(data),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _col = _step2.value;
            var m = [];

            for (var i = 0; i < max; i++) {
              if (i < _col.length) {
                m.push(_col[i]);
              } else {
                m.push("");
              }
            }

            normalized.push(m);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this.data = normalized;
      },
      startColumnSelect: function startColumnSelect(c) {
        this.selection.sr = this.data.length - 1;
        this.selection.r = 0;
        this.selection.sc = c;
        this.selection.c = c;
        this.selectionModeColumn = true;
      },
      changeColumnSelect: function changeColumnSelect(c) {
        if (this.selectionModeColumn) {
          this.selection.c = c;
        }
      },
      endColumnSelect: function endColumnSelect() {
        this.selectionModeColumn = false;
      },
      headerResizeStart: function headerResizeStart(c) {
        this.headerResizeAt = c;
      },
      headerResizeEnd: function headerResizeEnd() {
        this.headerResizeAt = -1;
      },
      headerResizeMove: function headerResizeMove(e) {
        var headerRect = e.target.parentNode.parentNode.getBoundingClientRect();
        var headerMouseX = e.clientX - headerRect.left;

        if (this.headerResizeAt >= 0) {
          var updateWidth = headerMouseX - this.positionLeft(this.headerResizeAt);
          this.headerObj[this.headerResizeAt].width = updateWidth > 30 ? updateWidth : 30;
        }
      },
      widthAt: function widthAt(index) {
        return this.headerObj[index].width;
      },
      positionLeft: function positionLeft(index) {
        return this.headerObj.slice(0, index).map(function (it) {
          return it.width;
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
      },
      setDataAt: function setDataAt(c, r, value) {
        Vue.set(this.data[r], c, value);
        this.$emit("change", this.stringData);
      },
      getDataAt: function getDataAt(c, r) {
        return this.data[r][c];
      },
      onBlur: function onBlur() {
        this.editing = false;
        this.setDataAt(this.selection.c, this.selection.r, this.editingText);
      },
      translateCol: function translateCol(ci) {
        return "translate(".concat(this.positionLeft(ci), ", 0)");
      },
      translateRow: function translateRow(ri) {
        return "translate(0, ".concat(ri * 24, ")");
      },
      onMouseDownCell: function onMouseDownCell(c, r) {
        var _this = this;

        if (this.editing) {
          this.onBlur();
        }

        if (this.selectionCount.c === c && this.selectionCount.r === r && this.selectionCount.w === 1 && this.selectionCount.h === 1) {
          this.editHere();
          return;
        }

        this.setSelectionStart(c, r);
        Vue.nextTick(function () {
          _this.$refs["hiddenInput"].focus();
        });
      },
      setSelectionSingle: function setSelectionSingle(c, r) {
        this.selection.c = c;
        this.selection.r = r;
        this.selection.sc = c;
        this.selection.sr = r;
        this.setEditingText();
      },
      setSelectionStart: function setSelectionStart(c, r) {
        this.setSelectionSingle(c, r);
        this.selectionMode = true;
      },
      onMouseMoveCell: function onMouseMoveCell(c, r) {
        if (this.selectionMode) {
          this.setSelectionEnd(c, r);
        }
      },
      onMouseUpSvg: function onMouseUpSvg() {
        this.endSelection();
        this.headerResizeEnd();
      },
      setSelectionEnd: function setSelectionEnd(c, r) {
        if (this.selectionMode) {
          this.selection.c = c;
          this.selection.r = r;
          this.setEditingText();
        }
      },
      endSelection: function endSelection() {
        this.selectionMode = false;
      },
      editCell: function editCell(c, r) {
        var _this2 = this;

        this.editing = true;
        Vue.nextTick(function () {
          _this2.$refs.hiddenInput.focus();
        });
      },
      editHere: function editHere() {
        this.editCell(this.selection.c, this.selection.r);
      },
      clearCell: function clearCell(c, r) {
        this.setDataAt(c, r, "");
      },
      clearSelection: function clearSelection() {
        for (var i = 0; i < this.selectionCount.h; i++) {
          for (var j = 0; j < this.selectionCount.w; j++) {
            this.clearCell(this.selectionCount.c + j, this.selectionCount.r + i);
          }
        }
      },
      isInsideTable: function isInsideTable(c, r) {
        if (c < 0) {
          return false;
        }

        if (r < 0) {
          return false;
        }

        if (c > this.data[0].length - 1) {
          return false;
        }

        if (r > this.data.length - 1) {
          return false;
        }

        return true;
      },
      moveCursor: function moveCursor(dc, dr) {
        if (!this.isInsideTable(this.selection.c + dc, this.selection.r + dr)) {
          return;
        }

        if (this.selectionMode) {
          this.setSelectionEnd(this.selection.c + dc, this.selection.r + dr);
          this.fixScroll();
          return;
        }

        if (this.editing) {
          this.onBlur();
        }

        this.setSelectionSingle(this.selection.c + dc, this.selection.r + dr);
        this.fixScroll();
      },
      moveInputCaretToEnd: function moveInputCaretToEnd() {
        var el = this.$refs["hiddenInput"];
        el.setSelectionRange(this.editingText.length, this.editingText.length);
      },
      fixScroll: function fixScroll() {
        var el = this.$refs["wrapper"];

        if (el.scrollTop > this.selection.r * 24) {
          el.scrollTop = this.selection.r * 24;
        }

        if (el.scrollTop < this.selection.r * 24 - el.clientHeight + 24) {
          el.scrollTop = this.selection.r * 24 - el.clientHeight + 24;
        }

        if (el.scrollLeft < this.positionLeft(this.selection.c) - el.clientWidth) {
          el.scrollLeft = this.positionLeft(this.selection.c);
        }
      },
      setEditingText: function setEditingText() {
        this.editingText = this.getDataAt(this.selection.c, this.selection.r);
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      this.updateData(this.input);
      this.editingText = this.getDataAt(0, 0);
      this.onBlur();
      var target = this.$el;

      target.onkeydown = function (e) {
        switch (e.keyCode) {
          case 8:
            //backspace
            if (!_this3.editing) {
              _this3.moveInputCaretToEnd();

              _this3.editHere();
            }

            break;

          case 37:
            //left
            _this3.moveCursor(-1, 0);

            e.preventDefault();
            break;

          case 38:
            //up
            _this3.moveCursor(0, -1);

            e.preventDefault();
            break;

          case 39:
            //right
            _this3.moveCursor(1, 0);

            e.preventDefault();
            break;

          case 40:
            //down
            _this3.moveCursor(0, 1);

            e.preventDefault();
            break;

          case 46:
            //delete
            _this3.clearSelection();

            break;

          case 13:
            //enter
            _this3.moveCursor(0, 1);

            break;

          case 16:
            //shift
            _this3.setSelectionStart(_this3.selection.c, _this3.selection.r);

            break;

          case 91:
            //ctrl
            break;

          case 113:
            //F2
            if (!_this3.editing) {
              _this3.moveInputCaretToEnd();

              _this3.editHere();
            }

            break;

          default:
            if (!_this3.editing) {
              _this3.editingText = "";

              _this3.editHere();
            }

            break;
        }
      };

      target.onkeyup = function (e) {
        switch (e.keyCode) {
          case 16:
            //shift
            _this3.endSelection();

            break;
        }
      };
    }
  };
  var css_248z$4 = "rect[data-v-7090eca6]{fill:#fff;stroke:#999;shape-rendering:crispEdges}.selection[data-v-7090eca6]{fill:none;stroke:#9e37ff;stroke-width:3px}.col-header[data-v-7090eca6]{fill:#eee}.col-header__resize[data-v-7090eca6]{cursor:col-resize;opacity:0}.col-header__resize[data-v-7090eca6]:hover{cursor:col-resize;fill:#9e37ff;opacity:.5}.col-header__resize.active[data-v-7090eca6]{fill:#9e37ff;opacity:.5}.grid[data-v-7090eca6]{position:relative;background:#eee;width:100%}.editor__frame[data-v-7090eca6]{position:absolute;overflow:hidden}text[data-v-7090eca6]{dominant-baseline:central;user-select:none}input[data-v-7090eca6]{border:none;box-sizing:border-box;outline:0;margin-left:2px;font-size:1rem}svg[data-v-7090eca6]{display:block;touch-action:none}.editor__textarea[data-v-7090eca6]{opacity:0;width:100%}.editor--visible[data-v-7090eca6]{opacity:1}";
  styleInject(css_248z$4);
  /* script */

  var __vue_script__$3 = script$3;
  /* template */

  var __vue_render__$3 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      staticClass: "grid",
      on: {
        "pointerup": function pointerup($event) {
          return _vm.onMouseUpSvg();
        },
        "pointermove": _vm.headerResizeMove
      }
    }, [_c('svg', {
      attrs: {
        "width": _vm.positionLeft(_vm.data.length + 1) + 1,
        "height": "24"
      }
    }, _vm._l(_vm.headerObj, function (col, ci) {
      return _c('g', {
        key: ci,
        attrs: {
          "transform": _vm.translateCol(ci)
        },
        on: {
          "pointerdown": function pointerdown($event) {
            return _vm.startColumnSelect(ci);
          },
          "pointermove": function pointermove($event) {
            return _vm.changeColumnSelect(ci);
          },
          "pointerup": _vm.endColumnSelect
        }
      }, [_c('rect', {
        staticClass: "col-header",
        attrs: {
          "x": "0",
          "y": "0",
          "width": _vm.widthAt(ci),
          "height": _vm.rowHeight
        }
      }), _vm._v(" "), _c('text', {
        staticClass: "col-header__text",
        attrs: {
          "text-anchor": "middle",
          "x": _vm.widthAt(ci) / 2,
          "y": "12",
          "width": _vm.widthAt(ci),
          "height": _vm.rowHeight
        }
      }, [_vm._v(_vm._s(col.name))]), _vm._v(" "), _c('rect', {
        staticClass: "col-header__resize",
        "class": {
          'active': ci === _vm.headerResizeAt
        },
        attrs: {
          "x": _vm.widthAt(ci) - 5,
          "y": 0,
          "width": 5,
          "height": _vm.rowHeight
        },
        on: {
          "pointerdown": function pointerdown($event) {
            $event.stopPropagation();
            return _vm.headerResizeStart(ci);
          }
        }
      })]);
    }), 0), _vm._v(" "), _c('div', {
      ref: "wrapper",
      staticStyle: {
        "height": "400px",
        "overflow": "scroll",
        "position": "relative"
      },
      style: {
        'height': (_vm.data.length + 1) * 24
      },
      attrs: {
        "touch-action": "none"
      }
    }, [_c('svg', {
      attrs: {
        "width": _vm.positionLeft(_vm.data.length + 1) + 1,
        "height": _vm.data.length * 24
      }
    }, [_vm._l(_vm.data, function (row, ri) {
      return _c('g', {
        key: ri,
        attrs: {
          "transform": _vm.translateRow(ri)
        }
      }, _vm._l(row, function (col, ci) {
        return _c('g', {
          key: ci,
          attrs: {
            "transform": _vm.translateCol(ci)
          },
          on: {
            "pointerdown": function pointerdown($event) {
              return _vm.onMouseDownCell(ci, ri);
            },
            "pointermove": function pointermove($event) {
              return _vm.onMouseMoveCell(ci, ri);
            }
          }
        }, [_c('rect', {
          attrs: {
            "x": "0",
            "y": "0",
            "width": _vm.widthAt(ci),
            "height": _vm.rowHeight
          }
        }), _vm._v(" "), _c('text', {
          attrs: {
            "x": "2",
            "y": "12",
            "width": _vm.widthAt(ci),
            "height": _vm.rowHeight
          }
        }, [_vm._v(_vm._s(col))])]);
      }), 0);
    }), _vm._v(" "), _c('rect', {
      staticClass: "selection",
      attrs: {
        "transform": _vm.selectionTransform,
        "x": "0",
        "y": "0",
        "width": _vm.selectionSize.w,
        "height": _vm.selectionCount.h * _vm.rowHeight
      }
    })], 2), _vm._v(" "), _c('div', {
      staticClass: "editor__frame",
      style: _vm.editorStyleObj
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: _vm.editingText,
        expression: "editingText"
      }],
      ref: "hiddenInput",
      staticClass: "editor__textarea",
      "class": {
        'editor--visible': _vm.editing
      },
      attrs: {
        "autofocus": ""
      },
      domProps: {
        "value": _vm.editingText
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.onMouseDownCell(_vm.selection.c, _vm.selection.r);
        },
        "blur": _vm.onBlur,
        "input": function input($event) {
          if ($event.target.composing) {
            return;
          }

          _vm.editingText = $event.target.value;
        }
      }
    })])])]);
  };

  var __vue_staticRenderFns__$3 = [];
  /* style */

  var __vue_inject_styles__$3 = undefined;
  /* scoped */

  var __vue_scope_id__$3 = "data-v-7090eca6";
  /* module identifier */

  var __vue_module_identifier__$3 = undefined;
  /* functional template */

  var __vue_is_functional_template__$3 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$3 = normalizeComponent({
    render: __vue_render__$3,
    staticRenderFns: __vue_staticRenderFns__$3
  }, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, undefined, undefined, undefined); //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //


  var handleSize = 10 / 2;

  function isHit(box, x, y) {
    return box.x <= x && x <= box.x + box.width && box.y <= y && y <= box.y + box.height;
  }

  function round(v) {
    return Math.round(v / 10) * 10;
  }

  var script$4 = {
    props: {
      input: String
    },
    methods: {
      downArrow: function downArrow(ev, item, x, y) {
        this.createArrowPos = {
          x1: item.x + x,
          y1: item.y + y,
          x2: item.x + x,
          y2: item.y + y
        };
        var el = ev.currentTarget;
        el.setPointerCapture(ev.pointerId);
        this.createArrow = true;
      },
      moveArrow: function moveArrow(ev) {
        var target_rect = this.$el.getBoundingClientRect();
        var x = ev.clientX - target_rect.left;
        var y = ev.clientY - target_rect.top;
        this.createArrowPos.x2 = x;
        this.createArrowPos.y2 = y;
      },
      upArrow: function upArrow(ev) {
        this.items.push({
          type: "line",
          x1: round(this.createArrowPos.x1),
          x2: round(this.createArrowPos.x2),
          y1: round(this.createArrowPos.y1),
          y2: round(this.createArrowPos.y2)
        });
        this.$emit("change", this.stringData);
        this.createArrow = false;
      },
      moveAffectedLines: function moveAffectedLines(affected, dx, dy, isStart) {
        if (isStart) {
          affected.forEach(function (i) {
            i.x1 += dx;
            i.y1 += dy;
          });
        } else {
          affected.forEach(function (i) {
            i.x2 += dx;
            i.y2 += dy;
          });
        }
      },
      getSvgOffset: function getSvgOffset(e) {
        var svg = this.$refs.canv;
        var pt = svg.createSVGPoint(); //スクリーン座標を取得

        pt.x = e.clientX;
        pt.y = e.clientY;
        return pt.matrixTransform(svg.getScreenCTM().inverse());
      },
      moveHandle: function moveHandle(ev, item, type) {
        if (this.dragging) {
          var target_rect = ev.currentTarget.getBoundingClientRect();
          var x = ev.clientX - target_rect.left;
          var y = ev.clientY - target_rect.top;
          var svgOffset = this.getSvgOffset(ev);

          if (type === "x") {
            var nx = round(svgOffset.x - this.dragOffset.x);
            var ny = round(svgOffset.y - this.dragOffset.y); //Arrow Start

            var affectedStart = this.items.filter(function (i) {
              return i.type === "line";
            }).filter(function (i) {
              return isHit(item, i.x1, i.y1);
            });
            this.moveAffectedLines(affectedStart, nx - item.x, ny - item.y, true); //Arrow End

            var affectedEnd = this.items.filter(function (i) {
              return i.type === "line";
            }).filter(function (i) {
              return isHit(item, i.x2, i.y2);
            });
            this.moveAffectedLines(affectedEnd, nx - item.x, ny - item.y, false);
            item.x = round(nx);
            item.y = round(ny);
          }

          if (type === "-") {
            var dx = item.x2 - item.x1;
            var dy = item.y2 - item.y1;

            if (dx > 0) {
              item.x1 = round(svgOffset.x - this.dragOffset.x);
            } else {
              item.x1 = round(svgOffset.x - this.dragOffset.x - dx);
            }

            if (dy > 0) {
              item.y1 = round(svgOffset.y - this.dragOffset.y);
            } else {
              item.y1 = round(svgOffset.y - this.dragOffset.y - dy);
            }

            item.x2 = round(item.x1 + dx);
            item.y2 = round(item.y1 + dy);
          }

          if (type === "s") {
            item.x1 = round(svgOffset.x - this.dragOffset.x);
            item.y1 = round(svgOffset.y - this.dragOffset.y);
          }

          if (type === "e") {
            item.x2 = round(svgOffset.x - this.dragOffset.x);
            item.y2 = round(svgOffset.y - this.dragOffset.y);
          }

          if (type.indexOf("l") >= 0) {
            var _dx = svgOffset.x - this.dragOffset.x + handleSize;

            var px = item.x - _dx;
            item.x = round(_dx);
            item.width = round(item.width + px);
          }

          if (type.indexOf("t") >= 0) {
            var _dy = svgOffset.y - this.dragOffset.y + handleSize;

            var py = item.y - _dy;
            item.y = round(_dy);
            item.height = round(item.height + py);
          }

          if (type.indexOf("d") >= 0) {
            var my = svgOffset.y - this.dragOffset.y + handleSize;
            item.height = round(my - item.y);
          }

          if (type.indexOf("r") >= 0) {
            var mx = svgOffset.x - this.dragOffset.x + handleSize;
            item.width = round(mx - item.x);
          }
        }
      },
      upHandle: function upHandle(ev) {
        this.dragging = false;
        this.$emit("change", this.stringData);
      },
      downHandle: function downHandle(ev, item, type) {
        var target_rect = ev.currentTarget.getBoundingClientRect();
        var x = ev.clientX - target_rect.left;
        var y = ev.clientY - target_rect.top;
        var el = ev.currentTarget;
        el.setPointerCapture(ev.pointerId);
        this.dragOffset.x = x;
        this.dragOffset.y = y;
        this.dragging = true;
      },
      addBlock: function addBlock() {
        var px = 10;
        var py = 10;
        var boxes = this.items.filter(function (i) {
          return i.type === "box";
        });

        if (boxes.length > 0) {
          var pitem = boxes[boxes.length - 1];
          px = pitem.x;
          py = pitem.y + pitem.height;
        }

        this.items.push({
          type: "box",
          x: px,
          y: py,
          width: 200,
          height: 100,
          text: "item"
        });
        this.selectedIndex = this.items.length - 1;
        this.$emit("change", this.stringData);
      },
      changeBoxText: function changeBoxText(item) {
        var text = window.prompt("テキスト入力", item.text);

        if (text) {
          item.text = text;
        }

        this.$emit("change", this.stringData);
      },
      updateData: function updateData(input) {
        var data = this.input.split(/[\r|\n|\r\n]/).filter(function (item) {
          return item.length > 0;
        }).map(function (i) {
          var m = i.split(" ");

          if (m[0] === "-") {
            return {
              type: "box",
              text: m[1],
              x: +m[2],
              y: +m[3],
              width: +m[4],
              height: +m[5]
            };
          }

          if (m[0] === ">") {
            return {
              type: "line",
              text: m[1],
              x1: +m[2],
              y1: +m[3],
              x2: +m[4],
              y2: +m[5]
            };
          } // const m = i.match(/- (.+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)/);
          // if (m) {
          //   return {
          //     type: "box",
          //     text: m[1],
          //     x: +m[2],
          //     y: +m[3],
          //     width: +m[4],
          //     height: +m[5]
          //   };
          // }
          // const arrow = i.match(/> (.+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)/);
          // if (arrow) {
          //   return {
          //     type: "line",
          //     text: arrow[1],
          //     x1: +arrow[2],
          //     y1: +arrow[3],
          //     x2: +arrow[4],
          //     y2: +arrow[5]
          //   };
          // }

        }).filter(function (item) {
          return item;
        });
        this.items = data;
      },
      editorFocus: function editorFocus() {},
      editorBlur: function editorBlur() {
        this.selectedIndex = -1;
      },
      removeItem: function removeItem(index) {
        this.items.splice(this.selectedIndex, 1);
        this.selectedIndex = -1;
        this.$emit("change", this.stringData);
      },
      globalKeydown: function globalKeydown(ev) {
        if (ev.key === "Delete" && this.selectedItem) {
          this.removeItem(this.selectedIndex);
        }
      }
    },
    computed: {
      selectedItem: function selectedItem() {
        return this.items[this.selectedIndex];
      },
      stringData: function stringData() {
        return "".concat(this.items.map(function (i) {
          if (i.type === "box") {
            return "- " + [i.text, i.x, i.y, i.width, i.height].join(" ");
          }

          if (i.type === "line") {
            return "> " + [i.text, i.x1, i.y1, i.x2, i.y2].join(" ");
          }

          return "";
        }).join("\n"), "\n");
      }
    },
    data: function data() {
      return {
        createArrow: false,
        createArrowPos: {
          x: 0,
          y: 0
        },
        dragging: false,
        dragOffset: {
          x: 0,
          y: 0
        },
        selectedIndex: -1,
        items: []
      };
    },
    mounted: function mounted() {
      this.updateData(this.input);
    },
    watch: {
      input: function input(_input) {
        this.updateData(_input);
      }
    }
  };
  var css_248z$5 = "svg[data-v-6f8730f3]{border:1px solid #999;user-select:none;background:#f0f0f0;touch-action:none}.innerText[data-v-6f8730f3]{margin:.5rem;pointer-events:none}";
  styleInject(css_248z$5);
  /* script */

  var __vue_script__$4 = script$4;
  /* template */

  var __vue_render__$4 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('svg', {
      ref: "canv",
      attrs: {
        "height": "400",
        "width": "600",
        "tabindex": "0"
      },
      on: {
        "focus": _vm.editorFocus,
        "blur": _vm.editorBlur,
        "keydown": _vm.globalKeydown
      }
    }, [_vm._l(_vm.items, function (item, idx) {
      return _c('g', {
        key: idx,
        on: {
          "pointerdown": function pointerdown($event) {
            _vm.selectedIndex = idx;
          }
        }
      }, [item.type === 'box' ? _c('g', {
        attrs: {
          "transform": "translate(" + item.x + ", " + item.y + ")"
        }
      }, [_c('rect', {
        attrs: {
          "fill": "white",
          "stroke": "black",
          "x": "0.5",
          "y": "0.5",
          "height": item.height,
          "width": item.width
        }
      }), _vm._v(" "), _c('foreignObject', {
        attrs: {
          "height": item.height,
          "width": item.width,
          "x": "0",
          "y": "0"
        }
      }, [_c('div', {
        staticClass: "innerText",
        domProps: {
          "textContent": _vm._s(item.text)
        }
      })]), _vm._v(" "), _c('rect', {
        attrs: {
          "fill": "rgba(255,255,255,0)",
          "x": "0.5",
          "y": "0.5",
          "height": item.height,
          "width": item.width
        },
        on: {
          "dblclick": function dblclick($event) {
            return _vm.changeBoxText(item);
          },
          "pointerdown": function pointerdown($event) {
            return _vm.downHandle($event, item, 'x');
          },
          "pointerup": _vm.upHandle,
          "pointermove": function pointermove($event) {
            return _vm.moveHandle($event, item, 'x');
          }
        }
      })], 1) : _vm._e(), _vm._v(" "), item.type === 'line' ? _c('g', {
        on: {
          "pointerdown": function pointerdown($event) {
            return _vm.downHandle($event, item, '-');
          },
          "pointerup": _vm.upHandle,
          "pointermove": function pointermove($event) {
            return _vm.moveHandle($event, item, '-');
          }
        }
      }, [_c('line', {
        attrs: {
          "x1": item.x1,
          "x2": item.x2,
          "y1": item.y1,
          "y2": item.y2,
          "stroke": "rgba(0,0,0,0)",
          "stroke-width": "10"
        }
      }), _vm._v(" "), _c('line', {
        attrs: {
          "x1": item.x1,
          "x2": item.x2,
          "y1": item.y1,
          "y2": item.y2,
          "stroke": "black"
        }
      }), _vm._v(" "), _c('g', {
        staticStyle: {
          "pointer-events": "none"
        },
        attrs: {
          "transform": "translate(" + item.x2 + ", " + item.y2 + ")"
        }
      }, [_c('g', {
        attrs: {
          "transform": "rotate(" + Math.atan2(item.y2 - item.y1, item.x2 - item.x1) / 2 / Math.PI * 360 + ")"
        }
      }, [_c('polygon', {
        attrs: {
          "points": "0,0 -20,-8 -18,0 -20,8",
          "fill": "black"
        }
      })])])]) : _vm._e()]);
    }), _vm._v(" "), _vm.selectedItem ? _c('g', [_vm.selectedItem.type === 'box' ? _c('g', {
      attrs: {
        "transform": "translate(" + _vm.selectedItem.x + ", " + _vm.selectedItem.y + ")"
      }
    }, [_c('rect', {
      attrs: {
        "fill": "none",
        "stroke": "green",
        "x": "0.5",
        "y": "0.5",
        "height": _vm.selectedItem.height,
        "width": _vm.selectedItem.width
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": "-5",
        "y": "-5",
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 'tl');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 'tl');
        }
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": -5 + _vm.selectedItem.width,
        "y": "-5",
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 'tl');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 'tr');
        }
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": -5 + _vm.selectedItem.width,
        "y": -5 + _vm.selectedItem.height,
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 'dr');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 'dr');
        }
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": -5,
        "y": -5 + _vm.selectedItem.height,
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 'dl');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 'dl');
        }
      }
    }), _vm._v(" "), _c('circle', {
      attrs: {
        "cx": 0,
        "cy": _vm.selectedItem.height / 2,
        "r": "6",
        "fill": "rgba(100,200,100, 0.5)"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downArrow($event, _vm.selectedItem, 0, _vm.selectedItem.height / 2);
        },
        "pointerup": _vm.upArrow,
        "pointermove": function pointermove($event) {
          return _vm.moveArrow($event);
        }
      }
    }), _vm._v(" "), _c('circle', {
      attrs: {
        "cx": _vm.selectedItem.width,
        "cy": _vm.selectedItem.height / 2,
        "r": "6",
        "fill": "rgba(100,200,100, 0.5)"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downArrow($event, _vm.selectedItem, _vm.selectedItem.width, _vm.selectedItem.height / 2);
        },
        "pointerup": _vm.upArrow,
        "pointermove": function pointermove($event) {
          return _vm.moveArrow($event);
        }
      }
    }), _vm._v(" "), _c('circle', {
      attrs: {
        "cx": _vm.selectedItem.width / 2,
        "cy": 0,
        "r": "6",
        "fill": "rgba(100,200,100, 0.5)"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downArrow($event, _vm.selectedItem, _vm.selectedItem.width / 2, 0);
        },
        "pointerup": _vm.upArrow,
        "pointermove": function pointermove($event) {
          return _vm.moveArrow($event);
        }
      }
    }), _vm._v(" "), _c('circle', {
      attrs: {
        "cx": _vm.selectedItem.width / 2,
        "cy": _vm.selectedItem.height,
        "r": "6",
        "fill": "rgba(100,200,100, 0.5)"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downArrow($event, _vm.selectedItem, _vm.selectedItem.width / 2, _vm.selectedItem.height);
        },
        "pointerup": _vm.upArrow,
        "pointermove": function pointermove($event) {
          return _vm.moveArrow($event);
        }
      }
    })]) : _vm._e(), _vm._v(" "), _vm.selectedItem.type === 'line' ? _c('g', [_c('line', {
      staticStyle: {
        "pointer-events": "none"
      },
      attrs: {
        "x1": _vm.selectedItem.x1,
        "x2": _vm.selectedItem.x2,
        "y1": _vm.selectedItem.y1,
        "y2": _vm.selectedItem.y2,
        "stroke": "green"
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": -5 + _vm.selectedItem.x1,
        "y": -5 + _vm.selectedItem.y1,
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 's');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 's');
        }
      }
    }), _vm._v(" "), _c('rect', {
      attrs: {
        "x": -5 + _vm.selectedItem.x2,
        "y": -5 + _vm.selectedItem.y2,
        "height": "10",
        "width": "10",
        "fill": "white",
        "stroke": "green"
      },
      on: {
        "pointerdown": function pointerdown($event) {
          return _vm.downHandle($event, _vm.selectedItem, 'e');
        },
        "pointerup": _vm.upHandle,
        "pointermove": function pointermove($event) {
          return _vm.moveHandle($event, _vm.selectedItem, 'e');
        }
      }
    })]) : _vm._e(), _vm._v(" "), _vm.createArrow ? _c('g', [_c('line', {
      attrs: {
        "x1": _vm.createArrowPos.x1,
        "x2": _vm.createArrowPos.x2,
        "y1": _vm.createArrowPos.y1,
        "y2": _vm.createArrowPos.y2,
        "stroke": "green"
      }
    })]) : _vm._e()]) : _vm._e(), _vm._v(" "), _c('g', {
      staticStyle: {
        "cursor": "pointer"
      },
      attrs: {
        "transform": "translate(" + (600 - 24.5) + ", 5.5)"
      },
      on: {
        "click": _vm.addBlock
      }
    }, [_c('rect', {
      attrs: {
        "fill": "white",
        "stroke": "#999",
        "x": "0",
        "y": "0",
        "width": "20",
        "height": "20",
        "rx": "4",
        "ry": "4"
      }
    }), _vm._v(" "), _c('line', {
      attrs: {
        "x1": "10",
        "x2": "10",
        "y1": "5",
        "y2": "15",
        "stroke": "ForestGreen"
      }
    }), _vm._v(" "), _c('line', {
      attrs: {
        "x1": "5",
        "x2": "15",
        "y1": "10",
        "y2": "10",
        "stroke": "ForestGreen"
      }
    })])], 2);
  };

  var __vue_staticRenderFns__$4 = [];
  /* style */

  var __vue_inject_styles__$4 = undefined;
  /* scoped */

  var __vue_scope_id__$4 = "data-v-6f8730f3";
  /* module identifier */

  var __vue_module_identifier__$4 = undefined;
  /* functional template */

  var __vue_is_functional_template__$4 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$4 = normalizeComponent({
    render: __vue_render__$4,
    staticRenderFns: __vue_staticRenderFns__$4
  }, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, false, undefined, undefined, undefined); //
  //
  //
  //


  var script$5 = {
    props: {
      input: String
    },
    computed: {
      text: function text() {
        return this.input.slice(1);
      }
    }
  };
  var css_248z$6 = "pre{padding:16px;background-color:#f5f5f5;border-radius:3px;word-break:normal;white-space:pre}";
  styleInject(css_248z$6);
  /* script */

  var __vue_script__$5 = script$5;
  /* template */

  var __vue_render__$5 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('pre', {
      domProps: {
        "textContent": _vm._s(_vm.text)
      }
    });
  };

  var __vue_staticRenderFns__$5 = [];
  /* style */

  var __vue_inject_styles__$5 = undefined;
  /* scoped */

  var __vue_scope_id__$5 = undefined;
  /* module identifier */

  var __vue_module_identifier__$5 = undefined;
  /* functional template */

  var __vue_is_functional_template__$5 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$5 = normalizeComponent({
    render: __vue_render__$5,
    staticRenderFns: __vue_staticRenderFns__$5
  }, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5, __vue_module_identifier__$5, false, undefined, undefined, undefined); //


  var script$6 = {
    props: ["blocks"],
    methods: {
      onChange: function onChange(ev, block) {
        this.$emit("change", {
          id: block.id,
          type: block.type,
          body: ev
        });
      }
    },
    components: {
      markdown: __vue_component__,
      kanban: __vue_component__$1,
      gantt: __vue_component__$2,
      csv: __vue_component__$3,
      block: __vue_component__$4,
      plain: __vue_component__$5
    }
  };
  var css_248z$7 = "";
  styleInject(css_248z$7);
  /* script */

  var __vue_script__$6 = script$6;
  /* template */

  var __vue_render__$6 = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('div', {
      staticClass: "markdown-body"
    }, _vm._l(_vm.blocks, function (block) {
      return _c(block.type, {
        key: block.id,
        tag: "div",
        attrs: {
          "input": block.text
        },
        on: {
          "change": function change($event) {
            return _vm.onChange($event, block);
          }
        }
      });
    }), 1);
  };

  var __vue_staticRenderFns__$6 = [];
  /* style */

  var __vue_inject_styles__$6 = undefined;
  /* scoped */

  var __vue_scope_id__$6 = undefined;
  /* module identifier */

  var __vue_module_identifier__$6 = undefined;
  /* functional template */

  var __vue_is_functional_template__$6 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__$6 = normalizeComponent({
    render: __vue_render__$6,
    staticRenderFns: __vue_staticRenderFns__$6
  }, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6, __vue_module_identifier__$6, false, undefined, undefined, undefined);

  return __vue_component__$6;
});
},{"punycode":"../node_modules/node-libs-browser/node_modules/punycode/punycode.js"}],"document-compiler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = compile;

function compile(input) {
  return input.split("```").map(function (block, index) {
    //必ず奇数indexがcode blockになる
    var type = "markdown";

    if (index % 2 === 1) {
      if (block.indexOf("kanban") === 0) {
        type = "kanban";
      }

      if (block.indexOf("gantt") === 0) {
        type = "gantt";
      }

      if (block.indexOf("csv") === 0) {
        type = "csv";
      }

      if (block.indexOf("block") === 0) {
        type = "block";
      }

      if (block.indexOf("\n") === 0) {
        type = "plain";
      }
    }

    return {
      text: block,
      type: type,
      id: index
    };
  });
}
},{}],"../node_modules/parcel/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../node_modules/parcel/src/builtins/bundle-url.js"}],"../node_modules/vue-hot-reload-api/dist/index.js":[function(require,module,exports) {
var Vue // late bind
var version
var map = Object.create(null)
if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map
}
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  if(map[id]) { return }

  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Check if module is recorded
 *
 * @param {String} id
 */

exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined'
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cached together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }

      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)

      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update
      var restore = patchScopedSlots(instance)
      instance.$forceUpdate()
      instance.$nextTick(restore)
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      // prevent record.options._Ctor from being overwritten accidentally
      newCtor.options._Ctor = record.options._Ctor
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

// 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.
function patchScopedSlots (instance) {
  if (!instance._u) { return }
  // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js
  var original = instance._u
  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true)
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true)
    }
  }
  return function () {
    instance._u = original
  }
}

},{}],"App.vue":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _anydownCore = _interopRequireDefault(require("@anydown/anydown-core"));

var _documentCompiler = require("./document-compiler");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
//
//
//
//
//
//
//
//
//
var vscode = acquireVsCodeApi();
var _default = {
  components: {
    Anydown: _anydownCore.default
  },
  data: function data() {
    return {
      input: "",
      splited: []
    };
  },
  watch: {
    input: function input(val) {
      this.splited = (0, _documentCompiler.compile)(val);
    }
  },
  methods: {
    updateBlock: function updateBlock(payload) {
      this.splited[payload.id].text = payload.type + "\n" + payload.body;
      this.input = this.splited.map(function (i) {
        return i.text;
      }).join("```");
      this.apply();
    },
    update: function update(text) {
      vscode.postMessage({
        command: "text",
        text: text
      });
    },
    apply: function apply() {
      vscode.postMessage({
        command: "text",
        text: this.input
      });
    }
  },
  mounted: function mounted() {
    var _this = this;

    window.addEventListener("message", function (event) {
      var message = event.data;

      switch (message.command) {
        case "text":
          _this.input = message.text;
          break;
      }
    });
  }
};
exports.default = _default;
        var $61ec1a = exports.default || module.exports;
      
      if (typeof $61ec1a === 'function') {
        $61ec1a = $61ec1a.options;
      }
    
        /* template */
        Object.assign($61ec1a, (function () {
          var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("anydown", {
    attrs: { blocks: _vm.splited },
    on: {
      change: function($event) {
        return _vm.updateBlock($event)
      }
    }
  })
}
var staticRenderFns = []
render._withStripped = true

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: null,
            functional: undefined
          };
        })());
      
    /* hot reload */
    (function () {
      if (module.hot) {
        var api = require('vue-hot-reload-api');
        api.install(require('vue'));
        if (api.compatible) {
          module.hot.accept();
          if (!module.hot.data) {
            api.createRecord('$61ec1a', $61ec1a);
          } else {
            api.reload('$61ec1a', $61ec1a);
          }
        }

        
        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
      }
    })();
},{"@anydown/anydown-core":"../node_modules/@anydown/anydown-core/dist/anydown-core.js","./document-compiler":"document-compiler.js","_css_loader":"../node_modules/parcel/src/builtins/css-loader.js","vue-hot-reload-api":"../node_modules/vue-hot-reload-api/dist/index.js","vue":"../node_modules/vue/dist/vue.runtime.esm.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _vue = _interopRequireDefault(require("vue"));

var _App = _interopRequireDefault(require("./App"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue.default.config.productionTip = false;
/* eslint-disable no-new */

new _vue.default({
  el: "#app",
  render: function render(h) {
    return h(_App.default);
  }
});
},{"vue":"../node_modules/vue/dist/vue.runtime.esm.js","./App":"App.vue"}],"../node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "55361" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/index.js.map